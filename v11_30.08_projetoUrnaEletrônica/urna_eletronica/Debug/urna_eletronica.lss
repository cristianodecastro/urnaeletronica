
urna_eletronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000492  00800100  00003c66  00003cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800592  00800592  0000418c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000064d4  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db2  00000000  00000000  0000a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003705  00000000  00000000  0000b662  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  0000ed68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aae  00000000  00000000  0000f314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a7d  00000000  00000000  0000fdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0001283f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
       2:	00 00       	nop
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c0       	rjmp	.+232    	; 0x102 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__vector_11>
      30:	68 c0       	rjmp	.+208    	; 0x102 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c0       	rjmp	.+204    	; 0x102 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c0       	rjmp	.+192    	; 0x102 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c0       	rjmp	.+188    	; 0x102 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__vector_18>
      4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c0       	rjmp	.+172    	; 0x102 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c0       	rjmp	.+168    	; 0x102 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
      66:	00 00       	nop
      68:	46 0b       	sbc	r20, r22
      6a:	67 0b       	sbc	r22, r23
      6c:	88 0b       	sbc	r24, r24
      6e:	aa 0b       	sbc	r26, r26
      70:	cc 0b       	sbc	r28, r28
      72:	ee 0b       	sbc	r30, r30
      74:	10 0c       	add	r1, r0
      76:	32 0c       	add	r3, r2
      78:	8a 0c       	add	r8, r10
      7a:	c5 0c       	add	r12, r5
      7c:	a8 0d       	add	r26, r8
      7e:	c9 0d       	add	r28, r9
      80:	95 0e       	add	r9, r21
      82:	4d 0f       	add	r20, r29
      84:	81 0f       	add	r24, r17
      86:	c3 10       	cpse	r12, r3
      88:	15 11       	cpse	r17, r5
      8a:	38 11       	cpse	r19, r8
      8c:	3a 11       	cpse	r19, r10
      8e:	5c 11       	cpse	r21, r12
      90:	7e 11       	cpse	r23, r14
      92:	a0 11       	cpse	r26, r0
      94:	c2 11       	cpse	r28, r2
      96:	e4 11       	cpse	r30, r4
      98:	37 12       	cpse	r3, r23
      9a:	57 15       	cp	r21, r7
      9c:	72 12       	cpse	r7, r18
      9e:	93 12       	cpse	r9, r19
      a0:	5f 13       	cpse	r21, r31
      a2:	57 15       	cp	r21, r7
      a4:	17 14       	cp	r1, r7
      a6:	57 15       	cp	r21, r7
      a8:	dd 16       	cp	r13, r29
      aa:	00 17       	cp	r16, r16
      ac:	02 17       	cp	r16, r18
      ae:	24 17       	cp	r18, r20
      b0:	46 17       	cp	r20, r22
      b2:	68 17       	cp	r22, r24
      b4:	8a 17       	cp	r24, r26
      b6:	ac 17       	cp	r26, r28
      b8:	fe 17       	cp	r31, r30
      ba:	08 1b       	sub	r16, r24
      bc:	34 18       	sub	r3, r4
      be:	52 18       	sub	r5, r2
      c0:	1b 19       	sub	r17, r11
      c2:	08 1b       	sub	r16, r24
      c4:	c8 19       	sub	r28, r8
      c6:	08 1b       	sub	r16, r24

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	15 e0       	ldi	r17, 0x05	; 5
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e6 e6       	ldi	r30, 0x66	; 102
      dc:	fc e3       	ldi	r31, 0x3C	; 60
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a2 39       	cpi	r26, 0x92	; 146
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	25 e0       	ldi	r18, 0x05	; 5
      ec:	a2 e9       	ldi	r26, 0x92	; 146
      ee:	b5 e0       	ldi	r27, 0x05	; 5
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a7 39       	cpi	r26, 0x97	; 151
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <main>
      fe:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <_exit>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <votingEndSong>:
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	cf 93       	push	r28
     10e:	c0 e0       	ldi	r28, 0x00	; 0
     110:	49 c0       	rjmp	.+146    	; 0x1a4 <votingEndSong+0xa0>
     112:	85 b1       	in	r24, 0x05	; 5
     114:	80 61       	ori	r24, 0x10	; 16
     116:	85 b9       	out	0x05, r24	; 5
     118:	66 e7       	ldi	r22, 0x76	; 118
     11a:	71 e0       	ldi	r23, 0x01	; 1
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     124:	85 b1       	in	r24, 0x05	; 5
     126:	8f 7e       	andi	r24, 0xEF	; 239
     128:	85 b9       	out	0x05, r24	; 5
     12a:	66 e7       	ldi	r22, 0x76	; 118
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     136:	8c ee       	ldi	r24, 0xEC	; 236
     138:	c8 0e       	add	r12, r24
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	d8 1e       	adc	r13, r24
     13e:	e1 1c       	adc	r14, r1
     140:	f1 1c       	adc	r15, r1
     142:	03 c0       	rjmp	.+6      	; 0x14a <votingEndSong+0x46>
     144:	c1 2c       	mov	r12, r1
     146:	d1 2c       	mov	r13, r1
     148:	76 01       	movw	r14, r12
     14a:	80 e9       	ldi	r24, 0x90	; 144
     14c:	c8 16       	cp	r12, r24
     14e:	8f e5       	ldi	r24, 0x5F	; 95
     150:	d8 06       	cpc	r13, r24
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	e8 06       	cpc	r14, r24
     156:	f1 04       	cpc	r15, r1
     158:	e4 f2       	brlt	.-72     	; 0x112 <votingEndSong+0xe>
     15a:	c1 2c       	mov	r12, r1
     15c:	d1 2c       	mov	r13, r1
     15e:	76 01       	movw	r14, r12
     160:	18 c0       	rjmp	.+48     	; 0x192 <votingEndSong+0x8e>
     162:	85 b1       	in	r24, 0x05	; 5
     164:	80 61       	ori	r24, 0x10	; 16
     166:	85 b9       	out	0x05, r24	; 5
     168:	6c e5       	ldi	r22, 0x5C	; 92
     16a:	71 e0       	ldi	r23, 0x01	; 1
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     174:	85 b1       	in	r24, 0x05	; 5
     176:	8f 7e       	andi	r24, 0xEF	; 239
     178:	85 b9       	out	0x05, r24	; 5
     17a:	6c e5       	ldi	r22, 0x5C	; 92
     17c:	71 e0       	ldi	r23, 0x01	; 1
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     186:	88 eb       	ldi	r24, 0xB8	; 184
     188:	c8 0e       	add	r12, r24
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	d8 1e       	adc	r13, r24
     18e:	e1 1c       	adc	r14, r1
     190:	f1 1c       	adc	r15, r1
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	c8 16       	cp	r12, r24
     196:	8f e5       	ldi	r24, 0x5F	; 95
     198:	d8 06       	cpc	r13, r24
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	e8 06       	cpc	r14, r24
     19e:	f1 04       	cpc	r15, r1
     1a0:	04 f3       	brlt	.-64     	; 0x162 <votingEndSong+0x5e>
     1a2:	cf 5f       	subi	r28, 0xFF	; 255
     1a4:	c5 30       	cpi	r28, 0x05	; 5
     1a6:	70 f2       	brcs	.-100    	; 0x144 <votingEndSong+0x40>
     1a8:	c1 2c       	mov	r12, r1
     1aa:	d1 2c       	mov	r13, r1
     1ac:	76 01       	movw	r14, r12
     1ae:	18 c0       	rjmp	.+48     	; 0x1e0 <votingEndSong+0xdc>
     1b0:	85 b1       	in	r24, 0x05	; 5
     1b2:	80 61       	ori	r24, 0x10	; 16
     1b4:	85 b9       	out	0x05, r24	; 5
     1b6:	66 e7       	ldi	r22, 0x76	; 118
     1b8:	71 e0       	ldi	r23, 0x01	; 1
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     1c2:	85 b1       	in	r24, 0x05	; 5
     1c4:	8f 7e       	andi	r24, 0xEF	; 239
     1c6:	85 b9       	out	0x05, r24	; 5
     1c8:	66 e7       	ldi	r22, 0x76	; 118
     1ca:	71 e0       	ldi	r23, 0x01	; 1
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     1d4:	8c ee       	ldi	r24, 0xEC	; 236
     1d6:	c8 0e       	add	r12, r24
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	d8 1e       	adc	r13, r24
     1dc:	e1 1c       	adc	r14, r1
     1de:	f1 1c       	adc	r15, r1
     1e0:	80 ec       	ldi	r24, 0xC0	; 192
     1e2:	c8 16       	cp	r12, r24
     1e4:	84 ed       	ldi	r24, 0xD4	; 212
     1e6:	d8 06       	cpc	r13, r24
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	e8 06       	cpc	r14, r24
     1ec:	f1 04       	cpc	r15, r1
     1ee:	04 f3       	brlt	.-64     	; 0x1b0 <votingEndSong+0xac>
     1f0:	cf 91       	pop	r28
     1f2:	ff 90       	pop	r15
     1f4:	ef 90       	pop	r14
     1f6:	df 90       	pop	r13
     1f8:	cf 90       	pop	r12
     1fa:	08 95       	ret

000001fc <functionSet>:
     1fc:	85 b1       	in	r24, 0x05	; 5
     1fe:	87 7f       	andi	r24, 0xF7	; 247
     200:	85 b9       	out	0x05, r24	; 5
     202:	85 b1       	in	r24, 0x05	; 5
     204:	8b 7f       	andi	r24, 0xFB	; 251
     206:	85 b9       	out	0x05, r24	; 5
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	82 60       	ori	r24, 0x02	; 2
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	85 b1       	in	r24, 0x05	; 5
     210:	8e 7f       	andi	r24, 0xFE	; 254
     212:	85 b9       	out	0x05, r24	; 5
     214:	8b b1       	in	r24, 0x0b	; 11
     216:	8f 7b       	andi	r24, 0xBF	; 191
     218:	8b b9       	out	0x0b, r24	; 11
     21a:	8b b1       	in	r24, 0x0b	; 11
     21c:	80 68       	ori	r24, 0x80	; 128
     21e:	8b b9       	out	0x0b, r24	; 11
     220:	8b b1       	in	r24, 0x0b	; 11
     222:	8f 77       	andi	r24, 0x7F	; 127
     224:	8b b9       	out	0x0b, r24	; 11
     226:	8b b1       	in	r24, 0x0b	; 11
     228:	80 68       	ori	r24, 0x80	; 128
     22a:	8b b9       	out	0x0b, r24	; 11
     22c:	8b b1       	in	r24, 0x0b	; 11
     22e:	8f 77       	andi	r24, 0x7F	; 127
     230:	8b b9       	out	0x0b, r24	; 11
     232:	68 e2       	ldi	r22, 0x28	; 40
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     23e:	8b b1       	in	r24, 0x0b	; 11
     240:	80 68       	ori	r24, 0x80	; 128
     242:	8b b9       	out	0x0b, r24	; 11
     244:	8b b1       	in	r24, 0x0b	; 11
     246:	8f 77       	andi	r24, 0x7F	; 127
     248:	8b b9       	out	0x0b, r24	; 11
     24a:	85 b1       	in	r24, 0x05	; 5
     24c:	88 60       	ori	r24, 0x08	; 8
     24e:	85 b9       	out	0x05, r24	; 5
     250:	8b b1       	in	r24, 0x0b	; 11
     252:	80 68       	ori	r24, 0x80	; 128
     254:	8b b9       	out	0x0b, r24	; 11
     256:	8b b1       	in	r24, 0x0b	; 11
     258:	8f 77       	andi	r24, 0x7F	; 127
     25a:	8b b9       	out	0x0b, r24	; 11
     25c:	68 e2       	ldi	r22, 0x28	; 40
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <delay_us>
     268:	08 95       	ret

0000026a <entryModeSet>:
     26a:	9b b1       	in	r25, 0x0b	; 11
     26c:	9f 7b       	andi	r25, 0xBF	; 191
     26e:	9b b9       	out	0x0b, r25	; 11
     270:	95 b1       	in	r25, 0x05	; 5
     272:	97 7f       	andi	r25, 0xF7	; 247
     274:	95 b9       	out	0x05, r25	; 5
     276:	95 b1       	in	r25, 0x05	; 5
     278:	9b 7f       	andi	r25, 0xFB	; 251
     27a:	95 b9       	out	0x05, r25	; 5
     27c:	95 b1       	in	r25, 0x05	; 5
     27e:	9d 7f       	andi	r25, 0xFD	; 253
     280:	95 b9       	out	0x05, r25	; 5
     282:	95 b1       	in	r25, 0x05	; 5
     284:	9e 7f       	andi	r25, 0xFE	; 254
     286:	95 b9       	out	0x05, r25	; 5
     288:	9b b1       	in	r25, 0x0b	; 11
     28a:	90 68       	ori	r25, 0x80	; 128
     28c:	9b b9       	out	0x0b, r25	; 11
     28e:	9b b1       	in	r25, 0x0b	; 11
     290:	9f 77       	andi	r25, 0x7F	; 127
     292:	9b b9       	out	0x0b, r25	; 11
     294:	95 b1       	in	r25, 0x05	; 5
     296:	94 60       	ori	r25, 0x04	; 4
     298:	95 b9       	out	0x05, r25	; 5
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	21 f4       	brne	.+8      	; 0x2a6 <entryModeSet+0x3c>
     29e:	85 b1       	in	r24, 0x05	; 5
     2a0:	82 60       	ori	r24, 0x02	; 2
     2a2:	85 b9       	out	0x05, r24	; 5
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <entryModeSet+0x42>
     2a6:	85 b1       	in	r24, 0x05	; 5
     2a8:	8d 7f       	andi	r24, 0xFD	; 253
     2aa:	85 b9       	out	0x05, r24	; 5
     2ac:	61 30       	cpi	r22, 0x01	; 1
     2ae:	21 f4       	brne	.+8      	; 0x2b8 <entryModeSet+0x4e>
     2b0:	85 b1       	in	r24, 0x05	; 5
     2b2:	81 60       	ori	r24, 0x01	; 1
     2b4:	85 b9       	out	0x05, r24	; 5
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <entryModeSet+0x54>
     2b8:	85 b1       	in	r24, 0x05	; 5
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	85 b9       	out	0x05, r24	; 5
     2be:	8b b1       	in	r24, 0x0b	; 11
     2c0:	80 68       	ori	r24, 0x80	; 128
     2c2:	8b b9       	out	0x0b, r24	; 11
     2c4:	8b b1       	in	r24, 0x0b	; 11
     2c6:	8f 77       	andi	r24, 0x7F	; 127
     2c8:	8b b9       	out	0x0b, r24	; 11
     2ca:	68 e2       	ldi	r22, 0x28	; 40
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <delay_us>
     2d6:	08 95       	ret

000002d8 <displayOnOffControl>:
     2d8:	95 b1       	in	r25, 0x05	; 5
     2da:	97 7f       	andi	r25, 0xF7	; 247
     2dc:	95 b9       	out	0x05, r25	; 5
     2de:	95 b1       	in	r25, 0x05	; 5
     2e0:	9b 7f       	andi	r25, 0xFB	; 251
     2e2:	95 b9       	out	0x05, r25	; 5
     2e4:	95 b1       	in	r25, 0x05	; 5
     2e6:	9d 7f       	andi	r25, 0xFD	; 253
     2e8:	95 b9       	out	0x05, r25	; 5
     2ea:	95 b1       	in	r25, 0x05	; 5
     2ec:	9e 7f       	andi	r25, 0xFE	; 254
     2ee:	95 b9       	out	0x05, r25	; 5
     2f0:	9b b1       	in	r25, 0x0b	; 11
     2f2:	90 68       	ori	r25, 0x80	; 128
     2f4:	9b b9       	out	0x0b, r25	; 11
     2f6:	9b b1       	in	r25, 0x0b	; 11
     2f8:	9f 77       	andi	r25, 0x7F	; 127
     2fa:	9b b9       	out	0x0b, r25	; 11
     2fc:	95 b1       	in	r25, 0x05	; 5
     2fe:	98 60       	ori	r25, 0x08	; 8
     300:	95 b9       	out	0x05, r25	; 5
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	21 f4       	brne	.+8      	; 0x30e <displayOnOffControl+0x36>
     306:	85 b1       	in	r24, 0x05	; 5
     308:	84 60       	ori	r24, 0x04	; 4
     30a:	85 b9       	out	0x05, r24	; 5
     30c:	03 c0       	rjmp	.+6      	; 0x314 <displayOnOffControl+0x3c>
     30e:	85 b1       	in	r24, 0x05	; 5
     310:	8b 7f       	andi	r24, 0xFB	; 251
     312:	85 b9       	out	0x05, r24	; 5
     314:	61 30       	cpi	r22, 0x01	; 1
     316:	21 f4       	brne	.+8      	; 0x320 <displayOnOffControl+0x48>
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	03 c0       	rjmp	.+6      	; 0x326 <displayOnOffControl+0x4e>
     320:	85 b1       	in	r24, 0x05	; 5
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	85 b9       	out	0x05, r24	; 5
     326:	41 30       	cpi	r20, 0x01	; 1
     328:	21 f4       	brne	.+8      	; 0x332 <displayOnOffControl+0x5a>
     32a:	85 b1       	in	r24, 0x05	; 5
     32c:	81 60       	ori	r24, 0x01	; 1
     32e:	85 b9       	out	0x05, r24	; 5
     330:	03 c0       	rjmp	.+6      	; 0x338 <displayOnOffControl+0x60>
     332:	85 b1       	in	r24, 0x05	; 5
     334:	8e 7f       	andi	r24, 0xFE	; 254
     336:	85 b9       	out	0x05, r24	; 5
     338:	8b b1       	in	r24, 0x0b	; 11
     33a:	80 68       	ori	r24, 0x80	; 128
     33c:	8b b9       	out	0x0b, r24	; 11
     33e:	8b b1       	in	r24, 0x0b	; 11
     340:	8f 77       	andi	r24, 0x7F	; 127
     342:	8b b9       	out	0x0b, r24	; 11
     344:	68 e2       	ldi	r22, 0x28	; 40
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <delay_us>
     350:	08 95       	ret

00000352 <getBit>:
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <getBit+0x8>
     356:	95 95       	asr	r25
     358:	87 95       	ror	r24
     35a:	6a 95       	dec	r22
     35c:	e2 f7       	brpl	.-8      	; 0x356 <getBit+0x4>
     35e:	81 70       	andi	r24, 0x01	; 1
     360:	08 95       	ret

00000362 <sendChar>:
     362:	cf 93       	push	r28
     364:	c8 2f       	mov	r28, r24
     366:	67 e0       	ldi	r22, 0x07	; 7
     368:	f4 df       	rcall	.-24     	; 0x352 <getBit>
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	21 f4       	brne	.+8      	; 0x376 <sendChar+0x14>
     36e:	85 b1       	in	r24, 0x05	; 5
     370:	88 60       	ori	r24, 0x08	; 8
     372:	85 b9       	out	0x05, r24	; 5
     374:	03 c0       	rjmp	.+6      	; 0x37c <sendChar+0x1a>
     376:	85 b1       	in	r24, 0x05	; 5
     378:	87 7f       	andi	r24, 0xF7	; 247
     37a:	85 b9       	out	0x05, r24	; 5
     37c:	66 e0       	ldi	r22, 0x06	; 6
     37e:	8c 2f       	mov	r24, r28
     380:	e8 df       	rcall	.-48     	; 0x352 <getBit>
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	21 f4       	brne	.+8      	; 0x38e <sendChar+0x2c>
     386:	85 b1       	in	r24, 0x05	; 5
     388:	84 60       	ori	r24, 0x04	; 4
     38a:	85 b9       	out	0x05, r24	; 5
     38c:	03 c0       	rjmp	.+6      	; 0x394 <sendChar+0x32>
     38e:	85 b1       	in	r24, 0x05	; 5
     390:	8b 7f       	andi	r24, 0xFB	; 251
     392:	85 b9       	out	0x05, r24	; 5
     394:	65 e0       	ldi	r22, 0x05	; 5
     396:	8c 2f       	mov	r24, r28
     398:	dc df       	rcall	.-72     	; 0x352 <getBit>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	21 f4       	brne	.+8      	; 0x3a6 <sendChar+0x44>
     39e:	85 b1       	in	r24, 0x05	; 5
     3a0:	82 60       	ori	r24, 0x02	; 2
     3a2:	85 b9       	out	0x05, r24	; 5
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <sendChar+0x4a>
     3a6:	85 b1       	in	r24, 0x05	; 5
     3a8:	8d 7f       	andi	r24, 0xFD	; 253
     3aa:	85 b9       	out	0x05, r24	; 5
     3ac:	64 e0       	ldi	r22, 0x04	; 4
     3ae:	8c 2f       	mov	r24, r28
     3b0:	d0 df       	rcall	.-96     	; 0x352 <getBit>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	21 f4       	brne	.+8      	; 0x3be <sendChar+0x5c>
     3b6:	85 b1       	in	r24, 0x05	; 5
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	85 b9       	out	0x05, r24	; 5
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <sendChar+0x62>
     3be:	85 b1       	in	r24, 0x05	; 5
     3c0:	8e 7f       	andi	r24, 0xFE	; 254
     3c2:	85 b9       	out	0x05, r24	; 5
     3c4:	8b b1       	in	r24, 0x0b	; 11
     3c6:	80 64       	ori	r24, 0x40	; 64
     3c8:	8b b9       	out	0x0b, r24	; 11
     3ca:	8b b1       	in	r24, 0x0b	; 11
     3cc:	80 68       	ori	r24, 0x80	; 128
     3ce:	8b b9       	out	0x0b, r24	; 11
     3d0:	8b b1       	in	r24, 0x0b	; 11
     3d2:	8f 77       	andi	r24, 0x7F	; 127
     3d4:	8b b9       	out	0x0b, r24	; 11
     3d6:	63 e0       	ldi	r22, 0x03	; 3
     3d8:	8c 2f       	mov	r24, r28
     3da:	bb df       	rcall	.-138    	; 0x352 <getBit>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	21 f4       	brne	.+8      	; 0x3e8 <sendChar+0x86>
     3e0:	85 b1       	in	r24, 0x05	; 5
     3e2:	88 60       	ori	r24, 0x08	; 8
     3e4:	85 b9       	out	0x05, r24	; 5
     3e6:	03 c0       	rjmp	.+6      	; 0x3ee <sendChar+0x8c>
     3e8:	85 b1       	in	r24, 0x05	; 5
     3ea:	87 7f       	andi	r24, 0xF7	; 247
     3ec:	85 b9       	out	0x05, r24	; 5
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	8c 2f       	mov	r24, r28
     3f2:	af df       	rcall	.-162    	; 0x352 <getBit>
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3f8:	85 b1       	in	r24, 0x05	; 5
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	85 b9       	out	0x05, r24	; 5
     3fe:	03 c0       	rjmp	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     400:	85 b1       	in	r24, 0x05	; 5
     402:	8b 7f       	andi	r24, 0xFB	; 251
     404:	85 b9       	out	0x05, r24	; 5
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	8c 2f       	mov	r24, r28
     40a:	a3 df       	rcall	.-186    	; 0x352 <getBit>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	21 f4       	brne	.+8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     410:	85 b1       	in	r24, 0x05	; 5
     412:	82 60       	ori	r24, 0x02	; 2
     414:	85 b9       	out	0x05, r24	; 5
     416:	03 c0       	rjmp	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     418:	85 b1       	in	r24, 0x05	; 5
     41a:	8d 7f       	andi	r24, 0xFD	; 253
     41c:	85 b9       	out	0x05, r24	; 5
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	8c 2f       	mov	r24, r28
     422:	97 df       	rcall	.-210    	; 0x352 <getBit>
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	21 f4       	brne	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     428:	85 b1       	in	r24, 0x05	; 5
     42a:	81 60       	ori	r24, 0x01	; 1
     42c:	85 b9       	out	0x05, r24	; 5
     42e:	03 c0       	rjmp	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     430:	85 b1       	in	r24, 0x05	; 5
     432:	8e 7f       	andi	r24, 0xFE	; 254
     434:	85 b9       	out	0x05, r24	; 5
     436:	8b b1       	in	r24, 0x0b	; 11
     438:	80 68       	ori	r24, 0x80	; 128
     43a:	8b b9       	out	0x0b, r24	; 11
     43c:	8b b1       	in	r24, 0x0b	; 11
     43e:	8f 77       	andi	r24, 0x7F	; 127
     440:	8b b9       	out	0x0b, r24	; 11
     442:	68 e2       	ldi	r22, 0x28	; 40
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <setDdRamAddress>:
     452:	cf 93       	push	r28
     454:	c8 2f       	mov	r28, r24
     456:	8b b1       	in	r24, 0x0b	; 11
     458:	8f 7b       	andi	r24, 0xBF	; 191
     45a:	8b b9       	out	0x0b, r24	; 11
     45c:	85 b1       	in	r24, 0x05	; 5
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	85 b9       	out	0x05, r24	; 5
     462:	66 e0       	ldi	r22, 0x06	; 6
     464:	8c 2f       	mov	r24, r28
     466:	75 df       	rcall	.-278    	; 0x352 <getBit>
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	21 f4       	brne	.+8      	; 0x474 <setDdRamAddress+0x22>
     46c:	85 b1       	in	r24, 0x05	; 5
     46e:	84 60       	ori	r24, 0x04	; 4
     470:	85 b9       	out	0x05, r24	; 5
     472:	03 c0       	rjmp	.+6      	; 0x47a <setDdRamAddress+0x28>
     474:	85 b1       	in	r24, 0x05	; 5
     476:	8b 7f       	andi	r24, 0xFB	; 251
     478:	85 b9       	out	0x05, r24	; 5
     47a:	65 e0       	ldi	r22, 0x05	; 5
     47c:	8c 2f       	mov	r24, r28
     47e:	69 df       	rcall	.-302    	; 0x352 <getBit>
     480:	81 30       	cpi	r24, 0x01	; 1
     482:	21 f4       	brne	.+8      	; 0x48c <setDdRamAddress+0x3a>
     484:	85 b1       	in	r24, 0x05	; 5
     486:	82 60       	ori	r24, 0x02	; 2
     488:	85 b9       	out	0x05, r24	; 5
     48a:	03 c0       	rjmp	.+6      	; 0x492 <setDdRamAddress+0x40>
     48c:	85 b1       	in	r24, 0x05	; 5
     48e:	8d 7f       	andi	r24, 0xFD	; 253
     490:	85 b9       	out	0x05, r24	; 5
     492:	64 e0       	ldi	r22, 0x04	; 4
     494:	8c 2f       	mov	r24, r28
     496:	5d df       	rcall	.-326    	; 0x352 <getBit>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	21 f4       	brne	.+8      	; 0x4a4 <setDdRamAddress+0x52>
     49c:	85 b1       	in	r24, 0x05	; 5
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	85 b9       	out	0x05, r24	; 5
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <setDdRamAddress+0x58>
     4a4:	85 b1       	in	r24, 0x05	; 5
     4a6:	8e 7f       	andi	r24, 0xFE	; 254
     4a8:	85 b9       	out	0x05, r24	; 5
     4aa:	8b b1       	in	r24, 0x0b	; 11
     4ac:	80 68       	ori	r24, 0x80	; 128
     4ae:	8b b9       	out	0x0b, r24	; 11
     4b0:	8b b1       	in	r24, 0x0b	; 11
     4b2:	8f 77       	andi	r24, 0x7F	; 127
     4b4:	8b b9       	out	0x0b, r24	; 11
     4b6:	63 e0       	ldi	r22, 0x03	; 3
     4b8:	8c 2f       	mov	r24, r28
     4ba:	4b df       	rcall	.-362    	; 0x352 <getBit>
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	21 f4       	brne	.+8      	; 0x4c8 <setDdRamAddress+0x76>
     4c0:	85 b1       	in	r24, 0x05	; 5
     4c2:	88 60       	ori	r24, 0x08	; 8
     4c4:	85 b9       	out	0x05, r24	; 5
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <setDdRamAddress+0x7c>
     4c8:	85 b1       	in	r24, 0x05	; 5
     4ca:	87 7f       	andi	r24, 0xF7	; 247
     4cc:	85 b9       	out	0x05, r24	; 5
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	8c 2f       	mov	r24, r28
     4d2:	3f df       	rcall	.-386    	; 0x352 <getBit>
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	21 f4       	brne	.+8      	; 0x4e0 <setDdRamAddress+0x8e>
     4d8:	85 b1       	in	r24, 0x05	; 5
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	85 b9       	out	0x05, r24	; 5
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <setDdRamAddress+0x94>
     4e0:	85 b1       	in	r24, 0x05	; 5
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
     4e4:	85 b9       	out	0x05, r24	; 5
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	8c 2f       	mov	r24, r28
     4ea:	33 df       	rcall	.-410    	; 0x352 <getBit>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <setDdRamAddress+0xa6>
     4f0:	85 b1       	in	r24, 0x05	; 5
     4f2:	82 60       	ori	r24, 0x02	; 2
     4f4:	85 b9       	out	0x05, r24	; 5
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <setDdRamAddress+0xac>
     4f8:	85 b1       	in	r24, 0x05	; 5
     4fa:	8d 7f       	andi	r24, 0xFD	; 253
     4fc:	85 b9       	out	0x05, r24	; 5
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	8c 2f       	mov	r24, r28
     502:	27 df       	rcall	.-434    	; 0x352 <getBit>
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	21 f4       	brne	.+8      	; 0x510 <setDdRamAddress+0xbe>
     508:	85 b1       	in	r24, 0x05	; 5
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	85 b9       	out	0x05, r24	; 5
     50e:	03 c0       	rjmp	.+6      	; 0x516 <setDdRamAddress+0xc4>
     510:	85 b1       	in	r24, 0x05	; 5
     512:	8e 7f       	andi	r24, 0xFE	; 254
     514:	85 b9       	out	0x05, r24	; 5
     516:	8b b1       	in	r24, 0x0b	; 11
     518:	80 68       	ori	r24, 0x80	; 128
     51a:	8b b9       	out	0x0b, r24	; 11
     51c:	8b b1       	in	r24, 0x0b	; 11
     51e:	8f 77       	andi	r24, 0x7F	; 127
     520:	8b b9       	out	0x0b, r24	; 11
     522:	68 e2       	ldi	r22, 0x28	; 40
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <setCgRamAddress>:
     532:	cf 93       	push	r28
     534:	c8 2f       	mov	r28, r24
     536:	8b b1       	in	r24, 0x0b	; 11
     538:	8f 7b       	andi	r24, 0xBF	; 191
     53a:	8b b9       	out	0x0b, r24	; 11
     53c:	85 b1       	in	r24, 0x05	; 5
     53e:	87 7f       	andi	r24, 0xF7	; 247
     540:	85 b9       	out	0x05, r24	; 5
     542:	85 b1       	in	r24, 0x05	; 5
     544:	84 60       	ori	r24, 0x04	; 4
     546:	85 b9       	out	0x05, r24	; 5
     548:	65 e0       	ldi	r22, 0x05	; 5
     54a:	8c 2f       	mov	r24, r28
     54c:	02 df       	rcall	.-508    	; 0x352 <getBit>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	21 f4       	brne	.+8      	; 0x55a <setCgRamAddress+0x28>
     552:	85 b1       	in	r24, 0x05	; 5
     554:	82 60       	ori	r24, 0x02	; 2
     556:	85 b9       	out	0x05, r24	; 5
     558:	03 c0       	rjmp	.+6      	; 0x560 <setCgRamAddress+0x2e>
     55a:	85 b1       	in	r24, 0x05	; 5
     55c:	8d 7f       	andi	r24, 0xFD	; 253
     55e:	85 b9       	out	0x05, r24	; 5
     560:	64 e0       	ldi	r22, 0x04	; 4
     562:	8c 2f       	mov	r24, r28
     564:	f6 de       	rcall	.-532    	; 0x352 <getBit>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	21 f4       	brne	.+8      	; 0x572 <setCgRamAddress+0x40>
     56a:	85 b1       	in	r24, 0x05	; 5
     56c:	81 60       	ori	r24, 0x01	; 1
     56e:	85 b9       	out	0x05, r24	; 5
     570:	03 c0       	rjmp	.+6      	; 0x578 <setCgRamAddress+0x46>
     572:	85 b1       	in	r24, 0x05	; 5
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	85 b9       	out	0x05, r24	; 5
     578:	8b b1       	in	r24, 0x0b	; 11
     57a:	80 68       	ori	r24, 0x80	; 128
     57c:	8b b9       	out	0x0b, r24	; 11
     57e:	8b b1       	in	r24, 0x0b	; 11
     580:	8f 77       	andi	r24, 0x7F	; 127
     582:	8b b9       	out	0x0b, r24	; 11
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	8c 2f       	mov	r24, r28
     588:	e4 de       	rcall	.-568    	; 0x352 <getBit>
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	21 f4       	brne	.+8      	; 0x596 <setCgRamAddress+0x64>
     58e:	85 b1       	in	r24, 0x05	; 5
     590:	88 60       	ori	r24, 0x08	; 8
     592:	85 b9       	out	0x05, r24	; 5
     594:	03 c0       	rjmp	.+6      	; 0x59c <setCgRamAddress+0x6a>
     596:	85 b1       	in	r24, 0x05	; 5
     598:	87 7f       	andi	r24, 0xF7	; 247
     59a:	85 b9       	out	0x05, r24	; 5
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	8c 2f       	mov	r24, r28
     5a0:	d8 de       	rcall	.-592    	; 0x352 <getBit>
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	21 f4       	brne	.+8      	; 0x5ae <setCgRamAddress+0x7c>
     5a6:	85 b1       	in	r24, 0x05	; 5
     5a8:	84 60       	ori	r24, 0x04	; 4
     5aa:	85 b9       	out	0x05, r24	; 5
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <setCgRamAddress+0x82>
     5ae:	85 b1       	in	r24, 0x05	; 5
     5b0:	8b 7f       	andi	r24, 0xFB	; 251
     5b2:	85 b9       	out	0x05, r24	; 5
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	8c 2f       	mov	r24, r28
     5b8:	cc de       	rcall	.-616    	; 0x352 <getBit>
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <setCgRamAddress+0x94>
     5be:	85 b1       	in	r24, 0x05	; 5
     5c0:	82 60       	ori	r24, 0x02	; 2
     5c2:	85 b9       	out	0x05, r24	; 5
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <setCgRamAddress+0x9a>
     5c6:	85 b1       	in	r24, 0x05	; 5
     5c8:	8d 7f       	andi	r24, 0xFD	; 253
     5ca:	85 b9       	out	0x05, r24	; 5
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	8c 2f       	mov	r24, r28
     5d0:	c0 de       	rcall	.-640    	; 0x352 <getBit>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	21 f4       	brne	.+8      	; 0x5de <setCgRamAddress+0xac>
     5d6:	85 b1       	in	r24, 0x05	; 5
     5d8:	81 60       	ori	r24, 0x01	; 1
     5da:	85 b9       	out	0x05, r24	; 5
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <setCgRamAddress+0xb2>
     5de:	85 b1       	in	r24, 0x05	; 5
     5e0:	8e 7f       	andi	r24, 0xFE	; 254
     5e2:	85 b9       	out	0x05, r24	; 5
     5e4:	8b b1       	in	r24, 0x0b	; 11
     5e6:	80 68       	ori	r24, 0x80	; 128
     5e8:	8b b9       	out	0x0b, r24	; 11
     5ea:	8b b1       	in	r24, 0x0b	; 11
     5ec:	8f 77       	andi	r24, 0x7F	; 127
     5ee:	8b b9       	out	0x0b, r24	; 11
     5f0:	68 e2       	ldi	r22, 0x28	; 40
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <delay_us>
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <sendString_setAdress>:
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	8c 01       	movw	r16, r24
     60a:	62 30       	cpi	r22, 0x02	; 2
     60c:	11 f0       	breq	.+4      	; 0x612 <sendString_setAdress+0x12>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	01 c0       	rjmp	.+2      	; 0x614 <sendString_setAdress+0x14>
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	48 0f       	add	r20, r24
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	84 0f       	add	r24, r20
     61a:	80 31       	cpi	r24, 0x10	; 16
     61c:	18 f0       	brcs	.+6      	; 0x624 <sendString_setAdress+0x24>
     61e:	41 54       	subi	r20, 0x41	; 65
     620:	40 31       	cpi	r20, 0x10	; 16
     622:	08 f4       	brcc	.+2      	; 0x626 <sendString_setAdress+0x26>
     624:	16 df       	rcall	.-468    	; 0x452 <setDdRamAddress>
     626:	c0 e0       	ldi	r28, 0x00	; 0
     628:	d0 e0       	ldi	r29, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <sendString_setAdress+0x30>
     62c:	9a de       	rcall	.-716    	; 0x362 <sendChar>
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	f8 01       	movw	r30, r16
     632:	ec 0f       	add	r30, r28
     634:	fd 1f       	adc	r31, r29
     636:	80 81       	ld	r24, Z
     638:	81 11       	cpse	r24, r1
     63a:	f8 cf       	rjmp	.-16     	; 0x62c <sendString_setAdress+0x2c>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <sendString>:
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8c 01       	movw	r16, r24
     650:	c0 e0       	ldi	r28, 0x00	; 0
     652:	d0 e0       	ldi	r29, 0x00	; 0
     654:	02 c0       	rjmp	.+4      	; 0x65a <sendString+0x14>
     656:	85 de       	rcall	.-758    	; 0x362 <sendChar>
     658:	21 96       	adiw	r28, 0x01	; 1
     65a:	f8 01       	movw	r30, r16
     65c:	ec 0f       	add	r30, r28
     65e:	fd 1f       	adc	r31, r29
     660:	80 81       	ld	r24, Z
     662:	81 11       	cpse	r24, r1
     664:	f8 cf       	rjmp	.-16     	; 0x656 <sendString+0x10>
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <storage_special_characters>:
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	68 97       	sbiw	r28, 0x18	; 24
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	e0 e0       	ldi	r30, 0x00	; 0
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	de 01       	movw	r26, r28
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	01 90       	ld	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	8a 95       	dec	r24
     698:	e1 f7       	brne	.-8      	; 0x692 <storage_special_characters+0x22>
     69a:	88 e0       	ldi	r24, 0x08	; 8
     69c:	e8 e0       	ldi	r30, 0x08	; 8
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	de 01       	movw	r26, r28
     6a2:	19 96       	adiw	r26, 0x09	; 9
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <storage_special_characters+0x34>
     6ac:	88 e0       	ldi	r24, 0x08	; 8
     6ae:	e0 e1       	ldi	r30, 0x10	; 16
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	de 01       	movw	r26, r28
     6b4:	51 96       	adiw	r26, 0x11	; 17
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <storage_special_characters+0x46>
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	38 df       	rcall	.-400    	; 0x532 <setCgRamAddress>
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	0a c0       	rjmp	.+20     	; 0x6dc <storage_special_characters+0x6c>
     6c8:	e1 e0       	ldi	r30, 0x01	; 1
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	e0 0f       	add	r30, r16
     6d2:	f1 1f       	adc	r31, r17
     6d4:	80 81       	ld	r24, Z
     6d6:	45 de       	rcall	.-886    	; 0x362 <sendChar>
     6d8:	0f 5f       	subi	r16, 0xFF	; 255
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	08 30       	cpi	r16, 0x08	; 8
     6de:	11 05       	cpc	r17, r1
     6e0:	9c f3       	brlt	.-26     	; 0x6c8 <storage_special_characters+0x58>
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	0a c0       	rjmp	.+20     	; 0x6fc <storage_special_characters+0x8c>
     6e8:	e9 e0       	ldi	r30, 0x09	; 9
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	ec 0f       	add	r30, r28
     6ee:	fd 1f       	adc	r31, r29
     6f0:	e0 0f       	add	r30, r16
     6f2:	f1 1f       	adc	r31, r17
     6f4:	80 81       	ld	r24, Z
     6f6:	35 de       	rcall	.-918    	; 0x362 <sendChar>
     6f8:	0f 5f       	subi	r16, 0xFF	; 255
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	08 30       	cpi	r16, 0x08	; 8
     6fe:	11 05       	cpc	r17, r1
     700:	9c f3       	brlt	.-26     	; 0x6e8 <storage_special_characters+0x78>
     702:	00 e0       	ldi	r16, 0x00	; 0
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	0a c0       	rjmp	.+20     	; 0x71c <storage_special_characters+0xac>
     708:	e1 e1       	ldi	r30, 0x11	; 17
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ec 0f       	add	r30, r28
     70e:	fd 1f       	adc	r31, r29
     710:	e0 0f       	add	r30, r16
     712:	f1 1f       	adc	r31, r17
     714:	80 81       	ld	r24, Z
     716:	25 de       	rcall	.-950    	; 0x362 <sendChar>
     718:	0f 5f       	subi	r16, 0xFF	; 255
     71a:	1f 4f       	sbci	r17, 0xFF	; 255
     71c:	08 30       	cpi	r16, 0x08	; 8
     71e:	11 05       	cpc	r17, r1
     720:	9c f3       	brlt	.-26     	; 0x708 <storage_special_characters+0x98>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	96 de       	rcall	.-724    	; 0x452 <setDdRamAddress>
     726:	68 96       	adiw	r28, 0x18	; 24
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret

0000073c <getCharacter_AB>:
	}
}

// Retorna apenas caracteres A ou B
char getCharacter_AB(){
	char tecla = 0;
     73c:	80 e0       	ldi	r24, 0x00	; 0
	while(tecla != 'A' && tecla != 'B'){
     73e:	06 c0       	rjmp	.+12     	; 0x74c <getCharacter_AB+0x10>
		tecla = get_tecla();
     740:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
		if(tecla == 'A' || tecla == 'B'){
     744:	9f eb       	ldi	r25, 0xBF	; 191
     746:	98 0f       	add	r25, r24
     748:	92 30       	cpi	r25, 0x02	; 2
     74a:	20 f0       	brcs	.+8      	; 0x754 <getCharacter_AB+0x18>
}

// Retorna apenas caracteres A ou B
char getCharacter_AB(){
	char tecla = 0;
	while(tecla != 'A' && tecla != 'B'){
     74c:	81 54       	subi	r24, 0x41	; 65
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	b8 f7       	brcc	.-18     	; 0x740 <getCharacter_AB+0x4>
		tecla = get_tecla();
		if(tecla == 'A' || tecla == 'B'){
			return tecla;
		}
	}
	return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
}
     754:	08 95       	ret

00000756 <getCharacter_B>:

// Retorna apenas caractere B
char getCharacter_B(){
	char tecla = 0;
	do{
		tecla = get_tecla();
     756:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
	} while(tecla != 'B');
     75a:	82 34       	cpi	r24, 0x42	; 66
     75c:	e1 f7       	brne	.-8      	; 0x756 <getCharacter_B>
	return 'B';
}
     75e:	08 95       	ret

00000760 <valida_eleitor>:

// Valida eleitor
char valida_eleitor(char* eleitor, char* nome_eleitor){
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	ac 97       	sbiw	r28, 0x2c	; 44
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	ac 01       	movw	r20, r24
     77a:	8b 01       	movw	r16, r22
	char message[8] = {'U', 'N', 5};
     77c:	fe 01       	movw	r30, r28
     77e:	31 96       	adiw	r30, 0x01	; 1
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	df 01       	movw	r26, r30
     784:	1d 92       	st	X+, r1
     786:	8a 95       	dec	r24
     788:	e9 f7       	brne	.-6      	; 0x784 <valida_eleitor+0x24>
     78a:	85 e5       	ldi	r24, 0x55	; 85
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	8e e4       	ldi	r24, 0x4E	; 78
     790:	8a 83       	std	Y+2, r24	; 0x02
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	8b 83       	std	Y+3, r24	; 0x03
	char codigo_invalido[] = "Codigo invalido";
     796:	80 e1       	ldi	r24, 0x10	; 16
     798:	e4 e2       	ldi	r30, 0x24	; 36
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	de 01       	movw	r26, r28
     79e:	19 96       	adiw	r26, 0x09	; 9
     7a0:	01 90       	ld	r0, Z+
     7a2:	0d 92       	st	X+, r0
     7a4:	8a 95       	dec	r24
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <valida_eleitor+0x40>
	char response[20] = {0};
     7a8:	fe 01       	movw	r30, r28
     7aa:	79 96       	adiw	r30, 0x19	; 25
     7ac:	84 e1       	ldi	r24, 0x14	; 20
     7ae:	df 01       	movw	r26, r30
     7b0:	1d 92       	st	X+, r1
     7b2:	8a 95       	dec	r24
     7b4:	e9 f7       	brne	.-6      	; 0x7b0 <valida_eleitor+0x50>
	
	// Constrói a mensagem a ser enviada serialmente
	unsigned char i;
	for(i = 0; i < 5; i++){
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	10 c0       	rjmp	.+32     	; 0x7da <valida_eleitor+0x7a>
		message[i + 3] = eleitor[i];
     7ba:	29 2f       	mov	r18, r25
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	f9 01       	movw	r30, r18
     7c0:	33 96       	adiw	r30, 0x03	; 3
     7c2:	da 01       	movw	r26, r20
     7c4:	a2 0f       	add	r26, r18
     7c6:	b3 1f       	adc	r27, r19
     7c8:	2c 91       	ld	r18, X
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	6c 0f       	add	r22, r28
     7d0:	7d 1f       	adc	r23, r29
     7d2:	e6 0f       	add	r30, r22
     7d4:	f7 1f       	adc	r31, r23
     7d6:	20 83       	st	Z, r18
	char codigo_invalido[] = "Codigo invalido";
	char response[20] = {0};
	
	// Constrói a mensagem a ser enviada serialmente
	unsigned char i;
	for(i = 0; i < 5; i++){
     7d8:	9f 5f       	subi	r25, 0xFF	; 255
     7da:	95 30       	cpi	r25, 0x05	; 5
     7dc:	70 f3       	brcs	.-36     	; 0x7ba <valida_eleitor+0x5a>
		message[i + 3] = eleitor[i];
	}
	
	// Envia mensagem e obtém resposta
	sendSerialMessage(message);
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
	getSerialMessage(response);
     7e6:	ce 01       	movw	r24, r28
     7e8:	49 96       	adiw	r24, 0x19	; 25
     7ea:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
	
	// Se não estiver no padrão, ocorreu um erro
	if(response[0] != 'M' || response[1] != 'N'){
     7ee:	89 8d       	ldd	r24, Y+25	; 0x19
     7f0:	8d 34       	cpi	r24, 0x4D	; 77
     7f2:	31 f5       	brne	.+76     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     7f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7f6:	8e 34       	cpi	r24, 0x4E	; 78
     7f8:	29 f5       	brne	.+74     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	19 c0       	rjmp	.+50     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	
	// Se a resposta conter "Codigo invalido\0", o eleitor não é válido
	char eleitor_invalido = 1;
	// Obtem nome do eleitor
	for(i = 0; i < response[2]; i++){
		nome_eleitor[i] = response[3 + i];
     800:	82 2f       	mov	r24, r18
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	d8 01       	movw	r26, r16
     806:	a8 0f       	add	r26, r24
     808:	b9 1f       	adc	r27, r25
     80a:	fc 01       	movw	r30, r24
     80c:	33 96       	adiw	r30, 0x03	; 3
     80e:	69 e1       	ldi	r22, 0x19	; 25
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	6c 0f       	add	r22, r28
     814:	7d 1f       	adc	r23, r29
     816:	e6 0f       	add	r30, r22
     818:	f7 1f       	adc	r31, r23
     81a:	30 81       	ld	r19, Z
     81c:	3c 93       	st	X, r19
		if(nome_eleitor[i] != codigo_invalido[i]){
     81e:	e9 e0       	ldi	r30, 0x09	; 9
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ec 0f       	add	r30, r28
     824:	fd 1f       	adc	r31, r29
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	80 81       	ld	r24, Z
     82c:	38 13       	cpse	r19, r24
			eleitor_invalido = 0;
     82e:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	// Se a resposta conter "Codigo invalido\0", o eleitor não é válido
	char eleitor_invalido = 1;
	// Obtem nome do eleitor
	for(i = 0; i < response[2]; i++){
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	8b 8d       	ldd	r24, Y+27	; 0x1b
     834:	28 17       	cp	r18, r24
     836:	20 f3       	brcs	.-56     	; 0x800 <__DATA_REGION_LENGTH__>
		if(nome_eleitor[i] != codigo_invalido[i]){
			eleitor_invalido = 0;
		}
	}
	
	if(eleitor_invalido){
     838:	44 23       	and	r20, r20
     83a:	31 f0       	breq	.+12     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		return ELEITOR_INVALIDO;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	sendSerialMessage(message);
	getSerialMessage(response);
	
	// Se não estiver no padrão, ocorreu um erro
	if(response[0] != 'M' || response[1] != 'N'){
		return ERRO_COMUNICACAO;
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	01 c0       	rjmp	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	}
	
	if(eleitor_invalido){
		return ELEITOR_INVALIDO;
	}
	return ELEITOR_VALIDO;
     848:	81 e0       	ldi	r24, 0x01	; 1
}
     84a:	ac 96       	adiw	r28, 0x2c	; 44
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <buscaCandidato>:
	registraVoto(senador, senador_numero, senador_nome);
	registraVoto(presidente, presidente_numero, presidente_nome);
	return VOTACAO_CONCLUIDA;
}

char buscaCandidato(CANDIDATO candidato, char* numero){
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ea 01       	movw	r28, r20
	unsigned char posicao_candidato;
	for(posicao_candidato = 0; posicao_candidato < candidato.num_candidatos_votados; posicao_candidato++){
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	24 c0       	rjmp	.+72     	; 0x8b2 <buscaCandidato+0x52>
		// Compara os dois primeiros caracteres do candidato atual
		if(candidato.dados_candidato[posicao_candidato].numero[0] == numero[0] && candidato.dados_candidato[posicao_candidato].numero[1] == numero[1]){
     86a:	e6 2f       	mov	r30, r22
     86c:	f7 2f       	mov	r31, r23
     86e:	29 2f       	mov	r18, r25
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	d9 01       	movw	r26, r18
     874:	aa 0f       	add	r26, r26
     876:	bb 1f       	adc	r27, r27
     878:	2a 0f       	add	r18, r26
     87a:	3b 1f       	adc	r19, r27
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	e2 0f       	add	r30, r18
     88a:	f3 1f       	adc	r31, r19
     88c:	30 81       	ld	r19, Z
     88e:	28 81       	ld	r18, Y
     890:	32 13       	cpse	r19, r18
     892:	0e c0       	rjmp	.+28     	; 0x8b0 <buscaCandidato+0x50>
     894:	31 81       	ldd	r19, Z+1	; 0x01
     896:	29 81       	ldd	r18, Y+1	; 0x01
     898:	32 13       	cpse	r19, r18
     89a:	0a c0       	rjmp	.+20     	; 0x8b0 <buscaCandidato+0x50>
			// Verifica se o candidato é um deputado federal, se não, o candidato já existe e retorna sua posição
			if(candidato.dados_candidato[posicao_candidato].numero[2] == '\0'){
     89c:	22 81       	ldd	r18, Z+2	; 0x02
     89e:	22 23       	and	r18, r18
     8a0:	61 f0       	breq	.+24     	; 0x8ba <buscaCandidato+0x5a>
				return posicao_candidato;
			}
			// Sendo deputado federal, compara os demais caracteres
			else if(candidato.dados_candidato[posicao_candidato].numero[2] == numero[2] && candidato.dados_candidato[posicao_candidato].numero[3] == numero[3]){
     8a2:	3a 81       	ldd	r19, Y+2	; 0x02
     8a4:	23 13       	cpse	r18, r19
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <buscaCandidato+0x50>
     8a8:	33 81       	ldd	r19, Z+3	; 0x03
     8aa:	2b 81       	ldd	r18, Y+3	; 0x03
     8ac:	32 17       	cp	r19, r18
     8ae:	39 f0       	breq	.+14     	; 0x8be <buscaCandidato+0x5e>
	return VOTACAO_CONCLUIDA;
}

char buscaCandidato(CANDIDATO candidato, char* numero){
	unsigned char posicao_candidato;
	for(posicao_candidato = 0; posicao_candidato < candidato.num_candidatos_votados; posicao_candidato++){
     8b0:	9f 5f       	subi	r25, 0xFF	; 255
     8b2:	98 17       	cp	r25, r24
     8b4:	d0 f2       	brcs	.-76     	; 0x86a <buscaCandidato+0xa>
			else if(candidato.dados_candidato[posicao_candidato].numero[2] == numero[2] && candidato.dados_candidato[posicao_candidato].numero[3] == numero[3]){
				return posicao_candidato;
			}
		}
	}
	return CANDIDATO_INEXISTENTE;
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <buscaCandidato+0x60>
	for(posicao_candidato = 0; posicao_candidato < candidato.num_candidatos_votados; posicao_candidato++){
		// Compara os dois primeiros caracteres do candidato atual
		if(candidato.dados_candidato[posicao_candidato].numero[0] == numero[0] && candidato.dados_candidato[posicao_candidato].numero[1] == numero[1]){
			// Verifica se o candidato é um deputado federal, se não, o candidato já existe e retorna sua posição
			if(candidato.dados_candidato[posicao_candidato].numero[2] == '\0'){
				return posicao_candidato;
     8ba:	89 2f       	mov	r24, r25
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <buscaCandidato+0x60>
			}
			// Sendo deputado federal, compara os demais caracteres
			else if(candidato.dados_candidato[posicao_candidato].numero[2] == numero[2] && candidato.dados_candidato[posicao_candidato].numero[3] == numero[3]){
				return posicao_candidato;
     8be:	89 2f       	mov	r24, r25
			}
		}
	}
	return CANDIDATO_INEXISTENTE;
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <registraVoto>:

void registraVoto(CANDIDATO* candidato, char* candidato_numero, char* candidato_nome){
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	ab 01       	movw	r20, r22
	unsigned char posicao_candidato = buscaCandidato(*candidato, candidato_numero);
     8ce:	68 81       	ld	r22, Y
     8d0:	79 81       	ldd	r23, Y+1	; 0x01
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	c5 df       	rcall	.-118    	; 0x860 <buscaCandidato>
		strcpy(candidato->dados_candidato[candidato->num_candidatos_votados].numero, candidato_numero);
		candidato->dados_candidato[candidato->num_candidatos_votados].num_votos++;
		candidato->num_candidatos_votados++;
	}
	else{
		candidato->dados_candidato[posicao_candidato].num_votos++;
     8d6:	e8 81       	ld	r30, Y
     8d8:	f9 81       	ldd	r31, Y+1	; 0x01
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	9c 01       	movw	r18, r24
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	82 0f       	add	r24, r18
     8e4:	93 1f       	adc	r25, r19
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	e8 0f       	add	r30, r24
     8f4:	f9 1f       	adc	r31, r25
     8f6:	87 89       	ldd	r24, Z+23	; 0x17
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	87 8b       	std	Z+23, r24	; 0x17
	}
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <conta_bytes>:
		return ERRO_COMUNICACAO;
	}
	return RELATORIO_ENVIADO;
}

unsigned int conta_bytes(CANDIDATO candidato, char* titulo){
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	d8 2f       	mov	r29, r24
	unsigned int n_caracteres = 0;
	unsigned char candidato_atual;
	
	for(candidato_atual = 0; candidato_atual < candidato.num_candidatos_votados; candidato_atual++){
     908:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return RELATORIO_ENVIADO;
}

unsigned int conta_bytes(CANDIDATO candidato, char* titulo){
	unsigned int n_caracteres = 0;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char candidato_atual;
	
	for(candidato_atual = 0; candidato_atual < candidato.num_candidatos_votados; candidato_atual++){
     90e:	1f c0       	rjmp	.+62     	; 0x94e <conta_bytes+0x4c>
		n_caracteres += (int) strlen(candidato.dados_candidato[candidato_atual].nome) + 1;   // n caracteres + ' '
     910:	e6 2f       	mov	r30, r22
     912:	f7 2f       	mov	r31, r23
     914:	2c 2f       	mov	r18, r28
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	d9 01       	movw	r26, r18
     91a:	aa 0f       	add	r26, r26
     91c:	bb 1f       	adc	r27, r27
     91e:	2a 0f       	add	r18, r26
     920:	3b 1f       	adc	r19, r27
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	e2 0f       	add	r30, r18
     930:	f3 1f       	adc	r31, r19
     932:	36 96       	adiw	r30, 0x06	; 6
     934:	df 01       	movw	r26, r30
     936:	0d 90       	ld	r0, X+
     938:	00 20       	and	r0, r0
     93a:	e9 f7       	brne	.-6      	; 0x936 <conta_bytes+0x34>
     93c:	11 97       	sbiw	r26, 0x01	; 1
     93e:	ae 1b       	sub	r26, r30
     940:	bf 0b       	sbc	r27, r31
     942:	8a 0f       	add	r24, r26
     944:	9b 1f       	adc	r25, r27
		n_caracteres += 3;                                                             // 2 caracteres + '\n'
     946:	04 96       	adiw	r24, 0x04	; 4
		n_caracteres += (int) titulo;
     948:	84 0f       	add	r24, r20
     94a:	95 1f       	adc	r25, r21

unsigned int conta_bytes(CANDIDATO candidato, char* titulo){
	unsigned int n_caracteres = 0;
	unsigned char candidato_atual;
	
	for(candidato_atual = 0; candidato_atual < candidato.num_candidatos_votados; candidato_atual++){
     94c:	cf 5f       	subi	r28, 0xFF	; 255
     94e:	cd 17       	cp	r28, r29
     950:	f8 f2       	brcs	.-66     	; 0x910 <conta_bytes+0xe>
		n_caracteres += (int) strlen(candidato.dados_candidato[candidato_atual].nome) + 1;   // n caracteres + ' '
		n_caracteres += 3;                                                             // 2 caracteres + '\n'
		n_caracteres += (int) titulo;
	}
	return n_caracteres;
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <print_erroComunicacao>:

// Imprime na tela msg de erro de comunicação serial
void print_erroComunicacao(){
	sendString_setAdress("ERRO NA COMUNIC.", 1, 1);
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	84 e3       	ldi	r24, 0x34	; 52
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	4f de       	rcall	.-866    	; 0x600 <sendString_setAdress>
	sendString_setAdress("     SERIAL   ", 2, 1);
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	62 e0       	ldi	r22, 0x02	; 2
     966:	85 e4       	ldi	r24, 0x45	; 69
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	4a ce       	rjmp	.-876    	; 0x600 <sendString_setAdress>
     96c:	08 95       	ret

0000096e <print_optionsVotacao>:
}

void print_optionsVotacao(){
	sendString_setAdress("A:  B:BRANCO C: ", 2, 1);
     96e:	41 e0       	ldi	r20, 0x01	; 1
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	84 e5       	ldi	r24, 0x54	; 84
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	44 de       	rcall	.-888    	; 0x600 <sendString_setAdress>
	setDdRamAddress(0x40 + 2);
     978:	82 e4       	ldi	r24, 0x42	; 66
     97a:	6b dd       	rcall	.-1322   	; 0x452 <setDdRamAddress>
	sendChar(RIGHT_OPTION_CHARACTER);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	f1 dc       	rcall	.-1566   	; 0x362 <sendChar>
	setDdRamAddress(0x40 + 14);
     980:	8e e4       	ldi	r24, 0x4E	; 78
     982:	67 dd       	rcall	.-1330   	; 0x452 <setDdRamAddress>
	sendChar(LEFT_ARROW_CHARACTER);
     984:	8f e7       	ldi	r24, 0x7F	; 127
     986:	ed cc       	rjmp	.-1574   	; 0x362 <sendChar>
     988:	08 95       	ret

0000098a <envia_votos_relatorio>:
     98a:	cf 92       	push	r12
}

void envia_votos_relatorio(CANDIDATO candidato){
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	d6 2e       	mov	r13, r22
     99c:	e7 2e       	mov	r14, r23
     99e:	f8 2e       	mov	r15, r24
	unsigned char candidato_atual;
	for(candidato_atual = 0; candidato_atual < candidato.num_candidatos_votados; candidato_atual++){
     9a0:	00 e0       	ldi	r16, 0x00	; 0
     9a2:	3b c0       	rjmp	.+118    	; 0xa1a <envia_votos_relatorio+0x90>
		char msa_num_votos = (candidato.dados_candidato[candidato_atual].num_votos / 10) + 48;
     9a4:	cd 2d       	mov	r28, r13
     9a6:	de 2d       	mov	r29, r14
     9a8:	80 2f       	mov	r24, r16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	9c 01       	movw	r18, r24
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	c8 0f       	add	r28, r24
     9c4:	d9 1f       	adc	r29, r25
     9c6:	8f 89       	ldd	r24, Y+23	; 0x17
     9c8:	9d ec       	ldi	r25, 0xCD	; 205
     9ca:	89 9f       	mul	r24, r25
     9cc:	91 2d       	mov	r25, r1
     9ce:	11 24       	eor	r1, r1
     9d0:	96 95       	lsr	r25
     9d2:	96 95       	lsr	r25
     9d4:	96 95       	lsr	r25
     9d6:	0f 2e       	mov	r0, r31
     9d8:	f0 e3       	ldi	r31, 0x30	; 48
     9da:	cf 2e       	mov	r12, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	c9 0e       	add	r12, r25
		char lsa_num_votos = (candidato.dados_candidato[candidato_atual].num_votos % 10) + 48;
     9e0:	99 0f       	add	r25, r25
     9e2:	29 2f       	mov	r18, r25
     9e4:	22 0f       	add	r18, r18
     9e6:	22 0f       	add	r18, r18
     9e8:	92 0f       	add	r25, r18
     9ea:	89 1b       	sub	r24, r25
     9ec:	10 e3       	ldi	r17, 0x30	; 48
     9ee:	18 0f       	add	r17, r24
		sendSerialMessage("   "); sendSerialChar(msa_num_votos); sendSerialChar(lsa_num_votos);
     9f0:	8f ee       	ldi	r24, 0xEF	; 239
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
     9f8:	8c 2d       	mov	r24, r12
     9fa:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     9fe:	81 2f       	mov	r24, r17
     a00:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
		sendSerialChar(' '); sendSerialMessage(candidato.dados_candidato[candidato_atual].nome); sendSerialChar('\n');
     a04:	80 e2       	ldi	r24, 0x20	; 32
     a06:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     a0a:	ce 01       	movw	r24, r28
     a0c:	06 96       	adiw	r24, 0x06	; 6
     a0e:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
     a12:	8a e0       	ldi	r24, 0x0A	; 10
     a14:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
	sendChar(LEFT_ARROW_CHARACTER);
}

void envia_votos_relatorio(CANDIDATO candidato){
	unsigned char candidato_atual;
	for(candidato_atual = 0; candidato_atual < candidato.num_candidatos_votados; candidato_atual++){
     a18:	0f 5f       	subi	r16, 0xFF	; 255
     a1a:	0f 15       	cp	r16, r15
     a1c:	18 f2       	brcs	.-122    	; 0x9a4 <envia_votos_relatorio+0x1a>
		char msa_num_votos = (candidato.dados_candidato[candidato_atual].num_votos / 10) + 48;
		char lsa_num_votos = (candidato.dados_candidato[candidato_atual].num_votos % 10) + 48;
		sendSerialMessage("   "); sendSerialChar(msa_num_votos); sendSerialChar(lsa_num_votos);
		sendSerialChar(' '); sendSerialMessage(candidato.dados_candidato[candidato_atual].nome); sendSerialChar('\n');
	}
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	08 95       	ret

00000a30 <relatorio_votacao>:
	else{
		candidato->dados_candidato[posicao_candidato].num_votos++;
	}
}

char relatorio_votacao(CANDIDATO depFederal, CANDIDATO partido, CANDIDATO senador, CANDIDATO presidente){
     a30:	5f 92       	push	r5
     a32:	6f 92       	push	r6
     a34:	7f 92       	push	r7
     a36:	8f 92       	push	r8
     a38:	9f 92       	push	r9
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <relatorio_votacao+0x20>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <relatorio_votacao+0x22>
     a52:	00 d0       	rcall	.+0      	; 0xa54 <relatorio_votacao+0x24>
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	76 2e       	mov	r7, r22
     a5a:	87 2e       	mov	r8, r23
     a5c:	d8 2e       	mov	r13, r24
     a5e:	62 2e       	mov	r6, r18
     a60:	53 2e       	mov	r5, r19
     a62:	94 2e       	mov	r9, r20
     a64:	ec 82       	std	Y+4, r14	; 0x04
     a66:	fd 82       	std	Y+5, r15	; 0x05
     a68:	0e 83       	std	Y+6, r16	; 0x06
	unsigned int n_caracteres = 0;
	char response [3];
	
	if(presidente.num_candidatos_votados == 0){
     a6a:	c1 10       	cpse	r12, r1
     a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <relatorio_votacao+0x74>
		char* mensagem = "SEM VOTOS REGISTRADOS";
		n_caracteres += strlen(mensagem);
		sendSerialChar('U'); sendSerialChar('R'); sendSerialChar(n_caracteres);
     a6e:	85 e5       	ldi	r24, 0x55	; 85
     a70:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     a74:	82 e5       	ldi	r24, 0x52	; 82
     a76:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     a7a:	85 e1       	ldi	r24, 0x15	; 21
     a7c:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
		sendSerialMessage(mensagem);
     a80:	85 e6       	ldi	r24, 0x65	; 101
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
		getSerialMessage(response);
     a88:	ce 01       	movw	r24, r28
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
		if(response[0] != 'M' || response[1] != 'R'){
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	8d 34       	cpi	r24, 0x4D	; 77
     a94:	09 f0       	breq	.+2      	; 0xa98 <relatorio_votacao+0x68>
     a96:	67 c0       	rjmp	.+206    	; 0xb66 <relatorio_votacao+0x136>
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	82 35       	cpi	r24, 0x52	; 82
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <relatorio_votacao+0x70>
     a9e:	65 c0       	rjmp	.+202    	; 0xb6a <relatorio_votacao+0x13a>
			return ERRO_COMUNICACAO;
     aa0:	8f ef       	ldi	r24, 0xFF	; 255
     aa2:	68 c0       	rjmp	.+208    	; 0xb74 <relatorio_votacao+0x144>
		}
		return RELATORIO_ENVIADO;
	}
	n_caracteres += strlen("DEP FEDERAL:\n");
	if(depFederal.num_candidatos_votados > 0){
     aa4:	f8 2e       	mov	r15, r24
     aa6:	88 23       	and	r24, r24
     aa8:	39 f0       	breq	.+14     	; 0xab8 <relatorio_votacao+0x88>
		n_caracteres += conta_bytes(depFederal, "-Candidato:\n");
     aaa:	49 ea       	ldi	r20, 0xA9	; 169
     aac:	51 e0       	ldi	r21, 0x01	; 1
     aae:	29 df       	rcall	.-430    	; 0x902 <conta_bytes>
     ab0:	8c 01       	movw	r16, r24
     ab2:	03 5f       	subi	r16, 0xF3	; 243
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <relatorio_votacao+0x8c>
		if(response[0] != 'M' || response[1] != 'R'){
			return ERRO_COMUNICACAO;
		}
		return RELATORIO_ENVIADO;
	}
	n_caracteres += strlen("DEP FEDERAL:\n");
     ab8:	0d e0       	ldi	r16, 0x0D	; 13
     aba:	10 e0       	ldi	r17, 0x00	; 0
	if(depFederal.num_candidatos_votados > 0){
		n_caracteres += conta_bytes(depFederal, "-Candidato:\n");
	}
	if(partido.num_candidatos_votados > 0){
     abc:	e9 2c       	mov	r14, r9
     abe:	99 20       	and	r9, r9
     ac0:	41 f0       	breq	.+16     	; 0xad2 <relatorio_votacao+0xa2>
		n_caracteres += conta_bytes(partido, "-Partido:\n");
     ac2:	49 eb       	ldi	r20, 0xB9	; 185
     ac4:	51 e0       	ldi	r21, 0x01	; 1
     ac6:	66 2d       	mov	r22, r6
     ac8:	75 2d       	mov	r23, r5
     aca:	89 2d       	mov	r24, r9
     acc:	1a df       	rcall	.-460    	; 0x902 <conta_bytes>
     ace:	08 0f       	add	r16, r24
     ad0:	19 1f       	adc	r17, r25
	}
	n_caracteres += conta_bytes(senador, "\nSENADOR:\n");
     ad2:	4b e7       	ldi	r20, 0x7B	; 123
     ad4:	51 e0       	ldi	r21, 0x01	; 1
     ad6:	6c 81       	ldd	r22, Y+4	; 0x04
     ad8:	7d 81       	ldd	r23, Y+5	; 0x05
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	12 df       	rcall	.-476    	; 0x902 <conta_bytes>
     ade:	08 0f       	add	r16, r24
     ae0:	19 1f       	adc	r17, r25
	n_caracteres += conta_bytes(presidente, "\nPRESIDENTE:\n");
     ae2:	46 e8       	ldi	r20, 0x86	; 134
     ae4:	51 e0       	ldi	r21, 0x01	; 1
     ae6:	6a 2d       	mov	r22, r10
     ae8:	7b 2d       	mov	r23, r11
     aea:	8c 2d       	mov	r24, r12
     aec:	0a df       	rcall	.-492    	; 0x902 <conta_bytes>
     aee:	08 0f       	add	r16, r24
     af0:	19 1f       	adc	r17, r25
	// CONTAR JUSTIFICATIVAS ------------------------------------------------------------------------------------------------------------
	
	sendSerialMessage("UR"); sendChar(n_caracteres);
     af2:	84 e9       	ldi	r24, 0x94	; 148
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
     afa:	80 2f       	mov	r24, r16
     afc:	32 dc       	rcall	.-1948   	; 0x362 <sendChar>
	sendSerialMessage(">DEP FEDERAL:\n"); 
     afe:	87 e9       	ldi	r24, 0x97	; 151
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
	if(depFederal.num_candidatos_votados > 0){
     b06:	ff 20       	and	r15, r15
     b08:	41 f0       	breq	.+16     	; 0xb1a <relatorio_votacao+0xea>
		sendSerialMessage("   -Candidato:\n");
     b0a:	86 ea       	ldi	r24, 0xA6	; 166
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
		envia_votos_relatorio(depFederal);
     b12:	67 2d       	mov	r22, r7
     b14:	78 2d       	mov	r23, r8
     b16:	8d 2d       	mov	r24, r13
     b18:	38 df       	rcall	.-400    	; 0x98a <envia_votos_relatorio>
	}
	if(partido.num_candidatos_votados > 0){
     b1a:	ee 20       	and	r14, r14
     b1c:	41 f0       	breq	.+16     	; 0xb2e <relatorio_votacao+0xfe>
		sendSerialMessage("   -Partido:\n");
     b1e:	86 eb       	ldi	r24, 0xB6	; 182
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
		envia_votos_relatorio(depFederal);
     b26:	67 2d       	mov	r22, r7
     b28:	78 2d       	mov	r23, r8
     b2a:	8d 2d       	mov	r24, r13
     b2c:	2e df       	rcall	.-420    	; 0x98a <envia_votos_relatorio>
	}
	sendSerialMessage("\nSENADOR:\n");
     b2e:	8b e7       	ldi	r24, 0x7B	; 123
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
	envia_votos_relatorio(senador);
     b36:	6c 81       	ldd	r22, Y+4	; 0x04
     b38:	7d 81       	ldd	r23, Y+5	; 0x05
     b3a:	8e 81       	ldd	r24, Y+6	; 0x06
	sendSerialMessage("\nPRESIDENE:\n");
     b3c:	26 df       	rcall	.-436    	; 0x98a <envia_votos_relatorio>
     b3e:	84 ec       	ldi	r24, 0xC4	; 196
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
	envia_votos_relatorio(presidente);
     b46:	6a 2d       	mov	r22, r10
     b48:	7b 2d       	mov	r23, r11
     b4a:	8c 2d       	mov	r24, r12
     b4c:	1e df       	rcall	.-452    	; 0x98a <envia_votos_relatorio>
	// ENVIAR JUSTIFICATIVAS ------------------------------------------------------------------------------------------------------------
	
	getSerialMessage(response);
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
	if(response[0] != 'M' || response[1] != 'R'){
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	8d 34       	cpi	r24, 0x4D	; 77
     b5a:	49 f4       	brne	.+18     	; 0xb6e <relatorio_votacao+0x13e>
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	82 35       	cpi	r24, 0x52	; 82
     b60:	41 f0       	breq	.+16     	; 0xb72 <relatorio_votacao+0x142>
		return ERRO_COMUNICACAO;
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	07 c0       	rjmp	.+14     	; 0xb74 <relatorio_votacao+0x144>
		n_caracteres += strlen(mensagem);
		sendSerialChar('U'); sendSerialChar('R'); sendSerialChar(n_caracteres);
		sendSerialMessage(mensagem);
		getSerialMessage(response);
		if(response[0] != 'M' || response[1] != 'R'){
			return ERRO_COMUNICACAO;
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <relatorio_votacao+0x144>
		}
		return RELATORIO_ENVIADO;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <relatorio_votacao+0x144>
	envia_votos_relatorio(presidente);
	// ENVIAR JUSTIFICATIVAS ------------------------------------------------------------------------------------------------------------
	
	getSerialMessage(response);
	if(response[0] != 'M' || response[1] != 'R'){
		return ERRO_COMUNICACAO;
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <relatorio_votacao+0x144>
	}
	return RELATORIO_ENVIADO;
     b72:	81 e0       	ldi	r24, 0x01	; 1
}
     b74:	26 96       	adiw	r28, 0x06	; 6
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	9f 90       	pop	r9
     b96:	8f 90       	pop	r8
     b98:	7f 90       	pop	r7
     b9a:	6f 90       	pop	r6
     b9c:	5f 90       	pop	r5
     b9e:	08 95       	ret

00000ba0 <cleanString>:
		sendSerialMessage("   "); sendSerialChar(msa_num_votos); sendSerialChar(lsa_num_votos);
		sendSerialChar(' '); sendSerialMessage(candidato.dados_candidato[candidato_atual].nome); sendSerialChar('\n');
	}
}

void cleanString(char* string){
     ba0:	9c 01       	movw	r18, r24
	unsigned char i;
	for(i = 0; i < sizeof(string); i++){
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <cleanString+0x10>
		string[i] = 0;
     ba6:	f9 01       	movw	r30, r18
     ba8:	e9 0f       	add	r30, r25
     baa:	f1 1d       	adc	r31, r1
     bac:	10 82       	st	Z, r1
	}
}

void cleanString(char* string){
	unsigned char i;
	for(i = 0; i < sizeof(string); i++){
     bae:	9f 5f       	subi	r25, 0xFF	; 255
     bb0:	92 30       	cpi	r25, 0x02	; 2
     bb2:	c8 f3       	brcs	.-14     	; 0xba6 <cleanString+0x6>
		string[i] = 0;
	}
     bb4:	08 95       	ret

00000bb6 <votacao>:
	}
	return ELEITOR_VALIDO;
}

// Processo de votacao
char votacao(CANDIDATO* depFederal, CANDIDATO* partido, CANDIDATO* senador, CANDIDATO* presidente){
     bb6:	4f 92       	push	r4
     bb8:	5f 92       	push	r5
     bba:	7f 92       	push	r7
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	c3 57       	subi	r28, 0x73	; 115
     bd8:	d1 09       	sbc	r29, r1
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	5c 01       	movw	r10, r24
     be6:	6b 01       	movw	r12, r22
     be8:	7a 01       	movw	r14, r20
     bea:	29 01       	movw	r4, r18
	char depFederal_numero[5] = {0,0,0,0,0};
     bec:	fe 01       	movw	r30, r28
     bee:	31 96       	adiw	r30, 0x01	; 1
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	df 01       	movw	r26, r30
     bf4:	1d 92       	st	X+, r1
     bf6:	8a 95       	dec	r24
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <votacao+0x3e>
	char depFederal_nome[17] = {0};
     bfa:	81 e1       	ldi	r24, 0x11	; 17
     bfc:	35 96       	adiw	r30, 0x05	; 5
     bfe:	df 01       	movw	r26, r30
     c00:	68 2f       	mov	r22, r24
     c02:	1d 92       	st	X+, r1
     c04:	6a 95       	dec	r22
     c06:	e9 f7       	brne	.-6      	; 0xc02 <votacao+0x4c>
	char senador_numero[3] = {0,0,0};
     c08:	1f 8a       	std	Y+23, r1	; 0x17
     c0a:	18 8e       	std	Y+24, r1	; 0x18
     c0c:	19 8e       	std	Y+25, r1	; 0x19
	char senador_nome[17] = {0};
     c0e:	74 96       	adiw	r30, 0x14	; 20
     c10:	df 01       	movw	r26, r30
     c12:	68 2f       	mov	r22, r24
     c14:	1d 92       	st	X+, r1
     c16:	6a 95       	dec	r22
     c18:	e9 f7       	brne	.-6      	; 0xc14 <votacao+0x5e>
	char presidente_numero[3]  = {0,0,'\0'};
     c1a:	1b a6       	std	Y+43, r1	; 0x2b
     c1c:	1c a6       	std	Y+44, r1	; 0x2c
     c1e:	1d a6       	std	Y+45, r1	; 0x2d
	char presidente_nome[17] = {0};
     c20:	74 96       	adiw	r30, 0x14	; 20
     c22:	df 01       	movw	r26, r30
     c24:	1d 92       	st	X+, r1
     c26:	8a 95       	dec	r24
     c28:	e9 f7       	brne	.-6      	; 0xc24 <votacao+0x6e>
	char tecla = 0;
	unsigned char input_caracters_counter = 0;
	
	// Início do processo de votação
	sendSerialChar('U'); sendSerialChar('I'); 
     c2a:	85 e5       	ldi	r24, 0x55	; 85
     c2c:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     c30:	89 e4       	ldi	r24, 0x49	; 73
     c32:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
	char response[50] = {0};
     c36:	ce 01       	movw	r24, r28
     c38:	cf 96       	adiw	r24, 0x3f	; 63
     c3a:	22 e3       	ldi	r18, 0x32	; 50
     c3c:	fc 01       	movw	r30, r24
     c3e:	11 92       	st	Z+, r1
     c40:	2a 95       	dec	r18
     c42:	e9 f7       	brne	.-6      	; 0xc3e <votacao+0x88>
	getSerialMessage(response);
     c44:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
	
	if(response[0] != 'M' || response[1] != 'I'){
     c48:	8f ad       	ldd	r24, Y+63	; 0x3f
     c4a:	8d 34       	cpi	r24, 0x4D	; 77
     c4c:	09 f0       	breq	.+2      	; 0xc50 <votacao+0x9a>
     c4e:	a2 c2       	rjmp	.+1348   	; 0x1194 <votacao+0x5de>
     c50:	21 96       	adiw	r28, 0x01	; 1
     c52:	8f ad       	ldd	r24, Y+63	; 0x3f
     c54:	21 97       	sbiw	r28, 0x01	; 1
     c56:	89 34       	cpi	r24, 0x49	; 73
     c58:	09 f0       	breq	.+2      	; 0xc5c <votacao+0xa6>
     c5a:	9e c2       	rjmp	.+1340   	; 0x1198 <votacao+0x5e2>
		return ERRO_COMUNICACAO;
	}
	
	// Votação Dep. Federal:
	sendString_setAdress("Dep Federal:    ", 1, 1);
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	81 ed       	ldi	r24, 0xD1	; 209
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	cd dc       	rcall	.-1638   	; 0x600 <sendString_setAdress>
	print_optionsVotacao();
     c66:	83 de       	rcall	.-762    	; 0x96e <print_optionsVotacao>
     c68:	ce 01       	movw	r24, r28
	input_caracters_counter = 0;
	cleanString(response);
     c6a:	cf 96       	adiw	r24, 0x3f	; 63
     c6c:	99 df       	rcall	.-206    	; 0xba0 <cleanString>
     c6e:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Votação Dep. Federal:
	sendString_setAdress("Dep Federal:    ", 1, 1);
	print_optionsVotacao();
	input_caracters_counter = 0;
     c70:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
	cleanString(response);
	do{
		tecla = get_tecla();
     c74:	08 2f       	mov	r16, r24
     c76:	8f eb       	ldi	r24, 0xBF	; 191
		// Se a tecla for A, ou B, vota
		if(tecla == 'A' || tecla == 'B'){
     c78:	80 0f       	add	r24, r16
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <votacao+0xca>
     c7e:	8f c0       	rjmp	.+286    	; 0xd9e <votacao+0x1e8>
     c80:	01 34       	cpi	r16, 0x41	; 65
			// Se não votou em branco
			if(tecla == 'A'){
     c82:	69 f4       	brne	.+26     	; 0xc9e <votacao+0xe8>
     c84:	13 30       	cpi	r17, 0x03	; 3
				// Se o usuário digitou 1 ou 3 caracteres, voto nulo
				if(input_caracters_counter == 3 || input_caracters_counter == 1 || input_caracters_counter == 0){
     c86:	21 f0       	breq	.+8      	; 0xc90 <votacao+0xda>
     c88:	11 30       	cpi	r17, 0x01	; 1
     c8a:	11 f0       	breq	.+4      	; 0xc90 <votacao+0xda>
     c8c:	11 11       	cpse	r17, r1
     c8e:	0f c0       	rjmp	.+30     	; 0xcae <votacao+0xf8>
     c90:	89 e3       	ldi	r24, 0x39	; 57
					input_caracters_counter = 2;
					depFederal_numero[0] = '9';
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	8a 83       	std	Y+2, r24	; 0x02
					depFederal_numero[1] = '9';
     c96:	1b 82       	std	Y+3, r1	; 0x03
					depFederal_numero[2] = 0;
     c98:	1c 82       	std	Y+4, r1	; 0x04
					depFederal_numero[3] = 0;
     c9a:	12 e0       	ldi	r17, 0x02	; 2
		if(tecla == 'A' || tecla == 'B'){
			// Se não votou em branco
			if(tecla == 'A'){
				// Se o usuário digitou 1 ou 3 caracteres, voto nulo
				if(input_caracters_counter == 3 || input_caracters_counter == 1 || input_caracters_counter == 0){
					input_caracters_counter = 2;
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <votacao+0xf8>
     c9e:	02 34       	cpi	r16, 0x42	; 66
					depFederal_numero[2] = 0;
					depFederal_numero[3] = 0;
				}
			}
			// Se votou em branco
			else if(tecla == 'B'){ 
     ca0:	31 f4       	brne	.+12     	; 0xcae <votacao+0xf8>
     ca2:	80 e3       	ldi	r24, 0x30	; 48
				input_caracters_counter = 2;
				depFederal_numero[0] = '0';
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	8a 83       	std	Y+2, r24	; 0x02
				depFederal_numero[1] = '0';
     ca8:	1b 82       	std	Y+3, r1	; 0x03
				depFederal_numero[2] = 0;
     caa:	1c 82       	std	Y+4, r1	; 0x04
				depFederal_numero[3] = 0;
     cac:	12 e0       	ldi	r17, 0x02	; 2
					depFederal_numero[3] = 0;
				}
			}
			// Se votou em branco
			else if(tecla == 'B'){ 
				input_caracters_counter = 2;
     cae:	85 e5       	ldi	r24, 0x55	; 85
				depFederal_numero[3] = 0;
			}

			char depFederal_numero_bkp[3];
			// Realiza comunicação serial
			sendSerialChar('U'); sendSerialChar('F');
     cb0:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     cb4:	86 e4       	ldi	r24, 0x46	; 70
     cb6:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     cba:	81 2f       	mov	r24, r17
			sendSerialChar(input_caracters_counter);
     cbc:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     cc0:	12 30       	cpi	r17, 0x02	; 2
			if(input_caracters_counter == 2){
     cc2:	89 f4       	brne	.+34     	; 0xce6 <votacao+0x130>
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
				depFederal_numero_bkp[0] = depFederal_numero[0];
     cc6:	e2 96       	adiw	r28, 0x32	; 50
     cc8:	8f af       	std	Y+63, r24	; 0x3f
     cca:	e2 97       	sbiw	r28, 0x32	; 50
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
				depFederal_numero_bkp[1] = depFederal_numero[1];
     cce:	e3 96       	adiw	r28, 0x33	; 51
     cd0:	8f af       	std	Y+63, r24	; 0x3f
     cd2:	e3 97       	sbiw	r28, 0x33	; 51
     cd4:	e4 96       	adiw	r28, 0x34	; 52
				depFederal_numero_bkp[2] = 0;
     cd6:	1f ae       	std	Y+63, r1	; 0x3f
     cd8:	e4 97       	sbiw	r28, 0x34	; 52
     cda:	ce 01       	movw	r24, r28
				sendSerialMessage(depFederal_numero_bkp);
     cdc:	8f 58       	subi	r24, 0x8F	; 143
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <votacao+0x138>
     ce6:	ce 01       	movw	r24, r28
			}else {
				sendSerialMessage(depFederal_numero);
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
     cee:	ce 01       	movw	r24, r28
			}
			getSerialMessage(response);
     cf0:	cf 96       	adiw	r24, 0x3f	; 63
     cf2:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
     cf6:	8f ad       	ldd	r24, Y+63	; 0x3f
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'F'){
     cf8:	8d 34       	cpi	r24, 0x4D	; 77
     cfa:	29 f4       	brne	.+10     	; 0xd06 <votacao+0x150>
     cfc:	21 96       	adiw	r28, 0x01	; 1
     cfe:	8f ad       	ldd	r24, Y+63	; 0x3f
     d00:	21 97       	sbiw	r28, 0x01	; 1
     d02:	86 34       	cpi	r24, 0x46	; 70
     d04:	11 f0       	breq	.+4      	; 0xd0a <votacao+0x154>
     d06:	8f ef       	ldi	r24, 0xFF	; 255
				return ERRO_COMUNICACAO;
     d08:	50 c2       	rjmp	.+1184   	; 0x11aa <votacao+0x5f4>
     d0a:	de 01       	movw	r26, r28
			}
			
			// Obtém nome do candidato através da reposta serial
			unsigned char i, a = strlen(&response[3]);
     d0c:	ae 5b       	subi	r26, 0xBE	; 190
     d0e:	bf 4f       	sbci	r27, 0xFF	; 255
     d10:	fd 01       	movw	r30, r26
     d12:	01 90       	ld	r0, Z+
     d14:	00 20       	and	r0, r0
     d16:	e9 f7       	brne	.-6      	; 0xd12 <votacao+0x15c>
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	4e 2f       	mov	r20, r30
     d1c:	4a 1b       	sub	r20, r26
     d1e:	20 e0       	ldi	r18, 0x00	; 0
			for(i = 0; i < a; i++){
     d20:	13 c0       	rjmp	.+38     	; 0xd48 <votacao+0x192>
     d22:	82 2f       	mov	r24, r18
				depFederal_nome[i] = response[3 + i];
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	33 96       	adiw	r30, 0x03	; 3
     d2a:	6f e3       	ldi	r22, 0x3F	; 63
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	6c 0f       	add	r22, r28
     d30:	7d 1f       	adc	r23, r29
     d32:	e6 0f       	add	r30, r22
     d34:	f7 1f       	adc	r31, r23
     d36:	30 81       	ld	r19, Z
     d38:	e6 e0       	ldi	r30, 0x06	; 6
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	ec 0f       	add	r30, r28
     d3e:	fd 1f       	adc	r31, r29
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	30 83       	st	Z, r19
     d46:	2f 5f       	subi	r18, 0xFF	; 255
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			unsigned char i, a = strlen(&response[3]);
			for(i = 0; i < a; i++){
     d48:	24 17       	cp	r18, r20
     d4a:	58 f3       	brcs	.-42     	; 0xd22 <votacao+0x16c>
     d4c:	41 e0       	ldi	r20, 0x01	; 1
				depFederal_nome[i] = response[3 + i];
			}
			
			// Pede cofirmação do usuário
			sendString_setAdress("                ", 1, 1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	82 ee       	ldi	r24, 0xE2	; 226
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	55 dc       	rcall	.-1878   	; 0x600 <sendString_setAdress>
     d56:	41 e0       	ldi	r20, 0x01	; 1
			sendString_setAdress(depFederal_nome, 1, 1);
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	ce 01       	movw	r24, r28
     d5c:	06 96       	adiw	r24, 0x06	; 6
     d5e:	50 dc       	rcall	.-1888   	; 0x600 <sendString_setAdress>
     d60:	41 e0       	ldi	r20, 0x01	; 1
			sendString_setAdress("Confirma?  ", 2, 1);
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	83 ef       	ldi	r24, 0xF3	; 243
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	4b dc       	rcall	.-1898   	; 0x600 <sendString_setAdress>
			sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	fa da       	rcall	.-2572   	; 0x362 <sendChar>
     d6e:	83 ec       	ldi	r24, 0xC3	; 195
     d70:	93 e0       	ldi	r25, 0x03	; 3
			sendChar(RETURN_CHARACTER); sendChar('B');
     d72:	69 dc       	rcall	.-1838   	; 0x646 <sendString>
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	f5 da       	rcall	.-2582   	; 0x362 <sendChar>
     d78:	82 e4       	ldi	r24, 0x42	; 66
     d7a:	f3 da       	rcall	.-2586   	; 0x362 <sendChar>
			tecla = getCharacter_AB();
     d7c:	df dc       	rcall	.-1602   	; 0x73c <getCharacter_AB>
     d7e:	08 2f       	mov	r16, r24
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
     d80:	82 34       	cpi	r24, 0x42	; 66
     d82:	09 f0       	breq	.+2      	; 0xd86 <votacao+0x1d0>
				input_caracters_counter = 0;
				tecla = 0;
				sendString_setAdress("Dep Federal:    ", 1, 1);
     d84:	3c c0       	rjmp	.+120    	; 0xdfe <votacao+0x248>
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	81 ed       	ldi	r24, 0xD1	; 209
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	38 dc       	rcall	.-1936   	; 0x600 <sendString_setAdress>
				print_optionsVotacao();
     d90:	ee dd       	rcall	.-1060   	; 0x96e <print_optionsVotacao>
     d92:	ce 01       	movw	r24, r28
				cleanString(response);
     d94:	cf 96       	adiw	r24, 0x3f	; 63
     d96:	04 df       	rcall	.-504    	; 0xba0 <cleanString>
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	00 e0       	ldi	r16, 0x00	; 0
			sendChar(RETURN_CHARACTER); sendChar('B');
			tecla = getCharacter_AB();
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
				input_caracters_counter = 0;
     d9c:	30 c0       	rjmp	.+96     	; 0xdfe <votacao+0x248>
				tecla = 0;
     d9e:	03 34       	cpi	r16, 0x43	; 67
     da0:	99 f4       	brne	.+38     	; 0xdc8 <votacao+0x212>
				cleanString(response);
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
     da2:	11 23       	and	r17, r17
     da4:	89 f0       	breq	.+34     	; 0xdc8 <votacao+0x212>
     da6:	77 24       	eor	r7, r7
			input_caracters_counter--;
     da8:	7a 94       	dec	r7
     daa:	71 0e       	add	r7, r17
			depFederal_numero[input_caracters_counter] = 0;
     dac:	e1 e0       	ldi	r30, 0x01	; 1
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ec 0f       	add	r30, r28
     db2:	fd 1f       	adc	r31, r29
     db4:	e7 0d       	add	r30, r7
     db6:	f1 1d       	adc	r31, r1
     db8:	10 82       	st	Z, r1
			setDdRamAddress(12 + input_caracters_counter);
     dba:	8b e0       	ldi	r24, 0x0B	; 11
     dbc:	81 0f       	add	r24, r17
     dbe:	49 db       	rcall	.-2414   	; 0x452 <setDdRamAddress>
     dc0:	80 e2       	ldi	r24, 0x20	; 32
			sendChar(' ');
     dc2:	cf da       	rcall	.-2658   	; 0x362 <sendChar>
     dc4:	17 2d       	mov	r17, r7
     dc6:	1b c0       	rjmp	.+54     	; 0xdfe <votacao+0x248>
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
			input_caracters_counter--;
     dc8:	03 32       	cpi	r16, 0x23	; 35
			depFederal_numero[input_caracters_counter] = 0;
			setDdRamAddress(12 + input_caracters_counter);
			sendChar(' ');
     dca:	c9 f0       	breq	.+50     	; 0xdfe <votacao+0x248>
		}
		// Se foi um caractere numérico, o insere
		else if(tecla != '#' && tecla != '*' && tecla != 'D' && tecla != 'B' && tecla != 'C' && tecla != 'A' && input_caracters_counter < 4){
     dcc:	0a 32       	cpi	r16, 0x2A	; 42
     dce:	b9 f0       	breq	.+46     	; 0xdfe <votacao+0x248>
     dd0:	04 34       	cpi	r16, 0x44	; 68
     dd2:	a9 f0       	breq	.+42     	; 0xdfe <votacao+0x248>
     dd4:	02 34       	cpi	r16, 0x42	; 66
     dd6:	99 f0       	breq	.+38     	; 0xdfe <votacao+0x248>
     dd8:	03 34       	cpi	r16, 0x43	; 67
     dda:	89 f0       	breq	.+34     	; 0xdfe <votacao+0x248>
     ddc:	01 34       	cpi	r16, 0x41	; 65
     dde:	79 f0       	breq	.+30     	; 0xdfe <votacao+0x248>
     de0:	14 30       	cpi	r17, 0x04	; 4
     de2:	68 f4       	brcc	.+26     	; 0xdfe <votacao+0x248>
			setDdRamAddress(12 + input_caracters_counter);
     de4:	8c e0       	ldi	r24, 0x0C	; 12
     de6:	81 0f       	add	r24, r17
     de8:	34 db       	rcall	.-2456   	; 0x452 <setDdRamAddress>
     dea:	e1 e0       	ldi	r30, 0x01	; 1
			depFederal_numero[input_caracters_counter] = tecla;
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ec 0f       	add	r30, r28
     df0:	fd 1f       	adc	r31, r29
     df2:	e1 0f       	add	r30, r17
     df4:	f1 1d       	adc	r31, r1
			input_caracters_counter++;
     df6:	00 83       	st	Z, r16
			sendChar(tecla);
     df8:	1f 5f       	subi	r17, 0xFF	; 255
     dfa:	80 2f       	mov	r24, r16
     dfc:	b2 da       	rcall	.-2716   	; 0x362 <sendChar>
		}
	} while(tecla != 'A' && tecla != 'B');
     dfe:	8f eb       	ldi	r24, 0xBF	; 191
     e00:	80 0f       	add	r24, r16
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	08 f0       	brcs	.+2      	; 0xe08 <votacao+0x252>
     e06:	34 cf       	rjmp	.-408    	; 0xc70 <votacao+0xba>
	
	
	// Votação senador
	sendString_setAdress("Senador:        ", 1, 1);
     e08:	41 e0       	ldi	r20, 0x01	; 1
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	f7 db       	rcall	.-2066   	; 0x600 <sendString_setAdress>
     e12:	ad dd       	rcall	.-1190   	; 0x96e <print_optionsVotacao>
	print_optionsVotacao();
     e14:	ce 01       	movw	r24, r28
     e16:	cf 96       	adiw	r24, 0x3f	; 63
	input_caracters_counter = 0;
	cleanString(response);
     e18:	c3 de       	rcall	.-634    	; 0xba0 <cleanString>
     e1a:	91 2c       	mov	r9, r1
     e1c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
	
	
	// Votação senador
	sendString_setAdress("Senador:        ", 1, 1);
	print_optionsVotacao();
	input_caracters_counter = 0;
     e20:	18 2f       	mov	r17, r24
	cleanString(response);
	do{
		tecla = get_tecla();
     e22:	8f eb       	ldi	r24, 0xBF	; 191
     e24:	81 0f       	add	r24, r17
     e26:	82 30       	cpi	r24, 0x02	; 2
		
		if(tecla == 'A' || tecla == 'B'){
     e28:	08 f0       	brcs	.+2      	; 0xe2c <votacao+0x276>
     e2a:	79 c0       	rjmp	.+242    	; 0xf1e <votacao+0x368>
     e2c:	11 34       	cpi	r17, 0x41	; 65
     e2e:	51 f4       	brne	.+20     	; 0xe44 <votacao+0x28e>
     e30:	71 e0       	ldi	r23, 0x01	; 1
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
     e32:	79 15       	cp	r23, r9
     e34:	38 f0       	brcs	.+14     	; 0xe44 <votacao+0x28e>
     e36:	89 e3       	ldi	r24, 0x39	; 57
     e38:	8f 8b       	std	Y+23, r24	; 0x17
     e3a:	88 8f       	std	Y+24, r24	; 0x18
				input_caracters_counter = 2;
				senador_numero[0] = '9';
     e3c:	68 94       	set
     e3e:	99 24       	eor	r9, r9
				senador_numero[1] = '9';
     e40:	91 f8       	bld	r9, 1
		tecla = get_tecla();
		
		if(tecla == 'A' || tecla == 'B'){
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
				input_caracters_counter = 2;
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <votacao+0x29e>
     e44:	12 34       	cpi	r17, 0x42	; 66
     e46:	31 f4       	brne	.+12     	; 0xe54 <votacao+0x29e>
				senador_numero[0] = '9';
				senador_numero[1] = '9';
     e48:	80 e3       	ldi	r24, 0x30	; 48
			}
			else if(tecla == 'B'){
     e4a:	8f 8b       	std	Y+23, r24	; 0x17
     e4c:	88 8f       	std	Y+24, r24	; 0x18
				input_caracters_counter = 2;
				senador_numero[0] = '0';
     e4e:	68 94       	set
     e50:	99 24       	eor	r9, r9
				senador_numero[1] = '0';
     e52:	91 f8       	bld	r9, 1
				input_caracters_counter = 2;
				senador_numero[0] = '9';
				senador_numero[1] = '9';
			}
			else if(tecla == 'B'){
				input_caracters_counter = 2;
     e54:	85 e5       	ldi	r24, 0x55	; 85
     e56:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
				senador_numero[0] = '0';
				senador_numero[1] = '0';
			}
			
			// Realiza comunicação serial
			sendSerialChar('U'); sendSerialChar('S');
     e5a:	83 e5       	ldi	r24, 0x53	; 83
     e5c:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     e60:	89 2d       	mov	r24, r9
     e62:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
			sendSerialChar(input_caracters_counter);
     e66:	ce 01       	movw	r24, r28
     e68:	47 96       	adiw	r24, 0x17	; 23
     e6a:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
			sendSerialMessage(senador_numero);
     e6e:	ce 01       	movw	r24, r28
     e70:	cf 96       	adiw	r24, 0x3f	; 63
     e72:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
			getSerialMessage(response);
     e76:	8f ad       	ldd	r24, Y+63	; 0x3f
     e78:	8d 34       	cpi	r24, 0x4D	; 77
     e7a:	09 f0       	breq	.+2      	; 0xe7e <votacao+0x2c8>
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'S'){
     e7c:	8f c1       	rjmp	.+798    	; 0x119c <votacao+0x5e6>
     e7e:	21 96       	adiw	r28, 0x01	; 1
     e80:	8f ad       	ldd	r24, Y+63	; 0x3f
     e82:	21 97       	sbiw	r28, 0x01	; 1
     e84:	83 35       	cpi	r24, 0x53	; 83
     e86:	09 f0       	breq	.+2      	; 0xe8a <votacao+0x2d4>
     e88:	8b c1       	rjmp	.+790    	; 0x11a0 <votacao+0x5ea>
     e8a:	de 01       	movw	r26, r28
     e8c:	ae 5b       	subi	r26, 0xBE	; 190
     e8e:	bf 4f       	sbci	r27, 0xFF	; 255
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			unsigned char i, a = strlen(&response[3]);
     e90:	fd 01       	movw	r30, r26
     e92:	01 90       	ld	r0, Z+
     e94:	00 20       	and	r0, r0
     e96:	e9 f7       	brne	.-6      	; 0xe92 <votacao+0x2dc>
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	4e 2f       	mov	r20, r30
     e9c:	4a 1b       	sub	r20, r26
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	13 c0       	rjmp	.+38     	; 0xec8 <votacao+0x312>
     ea2:	82 2f       	mov	r24, r18
			for(i = 0; i < a; i++){
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	fc 01       	movw	r30, r24
				senador_nome[i] = response[3 + i];
     ea8:	33 96       	adiw	r30, 0x03	; 3
     eaa:	af e3       	ldi	r26, 0x3F	; 63
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ac 0f       	add	r26, r28
     eb0:	bd 1f       	adc	r27, r29
     eb2:	ea 0f       	add	r30, r26
     eb4:	fb 1f       	adc	r31, r27
     eb6:	30 81       	ld	r19, Z
     eb8:	ea e1       	ldi	r30, 0x1A	; 26
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ec 0f       	add	r30, r28
     ebe:	fd 1f       	adc	r31, r29
     ec0:	e8 0f       	add	r30, r24
     ec2:	f9 1f       	adc	r31, r25
     ec4:	30 83       	st	Z, r19
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			unsigned char i, a = strlen(&response[3]);
			for(i = 0; i < a; i++){
     ec6:	2f 5f       	subi	r18, 0xFF	; 255
     ec8:	24 17       	cp	r18, r20
				senador_nome[i] = response[3 + i];
			}
			
			// Pede cofirmação do usuário
			sendString_setAdress("                ", 1, 1);
     eca:	58 f3       	brcs	.-42     	; 0xea2 <votacao+0x2ec>
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	61 e0       	ldi	r22, 0x01	; 1
			sendString_setAdress(senador_nome, 1, 1);
     ed0:	82 ee       	ldi	r24, 0xE2	; 226
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	95 db       	rcall	.-2262   	; 0x600 <sendString_setAdress>
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	ce 01       	movw	r24, r28
			sendString_setAdress("Confirma?  ", 2, 1);
     edc:	4a 96       	adiw	r24, 0x1a	; 26
     ede:	90 db       	rcall	.-2272   	; 0x600 <sendString_setAdress>
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	62 e0       	ldi	r22, 0x02	; 2
			sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
     ee4:	83 ef       	ldi	r24, 0xF3	; 243
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	8b db       	rcall	.-2282   	; 0x600 <sendString_setAdress>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	3a da       	rcall	.-2956   	; 0x362 <sendChar>
     eee:	83 ec       	ldi	r24, 0xC3	; 195
     ef0:	93 e0       	ldi	r25, 0x03	; 3
			sendChar(RETURN_CHARACTER); sendChar('B');
     ef2:	a9 db       	rcall	.-2222   	; 0x646 <sendString>
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	35 da       	rcall	.-2966   	; 0x362 <sendChar>
     ef8:	82 e4       	ldi	r24, 0x42	; 66
     efa:	33 da       	rcall	.-2970   	; 0x362 <sendChar>
     efc:	1f dc       	rcall	.-1986   	; 0x73c <getCharacter_AB>
			tecla = getCharacter_AB();
     efe:	18 2f       	mov	r17, r24
     f00:	82 34       	cpi	r24, 0x42	; 66
     f02:	09 f0       	breq	.+2      	; 0xf06 <votacao+0x350>
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
     f04:	3d c0       	rjmp	.+122    	; 0xf80 <votacao+0x3ca>
     f06:	41 e0       	ldi	r20, 0x01	; 1
				input_caracters_counter = 0;
				tecla = 0;
				sendString_setAdress("Senador:        ", 1, 1);
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	78 db       	rcall	.-2320   	; 0x600 <sendString_setAdress>
     f10:	2e dd       	rcall	.-1444   	; 0x96e <print_optionsVotacao>
				print_optionsVotacao();
     f12:	ce 01       	movw	r24, r28
     f14:	cf 96       	adiw	r24, 0x3f	; 63
				cleanString(response);
     f16:	44 de       	rcall	.-888    	; 0xba0 <cleanString>
     f18:	91 2c       	mov	r9, r1
     f1a:	10 e0       	ldi	r17, 0x00	; 0
     f1c:	31 c0       	rjmp	.+98     	; 0xf80 <votacao+0x3ca>
			sendChar(RETURN_CHARACTER); sendChar('B');
			tecla = getCharacter_AB();
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
				input_caracters_counter = 0;
     f1e:	13 34       	cpi	r17, 0x43	; 67
				tecla = 0;
     f20:	99 f4       	brne	.+38     	; 0xf48 <votacao+0x392>
     f22:	99 20       	and	r9, r9
				cleanString(response);
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
     f24:	89 f0       	breq	.+34     	; 0xf48 <votacao+0x392>
     f26:	77 24       	eor	r7, r7
     f28:	7a 94       	dec	r7
     f2a:	79 0c       	add	r7, r9
			input_caracters_counter--;
     f2c:	e7 e1       	ldi	r30, 0x17	; 23
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
			senador_numero[input_caracters_counter] = 0;
     f30:	ec 0f       	add	r30, r28
     f32:	fd 1f       	adc	r31, r29
     f34:	e7 0d       	add	r30, r7
     f36:	f1 1d       	adc	r31, r1
     f38:	10 82       	st	Z, r1
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	89 0d       	add	r24, r9
			setDdRamAddress(8 + input_caracters_counter);
     f3e:	89 da       	rcall	.-2798   	; 0x452 <setDdRamAddress>
     f40:	80 e2       	ldi	r24, 0x20	; 32
     f42:	0f da       	rcall	.-3042   	; 0x362 <sendChar>
			sendChar(' ');
     f44:	97 2c       	mov	r9, r7
     f46:	1c c0       	rjmp	.+56     	; 0xf80 <votacao+0x3ca>
     f48:	13 32       	cpi	r17, 0x23	; 35
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
			input_caracters_counter--;
     f4a:	d1 f0       	breq	.+52     	; 0xf80 <votacao+0x3ca>
			senador_numero[input_caracters_counter] = 0;
			setDdRamAddress(8 + input_caracters_counter);
			sendChar(' ');
     f4c:	1a 32       	cpi	r17, 0x2A	; 42
		}
		// Se foi um caractere numérico, o insere
		else if(tecla != '#' && tecla != '*' && tecla != 'D' && tecla != 'B' && tecla != 'C' && tecla != 'A' && input_caracters_counter < 2){
     f4e:	c1 f0       	breq	.+48     	; 0xf80 <votacao+0x3ca>
     f50:	14 34       	cpi	r17, 0x44	; 68
     f52:	b1 f0       	breq	.+44     	; 0xf80 <votacao+0x3ca>
     f54:	12 34       	cpi	r17, 0x42	; 66
     f56:	a1 f0       	breq	.+40     	; 0xf80 <votacao+0x3ca>
     f58:	13 34       	cpi	r17, 0x43	; 67
     f5a:	91 f0       	breq	.+36     	; 0xf80 <votacao+0x3ca>
     f5c:	11 34       	cpi	r17, 0x41	; 65
     f5e:	81 f0       	breq	.+32     	; 0xf80 <votacao+0x3ca>
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	b9 15       	cp	r27, r9
     f64:	68 f0       	brcs	.+26     	; 0xf80 <votacao+0x3ca>
			setDdRamAddress(8 + input_caracters_counter);
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	89 0d       	add	r24, r9
     f6a:	73 da       	rcall	.-2842   	; 0x452 <setDdRamAddress>
     f6c:	e7 e1       	ldi	r30, 0x17	; 23
			senador_numero[input_caracters_counter] = tecla;
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	e9 0d       	add	r30, r9
     f76:	f1 1d       	adc	r31, r1
     f78:	10 83       	st	Z, r17
     f7a:	93 94       	inc	r9
			input_caracters_counter++;
     f7c:	81 2f       	mov	r24, r17
			sendChar(tecla);
     f7e:	f1 d9       	rcall	.-3102   	; 0x362 <sendChar>
     f80:	8f eb       	ldi	r24, 0xBF	; 191
     f82:	81 0f       	add	r24, r17
		}
		
		
	} while(tecla != 'A' && tecla != 'B');
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	08 f0       	brcs	.+2      	; 0xf8a <votacao+0x3d4>
     f88:	49 cf       	rjmp	.-366    	; 0xe1c <votacao+0x266>
     f8a:	41 e0       	ldi	r20, 0x01	; 1
     f8c:	61 e0       	ldi	r22, 0x01	; 1
	
	// Votação para presidente
	sendString_setAdress("Presidente:     ", 1, 1);
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	36 db       	rcall	.-2452   	; 0x600 <sendString_setAdress>
     f94:	ec dc       	rcall	.-1576   	; 0x96e <print_optionsVotacao>
     f96:	ce 01       	movw	r24, r28
     f98:	cf 96       	adiw	r24, 0x3f	; 63
	print_optionsVotacao();
     f9a:	02 de       	rcall	.-1020   	; 0xba0 <cleanString>
     f9c:	91 2c       	mov	r9, r1
	input_caracters_counter = 0;
	cleanString(response);
     f9e:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
     fa2:	18 2f       	mov	r17, r24
     fa4:	8f eb       	ldi	r24, 0xBF	; 191
	} while(tecla != 'A' && tecla != 'B');
	
	// Votação para presidente
	sendString_setAdress("Presidente:     ", 1, 1);
	print_optionsVotacao();
	input_caracters_counter = 0;
     fa6:	81 0f       	add	r24, r17
	cleanString(response);
	
	do{
		tecla = get_tecla();
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	08 f0       	brcs	.+2      	; 0xfae <votacao+0x3f8>
     fac:	79 c0       	rjmp	.+242    	; 0x10a0 <votacao+0x4ea>
		if(tecla == 'A' || tecla == 'B'){
     fae:	11 34       	cpi	r17, 0x41	; 65
     fb0:	51 f4       	brne	.+20     	; 0xfc6 <votacao+0x410>
     fb2:	e1 e0       	ldi	r30, 0x01	; 1
     fb4:	e9 15       	cp	r30, r9
     fb6:	38 f0       	brcs	.+14     	; 0xfc6 <votacao+0x410>
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
     fb8:	89 e3       	ldi	r24, 0x39	; 57
     fba:	8b a7       	std	Y+43, r24	; 0x2b
     fbc:	8c a7       	std	Y+44, r24	; 0x2c
     fbe:	68 94       	set
     fc0:	99 24       	eor	r9, r9
				input_caracters_counter = 2;
				presidente_numero[0] = '9';
     fc2:	91 f8       	bld	r9, 1
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <votacao+0x420>
				presidente_numero[1] = '9';
     fc6:	12 34       	cpi	r17, 0x42	; 66
	do{
		tecla = get_tecla();
		if(tecla == 'A' || tecla == 'B'){
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
				input_caracters_counter = 2;
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <votacao+0x420>
     fca:	80 e3       	ldi	r24, 0x30	; 48
     fcc:	8b a7       	std	Y+43, r24	; 0x2b
				presidente_numero[0] = '9';
				presidente_numero[1] = '9';
     fce:	8c a7       	std	Y+44, r24	; 0x2c
			}
			else if(tecla == 'B'){
     fd0:	68 94       	set
     fd2:	99 24       	eor	r9, r9
				input_caracters_counter = 2;
				presidente_numero[0] = '0';
     fd4:	91 f8       	bld	r9, 1
     fd6:	85 e5       	ldi	r24, 0x55	; 85
				presidente_numero[1] = '0';
     fd8:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
				input_caracters_counter = 2;
				presidente_numero[0] = '9';
				presidente_numero[1] = '9';
			}
			else if(tecla == 'B'){
				input_caracters_counter = 2;
     fdc:	80 e5       	ldi	r24, 0x50	; 80
     fde:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
				presidente_numero[1] = '0';
			}
			
			// Realiza comunicação serial
			
			sendSerialChar('U'); sendSerialChar('P');
     fe2:	89 2d       	mov	r24, r9
     fe4:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
     fe8:	ce 01       	movw	r24, r28
     fea:	8b 96       	adiw	r24, 0x2b	; 43
			sendSerialChar(input_caracters_counter);
     fec:	0e 94 80 1c 	call	0x3900	; 0x3900 <sendSerialMessage>
     ff0:	ce 01       	movw	r24, r28
			sendSerialMessage(presidente_numero);
     ff2:	cf 96       	adiw	r24, 0x3f	; 63
     ff4:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
     ff8:	8f ad       	ldd	r24, Y+63	; 0x3f
			getSerialMessage(response);
     ffa:	8d 34       	cpi	r24, 0x4D	; 77
     ffc:	09 f0       	breq	.+2      	; 0x1000 <votacao+0x44a>
     ffe:	d2 c0       	rjmp	.+420    	; 0x11a4 <votacao+0x5ee>
    1000:	21 96       	adiw	r28, 0x01	; 1
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'P'){
    1002:	8f ad       	ldd	r24, Y+63	; 0x3f
    1004:	21 97       	sbiw	r28, 0x01	; 1
    1006:	80 35       	cpi	r24, 0x50	; 80
    1008:	09 f0       	breq	.+2      	; 0x100c <votacao+0x456>
    100a:	ce c0       	rjmp	.+412    	; 0x11a8 <votacao+0x5f2>
    100c:	de 01       	movw	r26, r28
    100e:	ae 5b       	subi	r26, 0xBE	; 190
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
    1012:	fd 01       	movw	r30, r26
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			unsigned char i, a = strlen(&response[3]);
    1014:	01 90       	ld	r0, Z+
    1016:	00 20       	and	r0, r0
    1018:	e9 f7       	brne	.-6      	; 0x1014 <votacao+0x45e>
    101a:	31 97       	sbiw	r30, 0x01	; 1
    101c:	4e 2f       	mov	r20, r30
    101e:	4a 1b       	sub	r20, r26
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	13 c0       	rjmp	.+38     	; 0x104a <votacao+0x494>
			for(i = 0; i < a; i++){
    1024:	82 2f       	mov	r24, r18
				presidente_nome[i] = response[3 + i];
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	fc 01       	movw	r30, r24
    102a:	33 96       	adiw	r30, 0x03	; 3
    102c:	6f e3       	ldi	r22, 0x3F	; 63
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	6c 0f       	add	r22, r28
    1032:	7d 1f       	adc	r23, r29
    1034:	e6 0f       	add	r30, r22
    1036:	f7 1f       	adc	r31, r23
    1038:	30 81       	ld	r19, Z
    103a:	ee e2       	ldi	r30, 0x2E	; 46
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	ec 0f       	add	r30, r28
    1040:	fd 1f       	adc	r31, r29
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			unsigned char i, a = strlen(&response[3]);
			for(i = 0; i < a; i++){
    1042:	e8 0f       	add	r30, r24
    1044:	f9 1f       	adc	r31, r25
				presidente_nome[i] = response[3 + i];
			}
			
			// Pede cofirmação do usuário
			sendString_setAdress("                ", 1, 1);
    1046:	30 83       	st	Z, r19
    1048:	2f 5f       	subi	r18, 0xFF	; 255
    104a:	24 17       	cp	r18, r20
    104c:	58 f3       	brcs	.-42     	; 0x1024 <votacao+0x46e>
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	61 e0       	ldi	r22, 0x01	; 1
			sendString_setAdress(presidente_nome, 1, 1);
    1052:	82 ee       	ldi	r24, 0xE2	; 226
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	d4 da       	rcall	.-2648   	; 0x600 <sendString_setAdress>
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	ce 01       	movw	r24, r28
			sendString_setAdress("Confirma?  ", 2, 1);
    105e:	8e 96       	adiw	r24, 0x2e	; 46
    1060:	cf da       	rcall	.-2658   	; 0x600 <sendString_setAdress>
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	83 ef       	ldi	r24, 0xF3	; 243
    1068:	91 e0       	ldi	r25, 0x01	; 1
			sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
    106a:	ca da       	rcall	.-2668   	; 0x600 <sendString_setAdress>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	79 d9       	rcall	.-3342   	; 0x362 <sendChar>
    1070:	83 ec       	ldi	r24, 0xC3	; 195
    1072:	93 e0       	ldi	r25, 0x03	; 3
			sendChar(RETURN_CHARACTER); sendChar('B');
    1074:	e8 da       	rcall	.-2608   	; 0x646 <sendString>
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	74 d9       	rcall	.-3352   	; 0x362 <sendChar>
    107a:	82 e4       	ldi	r24, 0x42	; 66
    107c:	72 d9       	rcall	.-3356   	; 0x362 <sendChar>
    107e:	5e db       	rcall	.-2372   	; 0x73c <getCharacter_AB>
			tecla = getCharacter_AB();
    1080:	18 2f       	mov	r17, r24
    1082:	82 34       	cpi	r24, 0x42	; 66
    1084:	09 f0       	breq	.+2      	; 0x1088 <votacao+0x4d2>
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
    1086:	3d c0       	rjmp	.+122    	; 0x1102 <votacao+0x54c>
    1088:	41 e0       	ldi	r20, 0x01	; 1
    108a:	61 e0       	ldi	r22, 0x01	; 1
				input_caracters_counter = 0;
				tecla = 0;
				sendString_setAdress("Presidente:     ", 1, 1);
    108c:	80 e1       	ldi	r24, 0x10	; 16
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	b7 da       	rcall	.-2706   	; 0x600 <sendString_setAdress>
    1092:	6d dc       	rcall	.-1830   	; 0x96e <print_optionsVotacao>
    1094:	ce 01       	movw	r24, r28
				print_optionsVotacao();
    1096:	cf 96       	adiw	r24, 0x3f	; 63
    1098:	83 dd       	rcall	.-1274   	; 0xba0 <cleanString>
				cleanString(response);
    109a:	91 2c       	mov	r9, r1
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	31 c0       	rjmp	.+98     	; 0x1102 <votacao+0x54c>
    10a0:	13 34       	cpi	r17, 0x43	; 67
			sendChar(RETURN_CHARACTER); sendChar('B');
			tecla = getCharacter_AB();
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
				input_caracters_counter = 0;
    10a2:	99 f4       	brne	.+38     	; 0x10ca <votacao+0x514>
				tecla = 0;
    10a4:	99 20       	and	r9, r9
				cleanString(response);
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
    10a6:	89 f0       	breq	.+34     	; 0x10ca <votacao+0x514>
    10a8:	77 24       	eor	r7, r7
    10aa:	7a 94       	dec	r7
    10ac:	79 0c       	add	r7, r9
			input_caracters_counter--;
    10ae:	eb e2       	ldi	r30, 0x2B	; 43
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
			presidente_numero[input_caracters_counter] = 0;
    10b2:	ec 0f       	add	r30, r28
    10b4:	fd 1f       	adc	r31, r29
    10b6:	e7 0d       	add	r30, r7
    10b8:	f1 1d       	adc	r31, r1
    10ba:	10 82       	st	Z, r1
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	89 0d       	add	r24, r9
			setDdRamAddress(11 + input_caracters_counter);
    10c0:	c8 d9       	rcall	.-3184   	; 0x452 <setDdRamAddress>
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	4e d9       	rcall	.-3428   	; 0x362 <sendChar>
    10c6:	97 2c       	mov	r9, r7
			sendChar(' ');
    10c8:	1c c0       	rjmp	.+56     	; 0x1102 <votacao+0x54c>
    10ca:	13 32       	cpi	r17, 0x23	; 35
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <votacao+0x54c>
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
			input_caracters_counter--;
    10ce:	1a 32       	cpi	r17, 0x2A	; 42
			presidente_numero[input_caracters_counter] = 0;
			setDdRamAddress(11 + input_caracters_counter);
			sendChar(' ');
    10d0:	c1 f0       	breq	.+48     	; 0x1102 <votacao+0x54c>
		}
		// Se foi um caractere numérico, o insere
		else if(tecla != '#' && tecla != '*' && tecla != 'D' && tecla != 'B' && tecla != 'C' && tecla != 'A' && input_caracters_counter < 2){
    10d2:	14 34       	cpi	r17, 0x44	; 68
    10d4:	b1 f0       	breq	.+44     	; 0x1102 <votacao+0x54c>
    10d6:	12 34       	cpi	r17, 0x42	; 66
    10d8:	a1 f0       	breq	.+40     	; 0x1102 <votacao+0x54c>
    10da:	13 34       	cpi	r17, 0x43	; 67
    10dc:	91 f0       	breq	.+36     	; 0x1102 <votacao+0x54c>
    10de:	11 34       	cpi	r17, 0x41	; 65
    10e0:	81 f0       	breq	.+32     	; 0x1102 <votacao+0x54c>
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	79 15       	cp	r23, r9
    10e6:	68 f0       	brcs	.+26     	; 0x1102 <votacao+0x54c>
    10e8:	8b e0       	ldi	r24, 0x0B	; 11
    10ea:	89 0d       	add	r24, r9
    10ec:	b2 d9       	rcall	.-3228   	; 0x452 <setDdRamAddress>
			setDdRamAddress(11 + input_caracters_counter);
    10ee:	eb e2       	ldi	r30, 0x2B	; 43
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	ec 0f       	add	r30, r28
    10f4:	fd 1f       	adc	r31, r29
			presidente_numero[input_caracters_counter] = tecla;
    10f6:	e9 0d       	add	r30, r9
    10f8:	f1 1d       	adc	r31, r1
    10fa:	10 83       	st	Z, r17
    10fc:	93 94       	inc	r9
    10fe:	81 2f       	mov	r24, r17
    1100:	30 d9       	rcall	.-3488   	; 0x362 <sendChar>
			input_caracters_counter++;
    1102:	8f eb       	ldi	r24, 0xBF	; 191
			sendChar(tecla);
    1104:	81 0f       	add	r24, r17
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	08 f0       	brcs	.+2      	; 0x110c <votacao+0x556>
		}		
	}while(tecla != 'A' && tecla != 'B');
    110a:	49 cf       	rjmp	.-366    	; 0xf9e <votacao+0x3e8>
    110c:	ce 01       	movw	r24, r28
    110e:	cf 96       	adiw	r24, 0x3f	; 63
    1110:	47 dd       	rcall	.-1394   	; 0xba0 <cleanString>
	
	// Fim do processo de votação
	cleanString(response);
    1112:	85 e5       	ldi	r24, 0x55	; 85
    1114:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
	sendSerialChar('U'); sendSerialChar('C');
    1118:	83 e4       	ldi	r24, 0x43	; 67
    111a:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    111e:	ce 01       	movw	r24, r28
    1120:	cf 96       	adiw	r24, 0x3f	; 63
    1122:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
	getSerialMessage(response);
    1126:	8f ad       	ldd	r24, Y+63	; 0x3f
    1128:	8d 34       	cpi	r24, 0x4D	; 77
	
	if(response[0] != 'M' || response[1] != 'C'){
    112a:	29 f4       	brne	.+10     	; 0x1136 <votacao+0x580>
    112c:	21 96       	adiw	r28, 0x01	; 1
    112e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1130:	21 97       	sbiw	r28, 0x01	; 1
    1132:	83 34       	cpi	r24, 0x43	; 67
    1134:	19 f0       	breq	.+6      	; 0x113c <votacao+0x586>
    1136:	10 dc       	rcall	.-2016   	; 0x958 <print_erroComunicacao>
    1138:	8f ef       	ldi	r24, 0xFF	; 255
		print_erroComunicacao();
    113a:	37 c0       	rjmp	.+110    	; 0x11aa <votacao+0x5f4>
    113c:	de 01       	movw	r26, r28
		return ERRO_COMUNICACAO;
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	fd 01       	movw	r30, r26
	}
	// Contabiliza votos
	if(strlen(depFederal_numero) == 4){
    1142:	01 90       	ld	r0, Z+
    1144:	00 20       	and	r0, r0
    1146:	e9 f7       	brne	.-6      	; 0x1142 <votacao+0x58c>
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	ea 1b       	sub	r30, r26
    114c:	fb 0b       	sbc	r31, r27
    114e:	34 97       	sbiw	r30, 0x04	; 4
    1150:	39 f4       	brne	.+14     	; 0x1160 <votacao+0x5aa>
    1152:	ae 01       	movw	r20, r28
    1154:	4a 5f       	subi	r20, 0xFA	; 250
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
		registraVoto(depFederal, depFederal_numero, depFederal_nome);
    1158:	bd 01       	movw	r22, r26
    115a:	c5 01       	movw	r24, r10
    115c:	b4 db       	rcall	.-2200   	; 0x8c6 <registraVoto>
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <votacao+0x5ba>
    1160:	ae 01       	movw	r20, r28
    1162:	4a 5f       	subi	r20, 0xFA	; 250
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	be 01       	movw	r22, r28
		} else{
		registraVoto(partido, depFederal_numero, depFederal_nome);
    1168:	6f 5f       	subi	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	c6 01       	movw	r24, r12
    116e:	ab db       	rcall	.-2218   	; 0x8c6 <registraVoto>
    1170:	ae 01       	movw	r20, r28
    1172:	46 5e       	subi	r20, 0xE6	; 230
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	be 01       	movw	r22, r28
    1178:	69 5e       	subi	r22, 0xE9	; 233
	}
	registraVoto(senador, senador_numero, senador_nome);
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	c7 01       	movw	r24, r14
    117e:	a3 db       	rcall	.-2234   	; 0x8c6 <registraVoto>
    1180:	ae 01       	movw	r20, r28
    1182:	42 5d       	subi	r20, 0xD2	; 210
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	be 01       	movw	r22, r28
    1188:	65 5d       	subi	r22, 0xD5	; 213
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
	registraVoto(presidente, presidente_numero, presidente_nome);
    118c:	c2 01       	movw	r24, r4
    118e:	9b db       	rcall	.-2250   	; 0x8c6 <registraVoto>
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	0b c0       	rjmp	.+22     	; 0x11aa <votacao+0x5f4>
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <votacao+0x5f4>
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <votacao+0x5f4>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
	return VOTACAO_CONCLUIDA;
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <votacao+0x5f4>
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
	sendSerialChar('U'); sendSerialChar('I'); 
	char response[50] = {0};
	getSerialMessage(response);
	
	if(response[0] != 'M' || response[1] != 'I'){
		return ERRO_COMUNICACAO;
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <votacao+0x5f4>
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <votacao+0x5f4>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
			sendSerialMessage(senador_numero);
			getSerialMessage(response);
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'S'){
				return ERRO_COMUNICACAO;
    11aa:	cd 58       	subi	r28, 0x8D	; 141
    11ac:	df 4f       	sbci	r29, 0xFF	; 255
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
			sendSerialMessage(presidente_numero);
			getSerialMessage(response);
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'P'){
				return ERRO_COMUNICACAO;
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
		registraVoto(partido, depFederal_numero, depFederal_nome);
	}
	registraVoto(senador, senador_numero, senador_nome);
	registraVoto(presidente, presidente_numero, presidente_nome);
	return VOTACAO_CONCLUIDA;
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	7f 90       	pop	r7
    11d0:	5f 90       	pop	r5
    11d2:	4f 90       	pop	r4
    11d4:	08 95       	ret

000011d6 <main>:
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	c3 58       	subi	r28, 0x83	; 131
    11e0:	d2 40       	sbci	r29, 0x02	; 2
    11e2:	0f b6       	in	r0, 0x3f	; 63
void registraVoto(CANDIDATO*, char*, char*);
unsigned int conta_bytes(CANDIDATO, char*);
void envia_votos_relatorio(CANDIDATO);
char relatorio_votacao(CANDIDATO, CANDIDATO, CANDIDATO, CANDIDATO);

int main(void){
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
	
	// Display como outputs
	OUTPUT(D4);
    11ec:	84 b1       	in	r24, 0x04	; 4
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D5);
    11f2:	84 b1       	in	r24, 0x04	; 4
    11f4:	82 60       	ori	r24, 0x02	; 2
    11f6:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D6);
    11f8:	84 b1       	in	r24, 0x04	; 4
    11fa:	84 60       	ori	r24, 0x04	; 4
    11fc:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D7);
    11fe:	84 b1       	in	r24, 0x04	; 4
    1200:	88 60       	ori	r24, 0x08	; 8
    1202:	84 b9       	out	0x04, r24	; 4
	OUTPUT(E);
    1204:	8a b1       	in	r24, 0x0a	; 10
    1206:	80 68       	ori	r24, 0x80	; 128
    1208:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(RS);
    120a:	8a b1       	in	r24, 0x0a	; 10
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	8a b9       	out	0x0a, r24	; 10
	
	// Linhas como outputs e colunas como inputs
	OUTPUT(LINHA1);
    1210:	8a b1       	in	r24, 0x0a	; 10
    1212:	80 62       	ori	r24, 0x20	; 32
    1214:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA2);
    1216:	8a b1       	in	r24, 0x0a	; 10
    1218:	80 61       	ori	r24, 0x10	; 16
    121a:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA3);
    121c:	8a b1       	in	r24, 0x0a	; 10
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA4);
    1222:	8a b1       	in	r24, 0x0a	; 10
    1224:	84 60       	ori	r24, 0x04	; 4
    1226:	8a b9       	out	0x0a, r24	; 10
	INPUT(COLUNA1);
    1228:	87 b1       	in	r24, 0x07	; 7
    122a:	8e 7f       	andi	r24, 0xFE	; 254
    122c:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA2);
    122e:	87 b1       	in	r24, 0x07	; 7
    1230:	8d 7f       	andi	r24, 0xFD	; 253
    1232:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA3);
    1234:	87 b1       	in	r24, 0x07	; 7
    1236:	8b 7f       	andi	r24, 0xFB	; 251
    1238:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA4);
    123a:	87 b1       	in	r24, 0x07	; 7
    123c:	87 7f       	andi	r24, 0xF7	; 247
    123e:	87 b9       	out	0x07, r24	; 7
	
	// Buzzer e LED como outputs
	OUTPUT(BUZZER);
    1240:	84 b1       	in	r24, 0x04	; 4
    1242:	80 61       	ori	r24, 0x10	; 16
    1244:	84 b9       	out	0x04, r24	; 4
	OUTPUT(LED);
    1246:	84 b1       	in	r24, 0x04	; 4
    1248:	80 62       	ori	r24, 0x20	; 32
    124a:	84 b9       	out	0x04, r24	; 4
	
	// Garante que todas as linhas comecem em nível lógico alto
	HIGH(LINHA1);
    124c:	8b b1       	in	r24, 0x0b	; 11
    124e:	80 62       	ori	r24, 0x20	; 32
    1250:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA2);
    1252:	8b b1       	in	r24, 0x0b	; 11
    1254:	80 61       	ori	r24, 0x10	; 16
    1256:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA3);
    1258:	8b b1       	in	r24, 0x0b	; 11
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA4);
    125e:	8b b1       	in	r24, 0x0b	; 11
    1260:	84 60       	ori	r24, 0x04	; 4
    1262:	8b b9       	out	0x0b, r24	; 11
	HIGH(COLUNA1);
    1264:	88 b1       	in	r24, 0x08	; 8
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA2);
    126a:	88 b1       	in	r24, 0x08	; 8
    126c:	82 60       	ori	r24, 0x02	; 2
    126e:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA3);
    1270:	88 b1       	in	r24, 0x08	; 8
    1272:	84 60       	ori	r24, 0x04	; 4
    1274:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA4);
    1276:	88 b1       	in	r24, 0x08	; 8
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	88 b9       	out	0x08, r24	; 8
	
	// Garante que o buzzer e o LED comecem desligados
	LOW(BUZZER);
    127c:	85 b1       	in	r24, 0x05	; 5
    127e:	8f 7e       	andi	r24, 0xEF	; 239
    1280:	85 b9       	out	0x05, r24	; 5
	LOW(LED);
    1282:	85 b1       	in	r24, 0x05	; 5
    1284:	8f 7d       	andi	r24, 0xDF	; 223
    1286:	85 b9       	out	0x05, r24	; 5
	
	// Inicialização do display
	functionSet();
    1288:	0e 94 fe 00 	call	0x1fc	; 0x1fc <functionSet>
	entryModeSet(1, 0);
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	0e 94 35 01 	call	0x26a	; 0x26a <entryModeSet>
	displayOnOffControl(1, 0, 0);
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	1e d8       	rcall	.-4036   	; 0x2d8 <displayOnOffControl>
	storage_special_characters();
    129c:	e9 d9       	rcall	.-3118   	; 0x670 <storage_special_characters>
	
	// Configurações de timer e serial
	timeControlConfig();
    129e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <timeControlConfig>
	initSerialConfig();
    12a2:	0e 94 13 1c 	call	0x3826	; 0x3826 <initSerialConfig>

	// Estruturas utilizadas no relatório
	ELEITOR eleitor[33];							// Dados dos eleitores, considerando, por absurdo, que todos justifiquem
	DADOS_CANDIDATO dados_presidente[7] = {0};		// 5 presidentes + Branco e Nulo
    12a6:	48 ea       	ldi	r20, 0xA8	; 168
    12a8:	be 01       	movw	r22, r28
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	db 01       	movw	r26, r22
    12b0:	e4 2f       	mov	r30, r20
    12b2:	1d 92       	st	X+, r1
    12b4:	ea 95       	dec	r30
    12b6:	e9 f7       	brne	.-6      	; 0x12b2 <main+0xdc>
	DADOS_CANDIDATO dados_senador[5];				// 3 senadores + Branco e Nulo
	DADOS_CANDIDATO dados_depFederal[6];			// 6 dep. federais + Branco e Nulo
	DADOS_CANDIDATO dados_partido[4];				// 4 partidos
	// Inicializa candidatos
	CANDIDATO presidente = {dados_presidente, 0};
    12b8:	cf 5e       	subi	r28, 0xEF	; 239
    12ba:	dd 4f       	sbci	r29, 0xFD	; 253
    12bc:	79 83       	std	Y+1, r23	; 0x01
    12be:	68 83       	st	Y, r22
    12c0:	c1 51       	subi	r28, 0x11	; 17
    12c2:	d2 40       	sbci	r29, 0x02	; 2
    12c4:	cd 5e       	subi	r28, 0xED	; 237
    12c6:	dd 4f       	sbci	r29, 0xFD	; 253
    12c8:	18 82       	st	Y, r1
    12ca:	c3 51       	subi	r28, 0x13	; 19
    12cc:	d2 40       	sbci	r29, 0x02	; 2
	CANDIDATO senador = {dados_senador, 0};
    12ce:	9e 01       	movw	r18, r28
    12d0:	27 55       	subi	r18, 0x57	; 87
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	cc 5e       	subi	r28, 0xEC	; 236
    12d6:	dd 4f       	sbci	r29, 0xFD	; 253
    12d8:	39 83       	std	Y+1, r19	; 0x01
    12da:	28 83       	st	Y, r18
    12dc:	c4 51       	subi	r28, 0x14	; 20
    12de:	d2 40       	sbci	r29, 0x02	; 2
    12e0:	ca 5e       	subi	r28, 0xEA	; 234
    12e2:	dd 4f       	sbci	r29, 0xFD	; 253
    12e4:	18 82       	st	Y, r1
    12e6:	c6 51       	subi	r28, 0x16	; 22
    12e8:	d2 40       	sbci	r29, 0x02	; 2
	CANDIDATO depFederal = {dados_depFederal, 0};
    12ea:	ce 01       	movw	r24, r28
    12ec:	8f 5d       	subi	r24, 0xDF	; 223
    12ee:	9e 4f       	sbci	r25, 0xFE	; 254
    12f0:	c9 5e       	subi	r28, 0xE9	; 233
    12f2:	dd 4f       	sbci	r29, 0xFD	; 253
    12f4:	99 83       	std	Y+1, r25	; 0x01
    12f6:	88 83       	st	Y, r24
    12f8:	c7 51       	subi	r28, 0x17	; 23
    12fa:	d2 40       	sbci	r29, 0x02	; 2
    12fc:	c7 5e       	subi	r28, 0xE7	; 231
    12fe:	dd 4f       	sbci	r29, 0xFD	; 253
    1300:	18 82       	st	Y, r1
    1302:	c9 51       	subi	r28, 0x19	; 25
    1304:	d2 40       	sbci	r29, 0x02	; 2
	CANDIDATO partido = {dados_partido, 0};
    1306:	de 01       	movw	r26, r28
    1308:	af 54       	subi	r26, 0x4F	; 79
    130a:	be 4f       	sbci	r27, 0xFE	; 254
    130c:	c6 5e       	subi	r28, 0xE6	; 230
    130e:	dd 4f       	sbci	r29, 0xFD	; 253
    1310:	b9 83       	std	Y+1, r27	; 0x01
    1312:	a8 83       	st	Y, r26
    1314:	ca 51       	subi	r28, 0x1A	; 26
    1316:	d2 40       	sbci	r29, 0x02	; 2
    1318:	c4 5e       	subi	r28, 0xE4	; 228
    131a:	dd 4f       	sbci	r29, 0xFD	; 253
    131c:	18 82       	st	Y, r1
    131e:	cc 51       	subi	r28, 0x1C	; 28
    1320:	d2 40       	sbci	r29, 0x02	; 2
	// Atribui zero para todos os bits das estruturas de dados dos candidatos
	memset(dados_presidente, 0, sizeof(dados_presidente));
    1322:	fb 01       	movw	r30, r22
    1324:	11 92       	st	Z+, r1
    1326:	4a 95       	dec	r20
    1328:	e9 f7       	brne	.-6      	; 0x1324 <main+0x14e>
	memset(dados_senador, 0, sizeof(dados_senador));
    132a:	48 e7       	ldi	r20, 0x78	; 120
    132c:	f9 01       	movw	r30, r18
    132e:	11 92       	st	Z+, r1
    1330:	4a 95       	dec	r20
    1332:	e9 f7       	brne	.-6      	; 0x132e <main+0x158>
	memset(dados_depFederal, 0, sizeof(dados_depFederal));
    1334:	20 e9       	ldi	r18, 0x90	; 144
    1336:	fc 01       	movw	r30, r24
    1338:	11 92       	st	Z+, r1
    133a:	2a 95       	dec	r18
    133c:	e9 f7       	brne	.-6      	; 0x1338 <main+0x162>
	memset(dados_partido, 0, sizeof(dados_partido));
    133e:	80 e6       	ldi	r24, 0x60	; 96
    1340:	fd 01       	movw	r30, r26
    1342:	11 92       	st	Z+, r1
    1344:	8a 95       	dec	r24
    1346:	e9 f7       	brne	.-6      	; 0x1342 <main+0x16c>
	unsigned char num_justificativas = 0; // Número de eleitores que justificaram
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = OPERACIONAL;		// Estado da urna
	char menu_index = 1;	// Índice do menu_operacional
	char option_menu_operacional = 1;	// Opção selecionada do menu_operacional
	char numero_eleitor[5] = {0};		// Guarda número do eleitor
    1348:	fe 01       	movw	r30, r28
    134a:	e3 5e       	subi	r30, 0xE3	; 227
    134c:	fd 4f       	sbci	r31, 0xFD	; 253
    134e:	85 e0       	ldi	r24, 0x05	; 5
    1350:	df 01       	movw	r26, r30
    1352:	98 2f       	mov	r25, r24
    1354:	1d 92       	st	X+, r1
    1356:	9a 95       	dec	r25
    1358:	e9 f7       	brne	.-6      	; 0x1354 <main+0x17e>
	char nome_eleitor[17] = {0};		// Guarda nome do eleitor (max 16 caracteres + \0)
    135a:	35 96       	adiw	r30, 0x05	; 5
    135c:	91 e1       	ldi	r25, 0x11	; 17
    135e:	df 01       	movw	r26, r30
    1360:	1d 92       	st	X+, r1
    1362:	9a 95       	dec	r25
    1364:	e9 f7       	brne	.-6      	; 0x1360 <main+0x18a>
	char guarda_senha_mesario[5] = {0};
    1366:	71 96       	adiw	r30, 0x11	; 17
    1368:	df 01       	movw	r26, r30
    136a:	98 2f       	mov	r25, r24
    136c:	1d 92       	st	X+, r1
    136e:	9a 95       	dec	r25
    1370:	e9 f7       	brne	.-6      	; 0x136c <main+0x196>
	char guarda_login_mesario[5] = {0};
    1372:	35 96       	adiw	r30, 0x05	; 5
    1374:	df 01       	movw	r26, r30
    1376:	1d 92       	st	X+, r1
    1378:	8a 95       	dec	r24
    137a:	e9 f7       	brne	.-6      	; 0x1376 <main+0x1a0>
	const char login_mesario[5] = "01237";
    137c:	85 e0       	ldi	r24, 0x05	; 5
    137e:	e8 e1       	ldi	r30, 0x18	; 24
    1380:	f1 e0       	ldi	r31, 0x01	; 1
    1382:	de 01       	movw	r26, r28
    1384:	a3 5c       	subi	r26, 0xC3	; 195
    1386:	bd 4f       	sbci	r27, 0xFD	; 253
    1388:	01 90       	ld	r0, Z+
    138a:	0d 92       	st	X+, r0
    138c:	8a 95       	dec	r24
    138e:	e1 f7       	brne	.-8      	; 0x1388 <main+0x1b2>
	const char senha_inicial[5] = "12378";
    1390:	85 e0       	ldi	r24, 0x05	; 5
    1392:	ee e1       	ldi	r30, 0x1E	; 30
    1394:	f1 e0       	ldi	r31, 0x01	; 1
    1396:	de 01       	movw	r26, r28
    1398:	ae 5b       	subi	r26, 0xBE	; 190
    139a:	bd 4f       	sbci	r27, 0xFD	; 253
    139c:	01 90       	ld	r0, Z+
    139e:	0d 92       	st	X+, r0
    13a0:	8a 95       	dec	r24
    13a2:	e1 f7       	brne	.-8      	; 0x139c <main+0x1c6>
	unsigned char input_caracters_counter = 0;	// Contador de daracteres inseridos pelo usuário
	char encerrada_bloqueada = 0;
	char verificacao = 0;
	char consistencia[50] = {0};
    13a4:	fe 01       	movw	r30, r28
    13a6:	e9 5b       	subi	r30, 0xB9	; 185
    13a8:	fd 4f       	sbci	r31, 0xFD	; 253
    13aa:	82 e3       	ldi	r24, 0x32	; 50
    13ac:	df 01       	movw	r26, r30
    13ae:	1d 92       	st	X+, r1
    13b0:	8a 95       	dec	r24
    13b2:	e9 f7       	brne	.-6      	; 0x13ae <main+0x1d8>
	char guarda_login_mesario[5] = {0};
	const char login_mesario[5] = "01237";
	const char senha_inicial[5] = "12378";
	unsigned char input_caracters_counter = 0;	// Contador de daracteres inseridos pelo usuário
	char encerrada_bloqueada = 0;
	char verificacao = 0;
    13b4:	81 2c       	mov	r8, r1
	char guarda_senha_mesario[5] = {0};
	char guarda_login_mesario[5] = {0};
	const char login_mesario[5] = "01237";
	const char senha_inicial[5] = "12378";
	unsigned char input_caracters_counter = 0;	// Contador de daracteres inseridos pelo usuário
	char encerrada_bloqueada = 0;
    13b6:	71 2c       	mov	r7, r1
	// Outras variáveis
	unsigned char num_justificativas = 0; // Número de eleitores que justificaram
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = OPERACIONAL;		// Estado da urna
	char menu_index = 1;	// Índice do menu_operacional
	char option_menu_operacional = 1;	// Opção selecionada do menu_operacional
    13b8:	99 24       	eor	r9, r9
    13ba:	93 94       	inc	r9
	memset(dados_partido, 0, sizeof(dados_partido));
	// Outras variáveis
	unsigned char num_justificativas = 0; // Número de eleitores que justificaram
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = OPERACIONAL;		// Estado da urna
	char menu_index = 1;	// Índice do menu_operacional
    13bc:	dd 24       	eor	r13, r13
    13be:	d3 94       	inc	r13
	memset(dados_depFederal, 0, sizeof(dados_depFederal));
	memset(dados_partido, 0, sizeof(dados_partido));
	// Outras variáveis
	unsigned char num_justificativas = 0; // Número de eleitores que justificaram
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = OPERACIONAL;		// Estado da urna
    13c0:	b2 e0       	ldi	r27, 0x02	; 2
    13c2:	cd 57       	subi	r28, 0x7D	; 125
    13c4:	dd 4f       	sbci	r29, 0xFD	; 253
    13c6:	b8 83       	st	Y, r27
    13c8:	c3 58       	subi	r28, 0x83	; 131
    13ca:	d2 40       	sbci	r29, 0x02	; 2
    13cc:	4a c1       	rjmp	.+660    	; 0x1662 <main+0x48c>
	
	while (1){
		
		while(urna_estado == BLOQUEADA){

			switch(menu_index){
    13ce:	e2 e0       	ldi	r30, 0x02	; 2
    13d0:	de 16       	cp	r13, r30
    13d2:	f9 f0       	breq	.+62     	; 0x1412 <main+0x23c>
    13d4:	f3 e0       	ldi	r31, 0x03	; 3
    13d6:	df 16       	cp	r13, r31
    13d8:	09 f4       	brne	.+2      	; 0x13dc <main+0x206>
    13da:	76 c0       	rjmp	.+236    	; 0x14c8 <main+0x2f2>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	d8 12       	cpse	r13, r24
    13e0:	19 c1       	rjmp	.+562    	; 0x1614 <main+0x43e>
				case 1:
					sendString_setAdress("      Urna      ", 1, 1);
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	81 e2       	ldi	r24, 0x21	; 33
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	0a d9       	rcall	.-3564   	; 0x600 <sendString_setAdress>
					sendString_setAdress("   Bloqueada  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	82 e3       	ldi	r24, 0x32	; 50
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	05 d9       	rcall	.-3574   	; 0x600 <sendString_setAdress>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    13fc:	81 e4       	ldi	r24, 0x41	; 65
    13fe:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					tecla = getCharacter_AB();
    1402:	9c d9       	rcall	.-3272   	; 0x73c <getCharacter_AB>
					// se a tecla apertada for A, espera o login do mesário
					if(tecla == 'A') {menu_index = 2; /*break;*/}
    1404:	81 34       	cpi	r24, 0x41	; 65
    1406:	09 f0       	breq	.+2      	; 0x140a <main+0x234>
    1408:	05 c1       	rjmp	.+522    	; 0x1614 <main+0x43e>
    140a:	68 94       	set
    140c:	dd 24       	eor	r13, r13
    140e:	d1 f8       	bld	r13, 1
    1410:	01 c1       	rjmp	.+514    	; 0x1614 <main+0x43e>
					else {menu_index = 1; /*break;*/}
					break;
				// login do mesário
				case 2:
					input_caracters_counter = 0;
					sendString_setAdress("Login adm:      ", 1, 1);
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	81 e4       	ldi	r24, 0x41	; 65
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	f2 d8       	rcall	.-3612   	; 0x600 <sendString_setAdress>
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	82 e5       	ldi	r24, 0x52	; 82
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	ed d8       	rcall	.-3622   	; 0x600 <sendString_setAdress>
					setDdRamAddress(0x40 + 2);
    1426:	82 e4       	ldi	r24, 0x42	; 66
    1428:	14 d8       	rcall	.-4056   	; 0x452 <setDdRamAddress>
    142a:	81 e0       	ldi	r24, 0x01	; 1
					sendChar(RIGHT_OPTION_CHARACTER);
    142c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					setDdRamAddress(0x40 + 8);
    1430:	88 e4       	ldi	r24, 0x48	; 72
    1432:	0f d8       	rcall	.-4066   	; 0x452 <setDdRamAddress>
    1434:	82 e0       	ldi	r24, 0x02	; 2
					sendChar(RETURN_CHARACTER);
    1436:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					setDdRamAddress(0x40 + 14);
    143a:	8e e4       	ldi	r24, 0x4E	; 78
    143c:	0a d8       	rcall	.-4076   	; 0x452 <setDdRamAddress>
    143e:	8f e7       	ldi	r24, 0x7F	; 127
					sendChar(LEFT_ARROW_CHARACTER);
    1440:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1444:	88 e0       	ldi	r24, 0x08	; 8
					setDdRamAddress(8);
    1446:	05 d8       	rcall	.-4086   	; 0x452 <setDdRamAddress>
    1448:	00 e0       	ldi	r16, 0x00	; 0
    144a:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>

					// char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
    144e:	18 2f       	mov	r17, r24
    1450:	81 34       	cpi	r24, 0x41	; 65
    1452:	11 f4       	brne	.+4      	; 0x1458 <main+0x282>
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5) {menu_index = 3;}
    1454:	05 30       	cpi	r16, 0x05	; 5
    1456:	69 f1       	breq	.+90     	; 0x14b2 <main+0x2dc>
    1458:	12 34       	cpi	r17, 0x42	; 66
    145a:	81 f1       	breq	.+96     	; 0x14bc <main+0x2e6>
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    145c:	13 34       	cpi	r17, 0x43	; 67
    145e:	69 f4       	brne	.+26     	; 0x147a <main+0x2a4>
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
    1460:	00 23       	and	r16, r16
    1462:	59 f0       	breq	.+22     	; 0x147a <main+0x2a4>
    1464:	1f ef       	ldi	r17, 0xFF	; 255
    1466:	10 0f       	add	r17, r16
							input_caracters_counter--;
    1468:	89 e0       	ldi	r24, 0x09	; 9
    146a:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    146c:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1470:	80 e2       	ldi	r24, 0x20	; 32
    1472:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    1476:	01 2f       	mov	r16, r17
    1478:	23 c0       	rjmp	.+70     	; 0x14c0 <main+0x2ea>
						if(tecla == 'A' && input_caracters_counter == 5) {menu_index = 3;}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    147a:	05 30       	cpi	r16, 0x05	; 5
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(' ');
    147c:	08 f5       	brcc	.+66     	; 0x14c0 <main+0x2ea>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    147e:	1a 32       	cpi	r17, 0x2A	; 42
    1480:	f9 f0       	breq	.+62     	; 0x14c0 <main+0x2ea>
    1482:	14 34       	cpi	r17, 0x44	; 68
    1484:	e9 f0       	breq	.+58     	; 0x14c0 <main+0x2ea>
    1486:	13 32       	cpi	r17, 0x23	; 35
    1488:	d9 f0       	breq	.+54     	; 0x14c0 <main+0x2ea>
    148a:	11 34       	cpi	r17, 0x41	; 65
    148c:	c9 f0       	breq	.+50     	; 0x14c0 <main+0x2ea>
    148e:	13 34       	cpi	r17, 0x43	; 67
    1490:	b9 f0       	breq	.+46     	; 0x14c0 <main+0x2ea>
    1492:	8a e0       	ldi	r24, 0x0A	; 10
    1494:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    1496:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    149a:	81 2f       	mov	r24, r17
    149c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(tecla);
    14a0:	e8 e3       	ldi	r30, 0x38	; 56
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_login_mesario[input_caracters_counter] = tecla;
    14a4:	ec 0f       	add	r30, r28
    14a6:	fd 1f       	adc	r31, r29
    14a8:	e0 0f       	add	r30, r16
    14aa:	f1 1d       	adc	r31, r1
    14ac:	10 83       	st	Z, r17
    14ae:	0f 5f       	subi	r16, 0xFF	; 255
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <main+0x2ea>
							input_caracters_counter++;
    14b2:	0f 2e       	mov	r0, r31
    14b4:	f3 e0       	ldi	r31, 0x03	; 3
					// char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5) {menu_index = 3;}
    14b6:	df 2e       	mov	r13, r31
    14b8:	f0 2d       	mov	r31, r0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <main+0x2ea>
    14bc:	dd 24       	eor	r13, r13
    14be:	d3 94       	inc	r13
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	d9 16       	cp	r13, r25
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(tecla);
							guarda_login_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(menu_index == 2);
    14c4:	11 f2       	breq	.-124    	; 0x144a <main+0x274>
    14c6:	a6 c0       	rjmp	.+332    	; 0x1614 <main+0x43e>
    14c8:	41 e0       	ldi	r20, 0x01	; 1
					break;
				// senha do mesário
				case 3:
					input_caracters_counter = 0;
					sendString_setAdress("Senha adm:      ", 1, 1);
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	83 e6       	ldi	r24, 0x63	; 99
    14ce:	92 e0       	ldi	r25, 0x02	; 2
    14d0:	97 d8       	rcall	.-3794   	; 0x600 <sendString_setAdress>
    14d2:	41 e0       	ldi	r20, 0x01	; 1
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    14d4:	62 e0       	ldi	r22, 0x02	; 2
    14d6:	82 e5       	ldi	r24, 0x52	; 82
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	92 d8       	rcall	.-3804   	; 0x600 <sendString_setAdress>
    14dc:	82 e4       	ldi	r24, 0x42	; 66
    14de:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 2);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RIGHT_OPTION_CHARACTER);
    14e8:	88 e4       	ldi	r24, 0x48	; 72
    14ea:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 8);
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RETURN_CHARACTER);
    14f4:	8e e4       	ldi	r24, 0x4E	; 78
    14f6:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 14);
    14fa:	8f e7       	ldi	r24, 0x7F	; 127
    14fc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(LEFT_ARROW_CHARACTER);
    1500:	88 e0       	ldi	r24, 0x08	; 8
    1502:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(8);
    1506:	00 e0       	ldi	r16, 0x00	; 0
    1508:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					
					unsigned char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
    150c:	18 2f       	mov	r17, r24
    150e:	81 34       	cpi	r24, 0x41	; 65
    1510:	09 f0       	breq	.+2      	; 0x1514 <main+0x33e>
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5){
    1512:	44 c0       	rjmp	.+136    	; 0x159c <main+0x3c6>
    1514:	05 30       	cpi	r16, 0x05	; 5
    1516:	09 f0       	breq	.+2      	; 0x151a <main+0x344>
    1518:	41 c0       	rjmp	.+130    	; 0x159c <main+0x3c6>
    151a:	25 c0       	rjmp	.+74     	; 0x1566 <main+0x390>
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	ec 0f       	add	r30, r28
    1526:	fd 1f       	adc	r31, r29
    1528:	e2 0f       	add	r30, r18
    152a:	f3 1f       	adc	r31, r19
    152c:	40 81       	ld	r20, Z
    152e:	ed e3       	ldi	r30, 0x3D	; 61
    1530:	f2 e0       	ldi	r31, 0x02	; 2
    1532:	ec 0f       	add	r30, r28
    1534:	fd 1f       	adc	r31, r29
    1536:	e2 0f       	add	r30, r18
    1538:	f3 1f       	adc	r31, r19
    153a:	90 81       	ld	r25, Z
    153c:	49 13       	cpse	r20, r25
    153e:	11 c0       	rjmp	.+34     	; 0x1562 <main+0x38c>
    1540:	e3 e3       	ldi	r30, 0x33	; 51
    1542:	f2 e0       	ldi	r31, 0x02	; 2
    1544:	ec 0f       	add	r30, r28
    1546:	fd 1f       	adc	r31, r29
    1548:	e2 0f       	add	r30, r18
    154a:	f3 1f       	adc	r31, r19
    154c:	40 81       	ld	r20, Z
    154e:	e2 e4       	ldi	r30, 0x42	; 66
    1550:	f2 e0       	ldi	r31, 0x02	; 2
    1552:	ec 0f       	add	r30, r28
    1554:	fd 1f       	adc	r31, r29
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	90 81       	ld	r25, Z
    155c:	49 13       	cpse	r20, r25
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <main+0x38c>
    1560:	5f 5f       	subi	r21, 0xFF	; 255
    1562:	8f 5f       	subi	r24, 0xFF	; 255
								{a++;}
    1564:	02 c0       	rjmp	.+4      	; 0x156a <main+0x394>
						// a = 0;
						tecla = get_tecla();
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5){
							a = 0;
							for(i = 0; i < 5; i++){
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	85 30       	cpi	r24, 0x05	; 5
    156c:	b8 f2       	brcs	.-82     	; 0x151c <main+0x346>
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
							if(a == 5) {urna_estado = OPERACIONAL; /*break;*/}
    156e:	55 30       	cpi	r21, 0x05	; 5
    1570:	09 f4       	brne	.+2      	; 0x1574 <main+0x39e>
    1572:	41 c0       	rjmp	.+130    	; 0x15f6 <main+0x420>
							else{
								sendString_setAdress("     Mesario    ", 1, 1);
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	84 e7       	ldi	r24, 0x74	; 116
    157a:	92 e0       	ldi	r25, 0x02	; 2
    157c:	41 d8       	rcall	.-3966   	; 0x600 <sendString_setAdress>
    157e:	41 e0       	ldi	r20, 0x01	; 1
								sendString_setAdress("    invalido  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	85 e8       	ldi	r24, 0x85	; 133
    1584:	92 e0       	ldi	r25, 0x02	; 2
    1586:	3c d8       	rcall	.-3976   	; 0x600 <sendString_setAdress>
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    158e:	82 e4       	ldi	r24, 0x42	; 66
    1590:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1594:	e0 d8       	rcall	.-3648   	; 0x756 <getCharacter_B>
								tecla = getCharacter_B();
    1596:	dd 24       	eor	r13, r13
    1598:	d3 94       	inc	r13
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
    159a:	38 c0       	rjmp	.+112    	; 0x160c <main+0x436>
    159c:	12 34       	cpi	r17, 0x42	; 66
    159e:	a1 f1       	breq	.+104    	; 0x1608 <main+0x432>
								tecla = getCharacter_B();
							}
							
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    15a0:	13 34       	cpi	r17, 0x43	; 67
    15a2:	69 f4       	brne	.+26     	; 0x15be <main+0x3e8>
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
    15a4:	00 23       	and	r16, r16
    15a6:	59 f0       	breq	.+22     	; 0x15be <main+0x3e8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	10 0f       	add	r17, r16
							input_caracters_counter--;
    15ac:	89 e0       	ldi	r24, 0x09	; 9
    15ae:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    15b0:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    15ba:	01 2f       	mov	r16, r17
    15bc:	27 c0       	rjmp	.+78     	; 0x160c <main+0x436>
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    15be:	05 30       	cpi	r16, 0x05	; 5
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(' ');
    15c0:	28 f5       	brcc	.+74     	; 0x160c <main+0x436>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    15c2:	1a 32       	cpi	r17, 0x2A	; 42
    15c4:	19 f1       	breq	.+70     	; 0x160c <main+0x436>
    15c6:	14 34       	cpi	r17, 0x44	; 68
    15c8:	09 f1       	breq	.+66     	; 0x160c <main+0x436>
    15ca:	13 32       	cpi	r17, 0x23	; 35
    15cc:	f9 f0       	breq	.+62     	; 0x160c <main+0x436>
    15ce:	11 34       	cpi	r17, 0x41	; 65
    15d0:	e9 f0       	breq	.+58     	; 0x160c <main+0x436>
    15d2:	13 34       	cpi	r17, 0x43	; 67
    15d4:	d9 f0       	breq	.+54     	; 0x160c <main+0x436>
    15d6:	8a e0       	ldi	r24, 0x0A	; 10
    15d8:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    15da:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    15de:	8a e2       	ldi	r24, 0x2A	; 42
    15e0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar('*');
    15e4:	e3 e3       	ldi	r30, 0x33	; 51
    15e6:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_senha_mesario[input_caracters_counter] = tecla;
    15e8:	ec 0f       	add	r30, r28
    15ea:	fd 1f       	adc	r31, r29
    15ec:	e0 0f       	add	r30, r16
    15ee:	f1 1d       	adc	r31, r1
    15f0:	10 83       	st	Z, r17
    15f2:	0f 5f       	subi	r16, 0xFF	; 255
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <main+0x436>
							input_caracters_counter++;
    15f6:	dd 24       	eor	r13, r13
    15f8:	d3 94       	inc	r13
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
    15fa:	a2 e0       	ldi	r26, 0x02	; 2
    15fc:	cd 57       	subi	r28, 0x7D	; 125
							if(a == 5) {urna_estado = OPERACIONAL; /*break;*/}
    15fe:	dd 4f       	sbci	r29, 0xFD	; 253
    1600:	a8 83       	st	Y, r26
    1602:	c3 58       	subi	r28, 0x83	; 131
    1604:	d2 40       	sbci	r29, 0x02	; 2
    1606:	02 c0       	rjmp	.+4      	; 0x160c <main+0x436>
    1608:	dd 24       	eor	r13, r13
    160a:	d3 94       	inc	r13
								tecla = getCharacter_B();
							}
							
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    160c:	b3 e0       	ldi	r27, 0x03	; 3
    160e:	db 16       	cp	r13, r27
							setDdRamAddress(10 + input_caracters_counter);
							sendChar('*');
							guarda_senha_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(menu_index == 3);
    1610:	09 f4       	brne	.+2      	; 0x1614 <main+0x43e>
    1612:	7a cf       	rjmp	.-268    	; 0x1508 <main+0x332>
    1614:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <currentTime>
					break;
			}
			
			if(currentTime[HOURS] > 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] > 14)){
    1618:	82 31       	cpi	r24, 0x12	; 18
    161a:	30 f4       	brcc	.+12     	; 0x1628 <main+0x452>
    161c:	81 31       	cpi	r24, 0x11	; 17
    161e:	09 f5       	brne	.+66     	; 0x1662 <main+0x48c>
    1620:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <currentTime+0x1>
    1624:	8f 30       	cpi	r24, 0x0F	; 15
    1626:	e8 f0       	brcs	.+58     	; 0x1662 <main+0x48c>
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	61 e0       	ldi	r22, 0x01	; 1
				urna_estado = ENCERRADA;
				sendString_setAdress("      URNA      ", 1, 1);
    162c:	84 e9       	ldi	r24, 0x94	; 148
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1634:	41 e0       	ldi	r20, 0x01	; 1
    1636:	62 e0       	ldi	r22, 0x02	; 2
				sendString_setAdress("    ENCERRADA   ", 2, 1);
    1638:	85 ea       	ldi	r24, 0xA5	; 165
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1640:	60 ed       	ldi	r22, 0xD0	; 208
    1642:	77 e0       	ldi	r23, 0x07	; 7
				delay_ms(2000);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    164c:	77 24       	eor	r7, r7
    164e:	73 94       	inc	r7
				encerrada_bloqueada = 1;
    1650:	91 2c       	mov	r9, r1
    1652:	dd 24       	eor	r13, r13
				menu_index = 1;
				option_menu_operacional = 0;
    1654:	d3 94       	inc	r13
				urna_estado = ENCERRADA;
				sendString_setAdress("      URNA      ", 1, 1);
				sendString_setAdress("    ENCERRADA   ", 2, 1);
				delay_ms(2000);
				encerrada_bloqueada = 1;
				menu_index = 1;
    1656:	e4 e0       	ldi	r30, 0x04	; 4
    1658:	cd 57       	subi	r28, 0x7D	; 125
					} while(menu_index == 3);
					break;
			}
			
			if(currentTime[HOURS] > 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] > 14)){
				urna_estado = ENCERRADA;
    165a:	dd 4f       	sbci	r29, 0xFD	; 253
    165c:	e8 83       	st	Y, r30
    165e:	c3 58       	subi	r28, 0x83	; 131
    1660:	d2 40       	sbci	r29, 0x02	; 2
    1662:	cd 57       	subi	r28, 0x7D	; 125
    1664:	dd 4f       	sbci	r29, 0xFD	; 253
	char consistencia[50] = {0};
	char validacao_relatorio;
	
	while (1){
		
		while(urna_estado == BLOQUEADA){
    1666:	f8 81       	ld	r31, Y
    1668:	c3 58       	subi	r28, 0x83	; 131
    166a:	d2 40       	sbci	r29, 0x02	; 2
    166c:	f1 30       	cpi	r31, 0x01	; 1
    166e:	09 f0       	breq	.+2      	; 0x1672 <main+0x49c>
    1670:	c7 c5       	rjmp	.+2958   	; 0x2200 <main+0x102a>
    1672:	ad ce       	rjmp	.-678    	; 0x13ce <main+0x1f8>
    1674:	8d 2d       	mov	r24, r13
    1676:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		while(urna_estado == OPERACIONAL){
			
			// Menu do sistema
			switch(menu_index){
    1678:	fc 01       	movw	r30, r24
    167a:	31 97       	sbiw	r30, 0x01	; 1
    167c:	e8 30       	cpi	r30, 0x08	; 8
    167e:	f1 05       	cpc	r31, r1
    1680:	08 f0       	brcs	.+2      	; 0x1684 <main+0x4ae>
    1682:	3c c1       	rjmp	.+632    	; 0x18fc <main+0x726>
    1684:	ec 5c       	subi	r30, 0xCC	; 204
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__tablejump2__>
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	61 e0       	ldi	r22, 0x01	; 1
				case 1:
					sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1690:	86 eb       	ldi	r24, 0xB6	; 182
    1692:	92 e0       	ldi	r25, 0x02	; 2
    1694:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    169e:	81 e4       	ldi	r24, 0x41	; 65
    16a0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16a4:	41 e0       	ldi	r20, 0x01	; 1
					sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    16a6:	62 e0       	ldi	r22, 0x02	; 2
    16a8:	85 ec       	ldi	r24, 0xC5	; 197
    16aa:	92 e0       	ldi	r25, 0x02	; 2
    16ac:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16b6:	82 e4       	ldi	r24, 0x42	; 66
    16b8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16bc:	3f d8       	rcall	.-3970   	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    16be:	82 34       	cpi	r24, 0x42	; 66
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <main+0x4f0>
					if(tecla == 'B'){ menu_index++;}
    16c2:	d3 94       	inc	r13
    16c4:	1b c1       	rjmp	.+566    	; 0x18fc <main+0x726>
    16c6:	81 34       	cpi	r24, 0x41	; 65
    16c8:	09 f0       	breq	.+2      	; 0x16cc <main+0x4f6>
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_index = 0;}
    16ca:	18 c1       	rjmp	.+560    	; 0x18fc <main+0x726>
    16cc:	ea c0       	rjmp	.+468    	; 0x18a2 <main+0x6cc>
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 2:
					sendString_setAdress("2.    Novo    ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    16d2:	84 ed       	ldi	r24, 0xD4	; 212
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16e0:	81 e4       	ldi	r24, 0x41	; 65
    16e2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16e6:	41 e0       	ldi	r20, 0x01	; 1
					sendString_setAdress("     Eleitor  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	83 ee       	ldi	r24, 0xE3	; 227
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16f8:	82 e4       	ldi	r24, 0x42	; 66
    16fa:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    16fe:	1e d8       	rcall	.-4036   	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1700:	82 34       	cpi	r24, 0x42	; 66
    1702:	11 f4       	brne	.+4      	; 0x1708 <main+0x532>
					if(tecla == 'B'){ menu_index++;}
    1704:	d3 94       	inc	r13
    1706:	fa c0       	rjmp	.+500    	; 0x18fc <main+0x726>
    1708:	81 34       	cpi	r24, 0x41	; 65
    170a:	09 f0       	breq	.+2      	; 0x170e <main+0x538>
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ELEITOR; menu_index = 0;}
    170c:	f7 c0       	rjmp	.+494    	; 0x18fc <main+0x726>
    170e:	cd c0       	rjmp	.+410    	; 0x18aa <main+0x6d4>
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 3:
					sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1714:	82 ef       	ldi	r24, 0xF2	; 242
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1722:	81 e4       	ldi	r24, 0x41	; 65
    1724:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	93 e0       	ldi	r25, 0x03	; 3
    1730:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    173a:	82 e4       	ldi	r24, 0x42	; 66
    173c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1740:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1744:	82 34       	cpi	r24, 0x42	; 66
    1746:	11 f4       	brne	.+4      	; 0x174c <main+0x576>
					if(tecla == 'B') { menu_index++;}
    1748:	d3 94       	inc	r13
    174a:	d8 c0       	rjmp	.+432    	; 0x18fc <main+0x726>
    174c:	81 34       	cpi	r24, 0x41	; 65
    174e:	09 f0       	breq	.+2      	; 0x1752 <main+0x57c>
					else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_index = 0;}
    1750:	d5 c0       	rjmp	.+426    	; 0x18fc <main+0x726>
    1752:	b0 c0       	rjmp	.+352    	; 0x18b4 <main+0x6de>
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 4:
					sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1758:	80 e1       	ldi	r24, 0x10	; 16
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1766:	81 e4       	ldi	r24, 0x41	; 65
    1768:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    1770:	8f e1       	ldi	r24, 0x1F	; 31
    1772:	93 e0       	ldi	r25, 0x03	; 3
    1774:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    177e:	82 e4       	ldi	r24, 0x42	; 66
    1780:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1784:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1788:	82 34       	cpi	r24, 0x42	; 66
    178a:	11 f4       	brne	.+4      	; 0x1790 <main+0x5ba>
					if(tecla == 'B') { menu_index++;}
    178c:	d3 94       	inc	r13
    178e:	b6 c0       	rjmp	.+364    	; 0x18fc <main+0x726>
    1790:	81 34       	cpi	r24, 0x41	; 65
    1792:	09 f0       	breq	.+2      	; 0x1796 <main+0x5c0>
					else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_index = 0;}
    1794:	b3 c0       	rjmp	.+358    	; 0x18fc <main+0x726>
    1796:	94 c0       	rjmp	.+296    	; 0x18c0 <main+0x6ea>
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 5:
					sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    179c:	8e e2       	ldi	r24, 0x2E	; 46
    179e:	93 e0       	ldi	r25, 0x03	; 3
    17a0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    17aa:	81 e4       	ldi	r24, 0x41	; 65
    17ac:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    17b4:	8d e3       	ldi	r24, 0x3D	; 61
    17b6:	93 e0       	ldi	r25, 0x03	; 3
    17b8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    17c2:	82 e4       	ldi	r24, 0x42	; 66
    17c4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    17c8:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    17cc:	82 34       	cpi	r24, 0x42	; 66
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <main+0x5fe>
					if(tecla == 'B') { menu_index++;}
    17d0:	d3 94       	inc	r13
    17d2:	94 c0       	rjmp	.+296    	; 0x18fc <main+0x726>
    17d4:	81 34       	cpi	r24, 0x41	; 65
    17d6:	09 f0       	breq	.+2      	; 0x17da <main+0x604>
					else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_index = 0;}
    17d8:	91 c0       	rjmp	.+290    	; 0x18fc <main+0x726>
    17da:	77 c0       	rjmp	.+238    	; 0x18ca <main+0x6f4>
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 6:
					sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    17e0:	8c e4       	ldi	r24, 0x4C	; 76
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    17ee:	81 e4       	ldi	r24, 0x41	; 65
    17f0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    17f8:	8b e5       	ldi	r24, 0x5B	; 91
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1806:	82 e4       	ldi	r24, 0x42	; 66
    1808:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    180c:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1810:	82 34       	cpi	r24, 0x42	; 66
    1812:	11 f4       	brne	.+4      	; 0x1818 <main+0x642>
					if(tecla == 'B') {menu_index++;}
    1814:	d3 94       	inc	r13
    1816:	72 c0       	rjmp	.+228    	; 0x18fc <main+0x726>
    1818:	81 34       	cpi	r24, 0x41	; 65
    181a:	09 f0       	breq	.+2      	; 0x181e <main+0x648>
					else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_index = 0;}
    181c:	6f c0       	rjmp	.+222    	; 0x18fc <main+0x726>
    181e:	5b c0       	rjmp	.+182    	; 0x18d6 <main+0x700>
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 7:
					sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1824:	8a e6       	ldi	r24, 0x6A	; 106
    1826:	93 e0       	ldi	r25, 0x03	; 3
    1828:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1832:	81 e4       	ldi	r24, 0x41	; 65
    1834:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    183c:	89 e7       	ldi	r24, 0x79	; 121
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    184a:	82 e4       	ldi	r24, 0x42	; 66
    184c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1850:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1854:	82 34       	cpi	r24, 0x42	; 66
    1856:	11 f4       	brne	.+4      	; 0x185c <main+0x686>
					if(tecla == 'B') {menu_index++;}
    1858:	d3 94       	inc	r13
    185a:	50 c0       	rjmp	.+160    	; 0x18fc <main+0x726>
    185c:	81 34       	cpi	r24, 0x41	; 65
    185e:	09 f0       	breq	.+2      	; 0x1862 <main+0x68c>
					else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_index = 0;}
    1860:	4d c0       	rjmp	.+154    	; 0x18fc <main+0x726>
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <main+0x70c>
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 8:
					sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1868:	88 e8       	ldi	r24, 0x88	; 136
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1876:	81 e4       	ldi	r24, 0x41	; 65
    1878:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    1880:	89 e7       	ldi	r24, 0x79	; 121
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    188e:	82 e4       	ldi	r24, 0x42	; 66
    1890:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1894:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1898:	82 34       	cpi	r24, 0x42	; 66
    189a:	49 f1       	breq	.+82     	; 0x18ee <main+0x718>
					if(tecla == 'B') {menu_index = 1;}
    189c:	81 34       	cpi	r24, 0x41	; 65
    189e:	71 f5       	brne	.+92     	; 0x18fc <main+0x726>
					else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_index = 0;}
    18a0:	29 c0       	rjmp	.+82     	; 0x18f4 <main+0x71e>
    18a2:	99 24       	eor	r9, r9
    18a4:	93 94       	inc	r9
				case 1:
					sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B'){ menu_index++;}
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_index = 0;}
    18a6:	d1 2c       	mov	r13, r1
    18a8:	29 c0       	rjmp	.+82     	; 0x18fc <main+0x726>
    18aa:	68 94       	set
    18ac:	99 24       	eor	r9, r9
				case 2:
					sendString_setAdress("2.    Novo    ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Eleitor  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B'){ menu_index++;}
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ELEITOR; menu_index = 0;}
    18ae:	91 f8       	bld	r9, 1
    18b0:	d1 2c       	mov	r13, r1
    18b2:	24 c0       	rjmp	.+72     	; 0x18fc <main+0x726>
    18b4:	0f 2e       	mov	r0, r31
    18b6:	f3 e0       	ldi	r31, 0x03	; 3
				case 3:
					sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_index = 0;}
    18b8:	9f 2e       	mov	r9, r31
    18ba:	f0 2d       	mov	r31, r0
    18bc:	d1 2c       	mov	r13, r1
    18be:	1e c0       	rjmp	.+60     	; 0x18fc <main+0x726>
    18c0:	68 94       	set
    18c2:	99 24       	eor	r9, r9
				case 4:
					sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_index = 0;}
    18c4:	92 f8       	bld	r9, 2
    18c6:	d1 2c       	mov	r13, r1
    18c8:	19 c0       	rjmp	.+50     	; 0x18fc <main+0x726>
    18ca:	0f 2e       	mov	r0, r31
    18cc:	f5 e0       	ldi	r31, 0x05	; 5
				case 5:
					sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_index = 0;}
    18ce:	9f 2e       	mov	r9, r31
    18d0:	f0 2d       	mov	r31, r0
    18d2:	d1 2c       	mov	r13, r1
    18d4:	13 c0       	rjmp	.+38     	; 0x18fc <main+0x726>
    18d6:	0f 2e       	mov	r0, r31
    18d8:	f6 e0       	ldi	r31, 0x06	; 6
				case 6:
					sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_index++;}
					else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_index = 0;}
    18da:	9f 2e       	mov	r9, r31
    18dc:	f0 2d       	mov	r31, r0
    18de:	d1 2c       	mov	r13, r1
    18e0:	0d c0       	rjmp	.+26     	; 0x18fc <main+0x726>
    18e2:	0f 2e       	mov	r0, r31
    18e4:	f7 e0       	ldi	r31, 0x07	; 7
				case 7:
					sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_index++;}
					else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_index = 0;}
    18e6:	9f 2e       	mov	r9, r31
    18e8:	f0 2d       	mov	r31, r0
    18ea:	d1 2c       	mov	r13, r1
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <main+0x726>
    18ee:	dd 24       	eor	r13, r13
    18f0:	d3 94       	inc	r13
					break;
				case 8:
					sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_index = 1;}
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <main+0x726>
    18f4:	68 94       	set
    18f6:	99 24       	eor	r9, r9
					else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_index = 0;}
    18f8:	93 f8       	bld	r9, 3
    18fa:	d1 2c       	mov	r13, r1
    18fc:	89 2d       	mov	r24, r9
    18fe:	90 e0       	ldi	r25, 0x00	; 0
				default:
					break;
			}
			
			// Opções do menu do sistema
			switch(option_menu_operacional){
    1900:	fc 01       	movw	r30, r24
    1902:	31 97       	sbiw	r30, 0x01	; 1
    1904:	e8 30       	cpi	r30, 0x08	; 8
    1906:	f1 05       	cpc	r31, r1
    1908:	08 f0       	brcs	.+2      	; 0x190c <main+0x736>
    190a:	3d c4       	rjmp	.+2170   	; 0x2186 <main+0xfb0>
    190c:	e4 5c       	subi	r30, 0xC4	; 196
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__tablejump2__>
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	61 e0       	ldi	r22, 0x01	; 1
				case OPTION_ESTADO:
					sendString_setAdress("OPERACIONAL   ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
    1918:	87 e9       	ldi	r24, 0x97	; 151
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1926:	81 e4       	ldi	r24, 0x41	; 65
    1928:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
    1930:	86 ea       	ldi	r24, 0xA6	; 166
    1932:	93 e0       	ldi	r25, 0x03	; 3
    1934:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    193e:	82 e4       	ldi	r24, 0x42	; 66
    1940:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1944:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    1948:	82 34       	cpi	r24, 0x42	; 66
    194a:	d9 f4       	brne	.+54     	; 0x1982 <main+0x7ac>
					if(tecla == 'B') {
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	61 e0       	ldi	r22, 0x01	; 1
						urna_estado = BLOQUEADA;
						menu_index = 1;
						sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    1950:	85 eb       	ldi	r24, 0xB5	; 181
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("      ...       ", 2, 1);
    195c:	86 ec       	ldi	r24, 0xC6	; 198
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1964:	68 ee       	ldi	r22, 0xE8	; 232
    1966:	73 e0       	ldi	r23, 0x03	; 3
						delay_ms(1000);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1970:	dd 24       	eor	r13, r13
    1972:	d3 94       	inc	r13
					sendString_setAdress("OPERACIONAL   ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
					sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {
						urna_estado = BLOQUEADA;
						menu_index = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	cd 57       	subi	r28, 0x7D	; 125
				case OPTION_ESTADO:
					sendString_setAdress("OPERACIONAL   ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
					sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {
						urna_estado = BLOQUEADA;
    1978:	dd 4f       	sbci	r29, 0xFD	; 253
    197a:	88 83       	st	Y, r24
    197c:	c3 58       	subi	r28, 0x83	; 131
    197e:	d2 40       	sbci	r29, 0x02	; 2
    1980:	02 c4       	rjmp	.+2052   	; 0x2186 <main+0xfb0>
    1982:	81 34       	cpi	r24, 0x41	; 65
    1984:	09 f0       	breq	.+2      	; 0x1988 <main+0x7b2>
						menu_index = 1;
						sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
						sendString_setAdress("      ...       ", 2, 1);
						delay_ms(1000);
					}
					else if(tecla == 'A') {option_menu_operacional = 0; menu_index = 1;}
    1986:	ff c3       	rjmp	.+2046   	; 0x2186 <main+0xfb0>
    1988:	f5 c3       	rjmp	.+2026   	; 0x2174 <main+0xf9e>
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	61 e0       	ldi	r22, 0x01	; 1
					break;
				
				// Novo eleitor
				case OPTION_ELEITOR:
					input_caracters_counter = 0;
					sendString_setAdress("Eleitor:        ", 1, 1);
    198e:	87 ed       	ldi	r24, 0xD7	; 215
    1990:	93 e0       	ldi	r25, 0x03	; 3
    1992:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    199a:	82 e5       	ldi	r24, 0x52	; 82
    199c:	92 e0       	ldi	r25, 0x02	; 2
    199e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    19a2:	82 e4       	ldi	r24, 0x42	; 66
    19a4:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 2);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RIGHT_OPTION_CHARACTER);
    19ae:	88 e4       	ldi	r24, 0x48	; 72
    19b0:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 8);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RETURN_CHARACTER);
    19ba:	8e e4       	ldi	r24, 0x4E	; 78
    19bc:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 14);
    19c0:	8f e7       	ldi	r24, 0x7F	; 127
    19c2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(LEFT_ARROW_CHARACTER);
    19c6:	88 e0       	ldi	r24, 0x08	; 8
    19c8:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(8);
    19cc:	00 e0       	ldi	r16, 0x00	; 0
    19ce:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					do{
						tecla = get_tecla();
    19d2:	18 2f       	mov	r17, r24
    19d4:	81 34       	cpi	r24, 0x41	; 65
    19d6:	09 f0       	breq	.+2      	; 0x19da <main+0x804>
						// Se a tecla for A, valida o eleitor
						if(tecla == 'A' && input_caracters_counter == 5){
    19d8:	80 c0       	rjmp	.+256    	; 0x1ada <main+0x904>
    19da:	05 30       	cpi	r16, 0x05	; 5
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <main+0x80a>
    19de:	7d c0       	rjmp	.+250    	; 0x1ada <main+0x904>
    19e0:	be 01       	movw	r22, r28
    19e2:	6e 5d       	subi	r22, 0xDE	; 222
							
							// Obtem validação do eleitor
							char validacao = valida_eleitor(numero_eleitor, nome_eleitor);
    19e4:	7d 4f       	sbci	r23, 0xFD	; 253
    19e6:	ce 01       	movw	r24, r28
    19e8:	83 5e       	subi	r24, 0xE3	; 227
    19ea:	9d 4f       	sbci	r25, 0xFD	; 253
    19ec:	0e 94 b0 03 	call	0x760	; 0x760 <valida_eleitor>
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <main+0x820>
							
							// Se o eleitor for valido, exibe no display o nome e aguarda confirmação
							if(validacao == ELEITOR_VALIDO){
    19f4:	56 c0       	rjmp	.+172    	; 0x1aa2 <main+0x8cc>
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	61 e0       	ldi	r22, 0x01	; 1
								sendString_setAdress(nome_eleitor, 1, 1);
    19fa:	ce 01       	movw	r24, r28
    19fc:	8e 5d       	subi	r24, 0xDE	; 222
    19fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1a00:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("Confirma?  ", 2, 1);
    1a08:	83 ef       	ldi	r24, 0xF3	; 243
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
    1a16:	83 ec       	ldi	r24, 0xC3	; 195
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	0e 94 23 03 	call	0x646	; 0x646 <sendString>
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar(RETURN_CHARACTER); sendChar('B');
    1a24:	82 e4       	ldi	r24, 0x42	; 66
    1a26:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1a2a:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
								tecla = getCharacter_AB();
    1a2e:	18 2f       	mov	r17, r24
    1a30:	81 34       	cpi	r24, 0x41	; 65
    1a32:	99 f5       	brne	.+102    	; 0x1a9a <main+0x8c4>
								
								// Se a tecla for 'A', confirma o eleitor, guarda nome e numero e inicia processo de votacao
								if(tecla == 'A'){					
    1a34:	9e 01       	movw	r18, r28
    1a36:	2f 5e       	subi	r18, 0xEF	; 239
									// Obtem validacao da votacao
									char validacao_votacao = votacao(&depFederal, &partido, &senador, &presidente);
    1a38:	3d 4f       	sbci	r19, 0xFD	; 253
    1a3a:	ae 01       	movw	r20, r28
    1a3c:	4c 5e       	subi	r20, 0xEC	; 236
    1a3e:	5d 4f       	sbci	r21, 0xFD	; 253
    1a40:	be 01       	movw	r22, r28
    1a42:	66 5e       	subi	r22, 0xE6	; 230
    1a44:	7d 4f       	sbci	r23, 0xFD	; 253
    1a46:	ce 01       	movw	r24, r28
    1a48:	89 5e       	subi	r24, 0xE9	; 233
    1a4a:	9d 4f       	sbci	r25, 0xFD	; 253
    1a4c:	b4 d8       	rcall	.-3736   	; 0xbb6 <votacao>
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	69 f4       	brne	.+26     	; 0x1a6c <main+0x896>
									
									// Se o tempo de 2 minutos foi esgotado
									if(validacao_votacao == TEMPO_ESGOTADO){
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	61 e0       	ldi	r22, 0x01	; 1
										sendString_setAdress("      TEMPO     ", 1, 1);
    1a56:	88 ee       	ldi	r24, 0xE8	; 232
    1a58:	93 e0       	ldi	r25, 0x03	; 3
    1a5a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	62 e0       	ldi	r22, 0x02	; 2
										sendString_setAdress("     ESGOTADO   ", 2, 1);
    1a62:	89 ef       	ldi	r24, 0xF9	; 249
    1a64:	93 e0       	ldi	r25, 0x03	; 3
    1a66:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1a6a:	ff cf       	rjmp	.-2      	; 0x1a6a <main+0x894>
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <main+0x89c>
										menu_index = 2;
										while(1);
									}
									
									// Se a votacao foi concluida com sucesso--------------------------- CONCLUIR AQUI
									else if(validacao_votacao == VOTACAO_CONCLUIDA){
    1a70:	6b c0       	rjmp	.+214    	; 0x1b48 <main+0x972>
    1a72:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <__data_end>
										num_eleitores++;
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <__data_end>
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
										sendString_setAdress("       FIM      ", 1, 1);
    1a80:	8a e0       	ldi	r24, 0x0A	; 10
    1a82:	94 e0       	ldi	r25, 0x04	; 4
    1a84:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	62 e0       	ldi	r22, 0x02	; 2
										sendString_setAdress("                ", 2, 1);
    1a8c:	82 ee       	ldi	r24, 0xE2	; 226
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1a94:	0e 94 82 00 	call	0x104	; 0x104 <votingEndSong>
										votingEndSong();
    1a98:	57 c0       	rjmp	.+174    	; 0x1b48 <main+0x972>
    1a9a:	82 34       	cpi	r24, 0x42	; 66
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <main+0x8ca>
										while(1);
									}*/
								}
								
								// Se a tecla for 'B', volta ao menu anterior
								else if(tecla == 'B'){
    1a9e:	54 c0       	rjmp	.+168    	; 0x1b48 <main+0x972>
    1aa0:	4a c0       	rjmp	.+148    	; 0x1b36 <main+0x960>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	51 c0       	rjmp	.+162    	; 0x1b48 <main+0x972>
								}
							
							}
							
							// Se o eleitor for invalido, informa no display e aguarda retorno ao menu
							else if(validacao == ELEITOR_INVALIDO){
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
								sendString_setAdress("ELEITOR INVALIDO", 1, 1);
    1aaa:	8b e1       	ldi	r24, 0x1B	; 27
    1aac:	94 e0       	ldi	r25, 0x04	; 4
    1aae:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("              ", 2, 1);
    1ab6:	84 ee       	ldi	r24, 0xE4	; 228
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar(RETURN_CHARACTER); sendChar('B');
    1ac4:	82 e4       	ldi	r24, 0x42	; 66
    1ac6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1aca:	0e 94 ab 03 	call	0x756	; 0x756 <getCharacter_B>
								tecla = getCharacter_B();
    1ace:	18 2f       	mov	r17, r24
    1ad0:	91 2c       	mov	r9, r1
    1ad2:	68 94       	set
								option_menu_operacional = 0;
    1ad4:	dd 24       	eor	r13, r13
								menu_index = 2;
    1ad6:	d1 f8       	bld	r13, 1
    1ad8:	37 c0       	rjmp	.+110    	; 0x1b48 <main+0x972>
    1ada:	12 34       	cpi	r17, 0x42	; 66
    1adc:	89 f1       	breq	.+98     	; 0x1b40 <main+0x96a>
								menu_index = 2;
							}
						}
						
						// Se a tecla for B, volta para o menu
						else if(tecla == 'B'){
    1ade:	13 34       	cpi	r17, 0x43	; 67
    1ae0:	71 f4       	brne	.+28     	; 0x1afe <main+0x928>
							option_menu_operacional = 0;
							menu_index = 2;
						}
						// Se a tecla for C, corrige último caractere
						else if(tecla == 'C' && input_caracters_counter > 0){
    1ae2:	00 23       	and	r16, r16
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <main+0x928>
    1ae6:	ff 24       	eor	r15, r15
    1ae8:	fa 94       	dec	r15
							input_caracters_counter--;
    1aea:	f0 0e       	add	r15, r16
    1aec:	87 e0       	ldi	r24, 0x07	; 7
    1aee:	80 0f       	add	r24, r16
							setDdRamAddress(8 + input_caracters_counter);
    1af0:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1af4:	80 e2       	ldi	r24, 0x20	; 32
    1af6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    1afa:	0f 2d       	mov	r16, r15
    1afc:	25 c0       	rjmp	.+74     	; 0x1b48 <main+0x972>
							option_menu_operacional = 0;
							menu_index = 2;
						}
						// Se a tecla for C, corrige último caractere
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    1afe:	05 30       	cpi	r16, 0x05	; 5
							setDdRamAddress(8 + input_caracters_counter);
							sendChar(' ');
    1b00:	18 f5       	brcc	.+70     	; 0x1b48 <main+0x972>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    1b02:	1a 32       	cpi	r17, 0x2A	; 42
    1b04:	09 f1       	breq	.+66     	; 0x1b48 <main+0x972>
    1b06:	14 34       	cpi	r17, 0x44	; 68
    1b08:	f9 f0       	breq	.+62     	; 0x1b48 <main+0x972>
    1b0a:	13 32       	cpi	r17, 0x23	; 35
    1b0c:	e9 f0       	breq	.+58     	; 0x1b48 <main+0x972>
    1b0e:	11 34       	cpi	r17, 0x41	; 65
    1b10:	d9 f0       	breq	.+54     	; 0x1b48 <main+0x972>
    1b12:	13 34       	cpi	r17, 0x43	; 67
    1b14:	c9 f0       	breq	.+50     	; 0x1b48 <main+0x972>
    1b16:	88 e0       	ldi	r24, 0x08	; 8
    1b18:	80 0f       	add	r24, r16
							setDdRamAddress(8 + input_caracters_counter);
    1b1a:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1b1e:	81 2f       	mov	r24, r17
    1b20:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(tecla);
    1b24:	ed e1       	ldi	r30, 0x1D	; 29
    1b26:	f2 e0       	ldi	r31, 0x02	; 2
							numero_eleitor[input_caracters_counter] = tecla;
    1b28:	ec 0f       	add	r30, r28
    1b2a:	fd 1f       	adc	r31, r29
    1b2c:	e0 0f       	add	r30, r16
    1b2e:	f1 1d       	adc	r31, r1
    1b30:	10 83       	st	Z, r17
    1b32:	0f 5f       	subi	r16, 0xFF	; 255
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <main+0x972>
							input_caracters_counter++;
    1b36:	91 2c       	mov	r9, r1
    1b38:	68 94       	set
									}*/
								}
								
								// Se a tecla for 'B', volta ao menu anterior
								else if(tecla == 'B'){
									option_menu_operacional = 0;
    1b3a:	dd 24       	eor	r13, r13
									menu_index = 2;
    1b3c:	d1 f8       	bld	r13, 1
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <main+0x972>
    1b40:	91 2c       	mov	r9, r1
    1b42:	68 94       	set
							}
						}
						
						// Se a tecla for B, volta para o menu
						else if(tecla == 'B'){
							option_menu_operacional = 0;
    1b44:	dd 24       	eor	r13, r13
							menu_index = 2;
    1b46:	d1 f8       	bld	r13, 1
    1b48:	12 34       	cpi	r17, 0x42	; 66
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <main+0x978>
							setDdRamAddress(8 + input_caracters_counter);
							sendChar(tecla);
							numero_eleitor[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(tecla != 'B');
    1b4c:	40 cf       	rjmp	.-384    	; 0x19ce <main+0x7f8>
    1b4e:	1b c3       	rjmp	.+1590   	; 0x2186 <main+0xfb0>
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	61 e0       	ldi	r22, 0x01	; 1
					break;
				
				case OPTION_CONSULTA_HORA:
					sendString_setAdress("HORA ATUAL:     ", 1, 1);
    1b54:	8c e2       	ldi	r24, 0x2C	; 44
    1b56:	94 e0       	ldi	r25, 0x04	; 4
    1b58:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("              ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    1b60:	84 ee       	ldi	r24, 0xE4	; 228
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1b6e:	82 e4       	ldi	r24, 0x42	; 66
    1b70:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1b74:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <exibe_hora_display>
					exibe_hora_display();
    1b78:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					if(get_tecla() == 'B'){
    1b7c:	82 34       	cpi	r24, 0x42	; 66
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <main+0x9ac>
    1b80:	02 c3       	rjmp	.+1540   	; 0x2186 <main+0xfb0>
    1b82:	0e 94 66 1d 	call	0x3acc	; 0x3acc <apaga_hora_display>
						apaga_hora_display();
    1b86:	91 2c       	mov	r9, r1
    1b88:	0f 2e       	mov	r0, r31
						option_menu_operacional = 0;
    1b8a:	f3 e0       	ldi	r31, 0x03	; 3
						menu_index = 3;
    1b8c:	df 2e       	mov	r13, r31
    1b8e:	f0 2d       	mov	r31, r0
    1b90:	fa c2       	rjmp	.+1524   	; 0x2186 <main+0xfb0>
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	61 e0       	ldi	r22, 0x01	; 1
					}
					break;
				
				case OPTION_TROCA_HORA:
					input_caracters_counter = 0;
					sendString_setAdress("INSERIR HORARIO ", 1, 1);
    1b96:	8d e3       	ldi	r24, 0x3D	; 61
    1b98:	94 e0       	ldi	r25, 0x04	; 4
    1b9a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("<  :  > ", 2, 1); sendChar(LEFT_ARROW_CHARACTER); sendChar('C'); sendChar(' '); sendChar(RETURN_CHARACTER); sendChar('B'); sendChar(' '); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1ba2:	8e e4       	ldi	r24, 0x4E	; 78
    1ba4:	94 e0       	ldi	r25, 0x04	; 4
    1ba6:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1baa:	8f e7       	ldi	r24, 0x7F	; 127
    1bac:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bb0:	83 e4       	ldi	r24, 0x43	; 67
    1bb2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bb6:	80 e2       	ldi	r24, 0x20	; 32
    1bb8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bc2:	82 e4       	ldi	r24, 0x42	; 66
    1bc4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bc8:	80 e2       	ldi	r24, 0x20	; 32
    1bca:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bd4:	81 e4       	ldi	r24, 0x41	; 65
    1bd6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1bda:	c7 58       	subi	r28, 0x87	; 135
    1bdc:	dd 4f       	sbci	r29, 0xFD	; 253
					
					char guarda_novo_horario[4] = {0};
    1bde:	18 82       	st	Y, r1
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	1a 82       	std	Y+2, r1	; 0x02
    1be4:	1b 82       	std	Y+3, r1	; 0x03
    1be6:	c9 57       	subi	r28, 0x79	; 121
    1be8:	d2 40       	sbci	r29, 0x02	; 2
    1bea:	00 e0       	ldi	r16, 0x00	; 0
    1bec:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					do{
						tecla = get_tecla();
    1bf0:	18 2f       	mov	r17, r24
    1bf2:	81 34       	cpi	r24, 0x41	; 65
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <main+0xa22>
						// se tecla A e horário com 4 dígitos, prossegue para mudar hora
						if(tecla == 'A' && input_caracters_counter == 4){
    1bf6:	55 c0       	rjmp	.+170    	; 0x1ca2 <main+0xacc>
    1bf8:	04 30       	cpi	r16, 0x04	; 4
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <main+0xa28>
    1bfc:	52 c0       	rjmp	.+164    	; 0x1ca2 <main+0xacc>
    1bfe:	c5 58       	subi	r28, 0x85	; 133
    1c00:	dd 4f       	sbci	r29, 0xFD	; 253
							// avisa se conseguiu alterar horário, e se é válido ou não
							if(!setTime(((guarda_novo_horario[0] - 48) * 10) + (guarda_novo_horario[1] - 48), ((guarda_novo_horario[2] - 48) * 10) + (guarda_novo_horario[3] - 48))){
    1c02:	48 81       	ld	r20, Y
    1c04:	cb 57       	subi	r28, 0x7B	; 123
    1c06:	d2 40       	sbci	r29, 0x02	; 2
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	40 53       	subi	r20, 0x30	; 48
    1c0c:	51 09       	sbc	r21, r1
    1c0e:	c4 58       	subi	r28, 0x84	; 132
    1c10:	dd 4f       	sbci	r29, 0xFD	; 253
    1c12:	98 81       	ld	r25, Y
    1c14:	cc 57       	subi	r28, 0x7C	; 124
    1c16:	d2 40       	sbci	r29, 0x02	; 2
    1c18:	c7 58       	subi	r28, 0x87	; 135
    1c1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1c1c:	28 81       	ld	r18, Y
    1c1e:	c9 57       	subi	r28, 0x79	; 121
    1c20:	d2 40       	sbci	r29, 0x02	; 2
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	20 53       	subi	r18, 0x30	; 48
    1c26:	31 09       	sbc	r19, r1
    1c28:	c6 58       	subi	r28, 0x86	; 134
    1c2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1c2c:	38 81       	ld	r19, Y
    1c2e:	ca 57       	subi	r28, 0x7A	; 122
    1c30:	d2 40       	sbci	r29, 0x02	; 2
    1c32:	44 0f       	add	r20, r20
    1c34:	64 2f       	mov	r22, r20
    1c36:	66 0f       	add	r22, r22
    1c38:	66 0f       	add	r22, r22
    1c3a:	46 0f       	add	r20, r22
    1c3c:	64 2f       	mov	r22, r20
    1c3e:	69 0f       	add	r22, r25
    1c40:	60 53       	subi	r22, 0x30	; 48
    1c42:	22 0f       	add	r18, r18
    1c44:	82 2f       	mov	r24, r18
    1c46:	88 0f       	add	r24, r24
    1c48:	88 0f       	add	r24, r24
    1c4a:	28 0f       	add	r18, r24
    1c4c:	82 2f       	mov	r24, r18
    1c4e:	83 0f       	add	r24, r19
    1c50:	80 53       	subi	r24, 0x30	; 48
    1c52:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <setTime>
    1c56:	81 11       	cpse	r24, r1
    1c58:	0d c0       	rjmp	.+26     	; 0x1c74 <main+0xa9e>
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
								sendString_setAdress("HORARIO ALTERADO", 1, 1);
    1c5e:	87 e5       	ldi	r24, 0x57	; 87
    1c60:	94 e0       	ldi	r25, 0x04	; 4
    1c62:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("  COM SUCESSO   ", 2, 1);
    1c6a:	88 e6       	ldi	r24, 0x68	; 104
    1c6c:	94 e0       	ldi	r25, 0x04	; 4
    1c6e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1c72:	0c c0       	rjmp	.+24     	; 0x1c8c <main+0xab6>
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	61 e0       	ldi	r22, 0x01	; 1
							}
							else{
								sendString_setAdress("VALOR INVALIDO, ", 1, 1);
    1c78:	89 e7       	ldi	r24, 0x79	; 121
    1c7a:	94 e0       	ldi	r25, 0x04	; 4
    1c7c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("TENTE NOVAMENTE ", 2, 1);
    1c84:	8a e8       	ldi	r24, 0x8A	; 138
    1c86:	94 e0       	ldi	r25, 0x04	; 4
    1c88:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1c8c:	60 ed       	ldi	r22, 0xD0	; 208
    1c8e:	77 e0       	ldi	r23, 0x07	; 7
							}
							delay_ms(2000);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1c98:	91 2c       	mov	r9, r1
    1c9a:	68 94       	set
							menu_index = 4;
							option_menu_operacional = 0;
    1c9c:	dd 24       	eor	r13, r13
							else{
								sendString_setAdress("VALOR INVALIDO, ", 1, 1);
								sendString_setAdress("TENTE NOVAMENTE ", 2, 1);
							}
							delay_ms(2000);
							menu_index = 4;
    1c9e:	d2 f8       	bld	r13, 2
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <main+0xb4a>
    1ca2:	12 34       	cpi	r17, 0x42	; 66
							option_menu_operacional = 0;
    1ca4:	c9 f1       	breq	.+114    	; 0x1d18 <main+0xb42>
						}
						// se a tecla for B, volta para o menu
						else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
    1ca6:	13 34       	cpi	r17, 0x43	; 67
    1ca8:	a1 f4       	brne	.+40     	; 0x1cd2 <main+0xafc>
						// se a tecla for C, apaga o último caractere
						else if(tecla == 'C' && input_caracters_counter > 0){
    1caa:	00 23       	and	r16, r16
    1cac:	91 f0       	breq	.+36     	; 0x1cd2 <main+0xafc>
    1cae:	1f ef       	ldi	r17, 0xFF	; 255
    1cb0:	10 0f       	add	r17, r16
							input_caracters_counter--;
    1cb2:	12 30       	cpi	r17, 0x02	; 2
    1cb4:	28 f4       	brcc	.+10     	; 0x1cc0 <main+0xaea>
							if(input_caracters_counter < 2){
    1cb6:	80 e4       	ldi	r24, 0x40	; 64
    1cb8:	80 0f       	add	r24, r16
								setDdRamAddress(0x41 + input_caracters_counter);
    1cba:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <main+0xaf2>
    1cc0:	81 e4       	ldi	r24, 0x41	; 65
    1cc2:	80 0f       	add	r24, r16
							}
							else{
								setDdRamAddress(0x42 + input_caracters_counter);								
    1cc4:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							}
							sendChar(' ');
    1cce:	01 2f       	mov	r16, r17
    1cd0:	27 c0       	rjmp	.+78     	; 0x1d20 <main+0xb4a>
						}
						// se a tecla for B, volta para o menu
						else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
						// se a tecla for C, apaga o último caractere
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    1cd2:	04 30       	cpi	r16, 0x04	; 4
								setDdRamAddress(0x41 + input_caracters_counter);
							}
							else{
								setDdRamAddress(0x42 + input_caracters_counter);								
							}
							sendChar(' ');
    1cd4:	28 f5       	brcc	.+74     	; 0x1d20 <main+0xb4a>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 4 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    1cd6:	1a 32       	cpi	r17, 0x2A	; 42
    1cd8:	19 f1       	breq	.+70     	; 0x1d20 <main+0xb4a>
    1cda:	14 34       	cpi	r17, 0x44	; 68
    1cdc:	09 f1       	breq	.+66     	; 0x1d20 <main+0xb4a>
    1cde:	13 32       	cpi	r17, 0x23	; 35
    1ce0:	f9 f0       	breq	.+62     	; 0x1d20 <main+0xb4a>
    1ce2:	11 34       	cpi	r17, 0x41	; 65
    1ce4:	e9 f0       	breq	.+58     	; 0x1d20 <main+0xb4a>
    1ce6:	13 34       	cpi	r17, 0x43	; 67
    1ce8:	d9 f0       	breq	.+54     	; 0x1d20 <main+0xb4a>
    1cea:	02 30       	cpi	r16, 0x02	; 2
    1cec:	28 f4       	brcc	.+10     	; 0x1cf8 <main+0xb22>
							if(input_caracters_counter < 2){
    1cee:	81 e4       	ldi	r24, 0x41	; 65
    1cf0:	80 0f       	add	r24, r16
								setDdRamAddress(0x41 + input_caracters_counter);
    1cf2:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <main+0xb2a>
    1cf8:	82 e4       	ldi	r24, 0x42	; 66
    1cfa:	80 0f       	add	r24, r16
							}
							else{
								setDdRamAddress(0x42 + input_caracters_counter);
    1cfc:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1d00:	81 2f       	mov	r24, r17
    1d02:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							}
							sendChar(tecla);
    1d06:	e9 e7       	ldi	r30, 0x79	; 121
    1d08:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_novo_horario[input_caracters_counter] = tecla;
    1d0a:	ec 0f       	add	r30, r28
    1d0c:	fd 1f       	adc	r31, r29
    1d0e:	e0 0f       	add	r30, r16
    1d10:	f1 1d       	adc	r31, r1
    1d12:	10 83       	st	Z, r17
    1d14:	0f 5f       	subi	r16, 0xFF	; 255
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <main+0xb4a>
							input_caracters_counter++;
    1d18:	91 2c       	mov	r9, r1
    1d1a:	68 94       	set
							delay_ms(2000);
							menu_index = 4;
							option_menu_operacional = 0;
						}
						// se a tecla for B, volta para o menu
						else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
    1d1c:	dd 24       	eor	r13, r13
    1d1e:	d2 f8       	bld	r13, 2
    1d20:	94 e0       	ldi	r25, 0x04	; 4
    1d22:	99 16       	cp	r9, r25
							}
							sendChar(tecla);
							guarda_novo_horario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(option_menu_operacional == OPTION_TROCA_HORA);
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <main+0xb52>
    1d26:	62 cf       	rjmp	.-316    	; 0x1bec <main+0xa16>
    1d28:	2e c2       	rjmp	.+1116   	; 0x2186 <main+0xfb0>
    1d2a:	85 e5       	ldi	r24, 0x55	; 85
    1d2c:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
					
					break;
				
				case OPTION_VERIFICA_CORRESPONDENCIA:
					do{
						sendSerialChar('U'); sendSerialChar('V');
    1d30:	86 e5       	ldi	r24, 0x56	; 86
    1d32:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    1d36:	04 e9       	ldi	r16, 0x94	; 148
    1d38:	15 e0       	ldi	r17, 0x05	; 5
						sendSerialChar(currentTime[HOURS]); sendSerialChar(currentTime[MINUTES]); sendSerialChar(num_eleitores);
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	8c 91       	ld	r24, X
    1d3e:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    1d42:	f8 01       	movw	r30, r16
    1d44:	81 81       	ldd	r24, Z+1	; 0x01
    1d46:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    1d4a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <__data_end>
    1d4e:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    1d52:	ce 01       	movw	r24, r28
    1d54:	89 5b       	subi	r24, 0xB9	; 185
						getSerialMessage(consistencia);
    1d56:	9d 4f       	sbci	r25, 0xFD	; 253
    1d58:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
    1d5c:	c9 5b       	subi	r28, 0xB9	; 185
    1d5e:	dd 4f       	sbci	r29, 0xFD	; 253
						if(consistencia[0] == 'M' && consistencia[1] == 'V'){
    1d60:	88 81       	ld	r24, Y
    1d62:	c7 54       	subi	r28, 0x47	; 71
    1d64:	d2 40       	sbci	r29, 0x02	; 2
    1d66:	8d 34       	cpi	r24, 0x4D	; 77
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <main+0xb96>
    1d6a:	92 c0       	rjmp	.+292    	; 0x1e90 <main+0xcba>
    1d6c:	c8 5b       	subi	r28, 0xB8	; 184
    1d6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d70:	88 81       	ld	r24, Y
    1d72:	c8 54       	subi	r28, 0x48	; 72
    1d74:	d2 40       	sbci	r29, 0x02	; 2
    1d76:	86 35       	cpi	r24, 0x56	; 86
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <main+0xba6>
    1d7a:	8a c0       	rjmp	.+276    	; 0x1e90 <main+0xcba>
    1d7c:	c7 5b       	subi	r28, 0xB7	; 183
    1d7e:	dd 4f       	sbci	r29, 0xFD	; 253
							if(consistencia[2] == 'O'){
    1d80:	88 81       	ld	r24, Y
    1d82:	c9 54       	subi	r28, 0x49	; 73
    1d84:	d2 40       	sbci	r29, 0x02	; 2
    1d86:	8f 34       	cpi	r24, 0x4F	; 79
    1d88:	e1 f4       	brne	.+56     	; 0x1dc2 <main+0xbec>
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
								verificacao = 3;
								sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    1d8e:	8b e9       	ldi	r24, 0x9B	; 155
    1d90:	94 e0       	ldi	r25, 0x04	; 4
    1d92:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("       OK       ", 2, 1);
    1d9a:	8c ea       	ldi	r24, 0xAC	; 172
    1d9c:	94 e0       	ldi	r25, 0x04	; 4
    1d9e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1da2:	68 ee       	ldi	r22, 0xE8	; 232
    1da4:	73 e0       	ldi	r23, 0x03	; 3
								delay_ms(1000);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1dae:	0f 2e       	mov	r0, r31
    1db0:	f3 e0       	ldi	r31, 0x03	; 3
						sendSerialChar('U'); sendSerialChar('V');
						sendSerialChar(currentTime[HOURS]); sendSerialChar(currentTime[MINUTES]); sendSerialChar(num_eleitores);
						getSerialMessage(consistencia);
						if(consistencia[0] == 'M' && consistencia[1] == 'V'){
							if(consistencia[2] == 'O'){
								verificacao = 3;
    1db2:	8f 2e       	mov	r8, r31
    1db4:	f0 2d       	mov	r31, r0
    1db6:	91 2c       	mov	r9, r1
    1db8:	0f 2e       	mov	r0, r31
								sendString_setAdress("  CONSISTENCIA  ", 1, 1);
								sendString_setAdress("       OK       ", 2, 1);
								delay_ms(1000);
								option_menu_operacional = 0;
    1dba:	f5 e0       	ldi	r31, 0x05	; 5
								menu_index = 5;
    1dbc:	df 2e       	mov	r13, r31
    1dbe:	f0 2d       	mov	r31, r0
    1dc0:	67 c0       	rjmp	.+206    	; 0x1e90 <main+0xcba>
    1dc2:	89 34       	cpi	r24, 0x49	; 73
    1dc4:	91 f5       	brne	.+100    	; 0x1e2a <main+0xc54>
							}
							else if(consistencia[2] == 'I'){
    1dc6:	83 94       	inc	r8
    1dc8:	f3 e0       	ldi	r31, 0x03	; 3
								verificacao++;
    1dca:	8f 12       	cpse	r8, r31
								if(verificacao == 3){
    1dcc:	61 c0       	rjmp	.+194    	; 0x1e90 <main+0xcba>
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
									urna_estado = BLOQUEADA;
									sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    1dd2:	8b e9       	ldi	r24, 0x9B	; 155
    1dd4:	94 e0       	ldi	r25, 0x04	; 4
    1dd6:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("     FALHOU     ", 2, 1);
    1dde:	8d eb       	ldi	r24, 0xBD	; 189
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1de6:	68 ee       	ldi	r22, 0xE8	; 232
    1de8:	73 e0       	ldi	r23, 0x03	; 3
									delay_ms(1000);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	61 e0       	ldi	r22, 0x01	; 1
									sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    1df6:	85 eb       	ldi	r24, 0xB5	; 181
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("      ...       ", 2, 1);
    1e02:	86 ec       	ldi	r24, 0xC6	; 198
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1e0a:	68 ee       	ldi	r22, 0xE8	; 232
    1e0c:	73 e0       	ldi	r23, 0x03	; 3
									delay_ms(1000);
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1e16:	91 2c       	mov	r9, r1
    1e18:	dd 24       	eor	r13, r13
									option_menu_operacional = 0;
    1e1a:	d3 94       	inc	r13
									menu_index = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	cd 57       	subi	r28, 0x7D	; 125
								menu_index = 5;
							}
							else if(consistencia[2] == 'I'){
								verificacao++;
								if(verificacao == 3){
									urna_estado = BLOQUEADA;
    1e20:	dd 4f       	sbci	r29, 0xFD	; 253
    1e22:	88 83       	st	Y, r24
    1e24:	c3 58       	subi	r28, 0x83	; 131
    1e26:	d2 40       	sbci	r29, 0x02	; 2
    1e28:	33 c0       	rjmp	.+102    	; 0x1e90 <main+0xcba>
    1e2a:	88 35       	cpi	r24, 0x58	; 88
    1e2c:	89 f5       	brne	.+98     	; 0x1e90 <main+0xcba>
									option_menu_operacional = 0;
									menu_index = 1;
								}
								
							}
							else if(consistencia[2] == 'X'){
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	61 e0       	ldi	r22, 0x01	; 1
								verificacao = 3;
								urna_estado = BLOQUEADA;
								sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    1e32:	8b e9       	ldi	r24, 0x9B	; 155
    1e34:	94 e0       	ldi	r25, 0x04	; 4
    1e36:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("     FALHOU     ", 2, 1);
    1e3e:	8d eb       	ldi	r24, 0xBD	; 189
    1e40:	94 e0       	ldi	r25, 0x04	; 4
    1e42:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1e46:	68 ee       	ldi	r22, 0xE8	; 232
    1e48:	73 e0       	ldi	r23, 0x03	; 3
								delay_ms(1000);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	61 e0       	ldi	r22, 0x01	; 1
								sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    1e56:	85 eb       	ldi	r24, 0xB5	; 181
    1e58:	93 e0       	ldi	r25, 0x03	; 3
    1e5a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("      ...       ", 2, 1);
    1e62:	86 ec       	ldi	r24, 0xC6	; 198
    1e64:	93 e0       	ldi	r25, 0x03	; 3
    1e66:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1e6a:	68 ee       	ldi	r22, 0xE8	; 232
    1e6c:	73 e0       	ldi	r23, 0x03	; 3
								delay_ms(1000);
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1e76:	0f 2e       	mov	r0, r31
    1e78:	f3 e0       	ldi	r31, 0x03	; 3
									menu_index = 1;
								}
								
							}
							else if(consistencia[2] == 'X'){
								verificacao = 3;
    1e7a:	8f 2e       	mov	r8, r31
    1e7c:	f0 2d       	mov	r31, r0
    1e7e:	91 2c       	mov	r9, r1
    1e80:	dd 24       	eor	r13, r13
								sendString_setAdress("     FALHOU     ", 2, 1);
								delay_ms(1000);
								sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
								sendString_setAdress("      ...       ", 2, 1);
								delay_ms(1000);
								option_menu_operacional = 0;
    1e82:	d3 94       	inc	r13
								menu_index = 1;
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	cd 57       	subi	r28, 0x7D	; 125
								}
								
							}
							else if(consistencia[2] == 'X'){
								verificacao = 3;
								urna_estado = BLOQUEADA;
    1e88:	dd 4f       	sbci	r29, 0xFD	; 253
    1e8a:	98 83       	st	Y, r25
    1e8c:	c3 58       	subi	r28, 0x83	; 131
    1e8e:	d2 40       	sbci	r29, 0x02	; 2
    1e90:	a2 e0       	ldi	r26, 0x02	; 2
    1e92:	a8 15       	cp	r26, r8
								delay_ms(1000);
								option_menu_operacional = 0;
								menu_index = 1;
							}
						}
					} while(verificacao < 3);
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <main+0xcc2>
    1e96:	49 cf       	rjmp	.-366    	; 0x1d2a <main+0xb54>
    1e98:	76 c1       	rjmp	.+748    	; 0x2186 <main+0xfb0>
    1e9a:	cf 5e       	subi	r28, 0xEF	; 239
    1e9c:	dd 4f       	sbci	r29, 0xFD	; 253
					break;
				
				case OPTION_RELATORIO_VOTACAO:
						validacao_relatorio = relatorio_votacao(depFederal, partido, senador, presidente);
    1e9e:	a8 80       	ld	r10, Y
    1ea0:	b9 80       	ldd	r11, Y+1	; 0x01
    1ea2:	ca 80       	ldd	r12, Y+2	; 0x02
    1ea4:	c1 51       	subi	r28, 0x11	; 17
    1ea6:	d2 40       	sbci	r29, 0x02	; 2
    1ea8:	cc 5e       	subi	r28, 0xEC	; 236
    1eaa:	dd 4f       	sbci	r29, 0xFD	; 253
    1eac:	e8 80       	ld	r14, Y
    1eae:	f9 80       	ldd	r15, Y+1	; 0x01
    1eb0:	0a 81       	ldd	r16, Y+2	; 0x02
    1eb2:	c4 51       	subi	r28, 0x14	; 20
    1eb4:	d2 40       	sbci	r29, 0x02	; 2
    1eb6:	c6 5e       	subi	r28, 0xE6	; 230
    1eb8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eba:	28 81       	ld	r18, Y
    1ebc:	39 81       	ldd	r19, Y+1	; 0x01
    1ebe:	4a 81       	ldd	r20, Y+2	; 0x02
    1ec0:	ca 51       	subi	r28, 0x1A	; 26
    1ec2:	d2 40       	sbci	r29, 0x02	; 2
    1ec4:	c9 5e       	subi	r28, 0xE9	; 233
    1ec6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec8:	68 81       	ld	r22, Y
    1eca:	79 81       	ldd	r23, Y+1	; 0x01
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	c7 51       	subi	r28, 0x17	; 23
    1ed0:	d2 40       	sbci	r29, 0x02	; 2
    1ed2:	0e 94 18 05 	call	0xa30	; 0xa30 <relatorio_votacao>
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <main+0xd06>
						if(validacao_relatorio == RELATORIO_ENVIADO){
    1eda:	55 c1       	rjmp	.+682    	; 0x2186 <main+0xfb0>
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	61 e0       	ldi	r22, 0x01	; 1
							sendString_setAdress("   RELATORIO    ", 1, 1);
    1ee0:	8e ec       	ldi	r24, 0xCE	; 206
    1ee2:	94 e0       	ldi	r25, 0x04	; 4
    1ee4:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	62 e0       	ldi	r22, 0x02	; 2
							sendString_setAdress("    ENVIADO     ", 2, 1);
    1eec:	8f ed       	ldi	r24, 0xDF	; 223
    1eee:	94 e0       	ldi	r25, 0x04	; 4
    1ef0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1ef4:	60 ed       	ldi	r22, 0xD0	; 208
    1ef6:	77 e0       	ldi	r23, 0x07	; 7
							delay_ms(2000);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    1f00:	42 c1       	rjmp	.+644    	; 0x2186 <main+0xfb0>
    1f02:	fe 01       	movw	r30, r28
    1f04:	e2 58       	subi	r30, 0x82	; 130
						}
					break;

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
					char guarda_novasenha1_mesario[5] = {0};
    1f06:	fd 4f       	sbci	r31, 0xFD	; 253
    1f08:	85 e0       	ldi	r24, 0x05	; 5
    1f0a:	df 01       	movw	r26, r30
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	1d 92       	st	X+, r1
    1f10:	9a 95       	dec	r25
    1f12:	e9 f7       	brne	.-6      	; 0x1f0e <main+0xd38>
    1f14:	35 97       	sbiw	r30, 0x05	; 5
    1f16:	df 01       	movw	r26, r30
					char guarda_novasenha2_mesario[5] = {0};
    1f18:	1d 92       	st	X+, r1
    1f1a:	8a 95       	dec	r24
    1f1c:	e9 f7       	brne	.-6      	; 0x1f18 <main+0xd42>
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	61 e0       	ldi	r22, 0x01	; 1
					char b = 1;
					// primeiro pedido de nova senha
					sendString_setAdress("Nova Senha:     ", 1, 1);
    1f22:	80 ef       	ldi	r24, 0xF0	; 240
    1f24:	94 e0       	ldi	r25, 0x04	; 4
    1f26:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    1f2e:	82 e5       	ldi	r24, 0x52	; 82
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1f36:	82 e4       	ldi	r24, 0x42	; 66
    1f38:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 2);
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RIGHT_OPTION_CHARACTER);
    1f42:	88 e4       	ldi	r24, 0x48	; 72
    1f44:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 8);
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RETURN_CHARACTER);
    1f4e:	8e e4       	ldi	r24, 0x4E	; 78
    1f50:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 14);
    1f54:	8f e7       	ldi	r24, 0x7F	; 127
    1f56:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(LEFT_ARROW_CHARACTER);
    1f5a:	01 e0       	ldi	r16, 0x01	; 1
    1f5c:	f1 2c       	mov	r15, r1

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
					char guarda_novasenha1_mesario[5] = {0};
					char guarda_novasenha2_mesario[5] = {0};
					char b = 1;
    1f5e:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					sendChar(RETURN_CHARACTER);
					setDdRamAddress(0x40 + 14);
					sendChar(LEFT_ARROW_CHARACTER);

					do{
						tecla = get_tecla();
    1f62:	18 2f       	mov	r17, r24
    1f64:	81 34       	cpi	r24, 0x41	; 65
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <main+0xd98>
						// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
						if(tecla == 'A' && input_caracters_counter == 5){
    1f68:	b5 e0       	ldi	r27, 0x05	; 5
    1f6a:	fb 16       	cp	r15, r27
    1f6c:	51 f1       	breq	.+84     	; 0x1fc2 <main+0xdec>
    1f6e:	12 34       	cpi	r17, 0x42	; 66
    1f70:	51 f1       	breq	.+84     	; 0x1fc6 <main+0xdf0>
							b = 2;
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
    1f72:	13 34       	cpi	r17, 0x43	; 67
    1f74:	59 f4       	brne	.+22     	; 0x1f8c <main+0xdb6>
							option_menu_operacional = 0;
							b = 3;
						}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    1f76:	1f ef       	ldi	r17, 0xFF	; 255
    1f78:	1f 0d       	add	r17, r15
							input_caracters_counter--;
    1f7a:	8a e0       	ldi	r24, 0x0A	; 10
    1f7c:	8f 0d       	add	r24, r15
							setDdRamAddress(11 + input_caracters_counter);
    1f7e:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1f82:	80 e2       	ldi	r24, 0x20	; 32
    1f84:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    1f88:	f1 2e       	mov	r15, r17
    1f8a:	1f c0       	rjmp	.+62     	; 0x1fca <main+0xdf4>
							option_menu_operacional = 0;
							b = 3;
						}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
							input_caracters_counter--;
    1f8c:	e4 e0       	ldi	r30, 0x04	; 4
    1f8e:	ef 15       	cp	r30, r15
							setDdRamAddress(11 + input_caracters_counter);
							sendChar(' ');
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    1f90:	e0 f0       	brcs	.+56     	; 0x1fca <main+0xdf4>
    1f92:	1a 32       	cpi	r17, 0x2A	; 42
    1f94:	d1 f0       	breq	.+52     	; 0x1fca <main+0xdf4>
    1f96:	14 34       	cpi	r17, 0x44	; 68
    1f98:	c1 f0       	breq	.+48     	; 0x1fca <main+0xdf4>
    1f9a:	13 32       	cpi	r17, 0x23	; 35
    1f9c:	b1 f0       	breq	.+44     	; 0x1fca <main+0xdf4>
    1f9e:	11 34       	cpi	r17, 0x41	; 65
    1fa0:	a1 f0       	breq	.+40     	; 0x1fca <main+0xdf4>
    1fa2:	8b e0       	ldi	r24, 0x0B	; 11
    1fa4:	8f 0d       	add	r24, r15
							setDdRamAddress(11 + input_caracters_counter);
    1fa6:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    1faa:	8a e2       	ldi	r24, 0x2A	; 42
    1fac:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar('*');
    1fb0:	ee e7       	ldi	r30, 0x7E	; 126
    1fb2:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_novasenha1_mesario[input_caracters_counter] = tecla;
    1fb4:	ec 0f       	add	r30, r28
    1fb6:	fd 1f       	adc	r31, r29
    1fb8:	ef 0d       	add	r30, r15
    1fba:	f1 1d       	adc	r31, r1
    1fbc:	10 83       	st	Z, r17
    1fbe:	f3 94       	inc	r15
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <main+0xdf4>
							input_caracters_counter++;
    1fc2:	02 e0       	ldi	r16, 0x02	; 2
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <main+0xdf4>

					do{
						tecla = get_tecla();
						// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
						if(tecla == 'A' && input_caracters_counter == 5){
							b = 2;
    1fc6:	03 e0       	ldi	r16, 0x03	; 3
    1fc8:	91 2c       	mov	r9, r1
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
							option_menu_operacional = 0;
							b = 3;
    1fca:	01 30       	cpi	r16, 0x01	; 1
						if(tecla == 'A' && input_caracters_counter == 5){
							b = 2;
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
							option_menu_operacional = 0;
    1fcc:	41 f2       	breq	.-112    	; 0x1f5e <main+0xd88>
							setDdRamAddress(11 + input_caracters_counter);
							sendChar('*');
							guarda_novasenha1_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(b == 1);
    1fce:	03 30       	cpi	r16, 0x03	; 3
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <main+0xdfe>
					
					if(b != 3){
    1fd2:	d4 c0       	rjmp	.+424    	; 0x217c <main+0xfa6>
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
						sendString_setAdress(" Repita a Nova  ", 1, 1);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	95 e0       	ldi	r25, 0x05	; 5
    1fdc:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
    1fe4:	82 e1       	ldi	r24, 0x12	; 18
    1fe6:	95 e0       	ldi	r25, 0x05	; 5
    1fe8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1ff2:	81 e4       	ldi	r24, 0x41	; 65
    1ff4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    1ff8:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	61 e0       	ldi	r22, 0x01	; 1

						// segundo pedido de nova senha
						input_caracters_counter = 0;
						sendString_setAdress("Nova Senha:     ", 1, 1);
    2000:	80 ef       	ldi	r24, 0xF0	; 240
    2002:	94 e0       	ldi	r25, 0x04	; 4
    2004:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("A:    B:    C:  ", 2, 1);
    200c:	82 e5       	ldi	r24, 0x52	; 82
    200e:	92 e0       	ldi	r25, 0x02	; 2
    2010:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2014:	82 e4       	ldi	r24, 0x42	; 66
    2016:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 2);
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(RIGHT_OPTION_CHARACTER);
    2020:	88 e4       	ldi	r24, 0x48	; 72
    2022:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 8);
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(RETURN_CHARACTER);
    202c:	8e e4       	ldi	r24, 0x4E	; 78
    202e:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 14);
    2032:	8f e7       	ldi	r24, 0x7F	; 127
    2034:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(LEFT_ARROW_CHARACTER);
    2038:	f1 2c       	mov	r15, r1
    203a:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>

						unsigned char a, i;
						do{
							tecla = get_tecla();
    203e:	18 2f       	mov	r17, r24
    2040:	81 34       	cpi	r24, 0x41	; 65
    2042:	09 f0       	breq	.+2      	; 0x2046 <main+0xe70>
							// se tecla A e senha com 5 dígitos, confere senhas
							if(tecla == 'A' && input_caracters_counter == 5){
    2044:	63 c0       	rjmp	.+198    	; 0x210c <main+0xf36>
    2046:	f5 e0       	ldi	r31, 0x05	; 5
    2048:	ff 12       	cpse	r15, r31
    204a:	60 c0       	rjmp	.+192    	; 0x210c <main+0xf36>
    204c:	15 c0       	rjmp	.+42     	; 0x2078 <main+0xea2>
    204e:	82 2f       	mov	r24, r18
    2050:	90 e0       	ldi	r25, 0x00	; 0
								a = 0;
								for(i = 0; i < 5; i++){
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
    2052:	ee e7       	ldi	r30, 0x7E	; 126
    2054:	f2 e0       	ldi	r31, 0x02	; 2
    2056:	ec 0f       	add	r30, r28
    2058:	fd 1f       	adc	r31, r29
    205a:	e8 0f       	add	r30, r24
    205c:	f9 1f       	adc	r31, r25
    205e:	30 81       	ld	r19, Z
    2060:	e9 e7       	ldi	r30, 0x79	; 121
    2062:	f2 e0       	ldi	r31, 0x02	; 2
    2064:	ec 0f       	add	r30, r28
    2066:	fd 1f       	adc	r31, r29
    2068:	e8 0f       	add	r30, r24
    206a:	f9 1f       	adc	r31, r25
    206c:	80 81       	ld	r24, Z
    206e:	38 13       	cpse	r19, r24
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <main+0xe9e>
    2072:	4f 5f       	subi	r20, 0xFF	; 255
    2074:	2f 5f       	subi	r18, 0xFF	; 255
    2076:	02 c0       	rjmp	.+4      	; 0x207c <main+0xea6>
						do{
							tecla = get_tecla();
							// se tecla A e senha com 5 dígitos, confere senhas
							if(tecla == 'A' && input_caracters_counter == 5){
								a = 0;
								for(i = 0; i < 5; i++){
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	25 30       	cpi	r18, 0x05	; 5
    207e:	38 f3       	brcs	.-50     	; 0x204e <main+0xe78>
    2080:	45 30       	cpi	r20, 0x05	; 5
    2082:	49 f5       	brne	.+82     	; 0x20d6 <main+0xf00>
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
								}
								menu_index = OPTION_TROCA_SENHA;
								if(a == 5){
    2084:	12 c0       	rjmp	.+36     	; 0x20aa <main+0xed4>
    2086:	82 2f       	mov	r24, r18
    2088:	90 e0       	ldi	r25, 0x00	; 0
									for(i = 0; i < 5; i++) {guarda_senha_mesario[i] = guarda_novasenha1_mesario[i];}
    208a:	ee e7       	ldi	r30, 0x7E	; 126
    208c:	f2 e0       	ldi	r31, 0x02	; 2
    208e:	ec 0f       	add	r30, r28
    2090:	fd 1f       	adc	r31, r29
    2092:	e8 0f       	add	r30, r24
    2094:	f9 1f       	adc	r31, r25
    2096:	30 81       	ld	r19, Z
    2098:	e3 e3       	ldi	r30, 0x33	; 51
    209a:	f2 e0       	ldi	r31, 0x02	; 2
    209c:	ec 0f       	add	r30, r28
    209e:	fd 1f       	adc	r31, r29
    20a0:	e8 0f       	add	r30, r24
    20a2:	f9 1f       	adc	r31, r25
    20a4:	30 83       	st	Z, r19
    20a6:	2f 5f       	subi	r18, 0xFF	; 255
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <main+0xed6>
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	25 30       	cpi	r18, 0x05	; 5
    20ae:	58 f3       	brcs	.-42     	; 0x2086 <main+0xeb0>
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	61 e0       	ldi	r22, 0x01	; 1
									sendString_setAdress(" Troca de Senha ", 1, 1);
    20b4:	81 e2       	ldi	r24, 0x21	; 33
    20b6:	95 e0       	ldi	r25, 0x05	; 5
    20b8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("    Efetuada  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    20c0:	82 e3       	ldi	r24, 0x32	; 50
    20c2:	95 e0       	ldi	r25, 0x05	; 5
    20c4:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    20ce:	82 e4       	ldi	r24, 0x42	; 66
    20d0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    20d4:	12 c0       	rjmp	.+36     	; 0x20fa <main+0xf24>
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	61 e0       	ldi	r22, 0x01	; 1
								}
								else{
									sendString_setAdress("   Senhas Nao   ", 1, 1);
    20da:	81 e4       	ldi	r24, 0x41	; 65
    20dc:	95 e0       	ldi	r25, 0x05	; 5
    20de:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    20e6:	82 e5       	ldi	r24, 0x52	; 82
    20e8:	95 e0       	ldi	r25, 0x05	; 5
    20ea:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    20f4:	82 e4       	ldi	r24, 0x42	; 66
    20f6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    20fa:	0e 94 ab 03 	call	0x756	; 0x756 <getCharacter_B>
								}
								tecla = getCharacter_B();
    20fe:	03 e0       	ldi	r16, 0x03	; 3
    2100:	91 2c       	mov	r9, r1
								option_menu_operacional = 0;
								b = 3;
    2102:	0f 2e       	mov	r0, r31
								else{
									sendString_setAdress("   Senhas Nao   ", 1, 1);
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
								}
								tecla = getCharacter_B();
								option_menu_operacional = 0;
    2104:	f7 e0       	ldi	r31, 0x07	; 7
							if(tecla == 'A' && input_caracters_counter == 5){
								a = 0;
								for(i = 0; i < 5; i++){
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
								}
								menu_index = OPTION_TROCA_SENHA;
    2106:	df 2e       	mov	r13, r31
    2108:	f0 2d       	mov	r31, r0
    210a:	30 c0       	rjmp	.+96     	; 0x216c <main+0xf96>
    210c:	12 34       	cpi	r17, 0x42	; 66
									sendString_setAdress("   Senhas Nao   ", 1, 1);
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
								}
								tecla = getCharacter_B();
								option_menu_operacional = 0;
								b = 3;
    210e:	41 f1       	breq	.+80     	; 0x2160 <main+0xf8a>
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
    2110:	13 34       	cpi	r17, 0x43	; 67
    2112:	59 f4       	brne	.+22     	; 0x212a <main+0xf54>
								option_menu_operacional = 0;
								menu_index = OPTION_TROCA_SENHA;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    2114:	1f ef       	ldi	r17, 0xFF	; 255
    2116:	1f 0d       	add	r17, r15
								input_caracters_counter--;
    2118:	8a e0       	ldi	r24, 0x0A	; 10
    211a:	8f 0d       	add	r24, r15
								setDdRamAddress(11 + input_caracters_counter);
    211c:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2120:	80 e2       	ldi	r24, 0x20	; 32
    2122:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar(' ');
    2126:	f1 2e       	mov	r15, r17
    2128:	21 c0       	rjmp	.+66     	; 0x216c <main+0xf96>
								menu_index = OPTION_TROCA_SENHA;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
								input_caracters_counter--;
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	8f 15       	cp	r24, r15
								setDdRamAddress(11 + input_caracters_counter);
								sendChar(' ');
							}
							// se for um caractere válido e ainda não tiver execedido o limite, é contabilizado
							else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    212e:	f0 f0       	brcs	.+60     	; 0x216c <main+0xf96>
    2130:	1a 32       	cpi	r17, 0x2A	; 42
    2132:	e1 f0       	breq	.+56     	; 0x216c <main+0xf96>
    2134:	14 34       	cpi	r17, 0x44	; 68
    2136:	d1 f0       	breq	.+52     	; 0x216c <main+0xf96>
    2138:	13 32       	cpi	r17, 0x23	; 35
    213a:	c1 f0       	breq	.+48     	; 0x216c <main+0xf96>
    213c:	11 34       	cpi	r17, 0x41	; 65
    213e:	b1 f0       	breq	.+44     	; 0x216c <main+0xf96>
    2140:	8b e0       	ldi	r24, 0x0B	; 11
    2142:	8f 0d       	add	r24, r15
								setDdRamAddress(11 + input_caracters_counter);
    2144:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2148:	8a e2       	ldi	r24, 0x2A	; 42
    214a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar('*');
    214e:	e9 e7       	ldi	r30, 0x79	; 121
    2150:	f2 e0       	ldi	r31, 0x02	; 2
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
    2152:	ec 0f       	add	r30, r28
    2154:	fd 1f       	adc	r31, r29
    2156:	ef 0d       	add	r30, r15
    2158:	f1 1d       	adc	r31, r1
    215a:	10 83       	st	Z, r17
    215c:	f3 94       	inc	r15
    215e:	06 c0       	rjmp	.+12     	; 0x216c <main+0xf96>
								input_caracters_counter++;
    2160:	03 e0       	ldi	r16, 0x03	; 3
    2162:	91 2c       	mov	r9, r1
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
								menu_index = OPTION_TROCA_SENHA;
								b = 3;
    2164:	0f 2e       	mov	r0, r31
								option_menu_operacional = 0;
								b = 3;
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
    2166:	f7 e0       	ldi	r31, 0x07	; 7
								menu_index = OPTION_TROCA_SENHA;
    2168:	df 2e       	mov	r13, r31
    216a:	f0 2d       	mov	r31, r0
    216c:	02 30       	cpi	r16, 0x02	; 2
    216e:	09 f4       	brne	.+2      	; 0x2172 <main+0xf9c>
								setDdRamAddress(11 + input_caracters_counter);
								sendChar('*');
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(b == 2);
    2170:	64 cf       	rjmp	.-312    	; 0x203a <main+0xe64>
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <main+0xfb0>
    2174:	91 2c       	mov	r9, r1
    2176:	dd 24       	eor	r13, r13
						menu_index = 1;
						sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
						sendString_setAdress("      ...       ", 2, 1);
						delay_ms(1000);
					}
					else if(tecla == 'A') {option_menu_operacional = 0; menu_index = 1;}
    2178:	d3 94       	inc	r13
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <main+0xfb0>
    217c:	91 2c       	mov	r9, r1
    217e:	0f 2e       	mov	r0, r31
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(b == 2);
					}
					else {option_menu_operacional = 0; menu_index = OPTION_TROCA_SENHA;}
    2180:	f7 e0       	ldi	r31, 0x07	; 7
    2182:	df 2e       	mov	r13, r31
    2184:	f0 2d       	mov	r31, r0
    2186:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <currentTime>
				
				case OPTION_RESET_SENHA:

					break;
			}
			if(currentTime[HOURS] < 8){
    218a:	88 30       	cpi	r24, 0x08	; 8
    218c:	40 f4       	brcc	.+16     	; 0x219e <main+0xfc8>
    218e:	cd 57       	subi	r28, 0x7D	; 125
    2190:	dd 4f       	sbci	r29, 0xFD	; 253
				if(urna_estado != BLOQUEADA){
    2192:	98 81       	ld	r25, Y
    2194:	c3 58       	subi	r28, 0x83	; 131
    2196:	d2 40       	sbci	r29, 0x02	; 2
    2198:	91 30       	cpi	r25, 0x01	; 1
    219a:	61 f5       	brne	.+88     	; 0x21f4 <main+0x101e>
    219c:	31 c0       	rjmp	.+98     	; 0x2200 <main+0x102a>
    219e:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__data_end>
					urna_estado = AGUARDANDO;
				}
			}
			else if(num_eleitores + num_justificativas >= 33 || currentTime[HOURS] > 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] > 14)){
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	21 32       	cpi	r18, 0x21	; 33
    21a6:	31 05       	cpc	r19, r1
    21a8:	44 f4       	brge	.+16     	; 0x21ba <main+0xfe4>
    21aa:	82 31       	cpi	r24, 0x12	; 18
    21ac:	30 f4       	brcc	.+12     	; 0x21ba <main+0xfe4>
    21ae:	81 31       	cpi	r24, 0x11	; 17
    21b0:	39 f5       	brne	.+78     	; 0x2200 <main+0x102a>
    21b2:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <currentTime+0x1>
    21b6:	8f 30       	cpi	r24, 0x0F	; 15
    21b8:	18 f1       	brcs	.+70     	; 0x2200 <main+0x102a>
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	61 e0       	ldi	r22, 0x01	; 1
				urna_estado = ENCERRADA;
				sendString_setAdress("      URNA      ", 1, 1);
    21be:	84 e9       	ldi	r24, 0x94	; 148
    21c0:	92 e0       	ldi	r25, 0x02	; 2
    21c2:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	62 e0       	ldi	r22, 0x02	; 2
				sendString_setAdress("    ENCERRADA   ", 2, 1);
    21ca:	85 ea       	ldi	r24, 0xA5	; 165
    21cc:	92 e0       	ldi	r25, 0x02	; 2
    21ce:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    21d2:	60 ed       	ldi	r22, 0xD0	; 208
    21d4:	77 e0       	ldi	r23, 0x07	; 7
				delay_ms(2000);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    21de:	71 2c       	mov	r7, r1
    21e0:	91 2c       	mov	r9, r1
				encerrada_bloqueada = 0;
    21e2:	dd 24       	eor	r13, r13
				menu_index = 1;
				option_menu_operacional = 0;
    21e4:	d3 94       	inc	r13
				urna_estado = ENCERRADA;
				sendString_setAdress("      URNA      ", 1, 1);
				sendString_setAdress("    ENCERRADA   ", 2, 1);
				delay_ms(2000);
				encerrada_bloqueada = 0;
				menu_index = 1;
    21e6:	a4 e0       	ldi	r26, 0x04	; 4
    21e8:	cd 57       	subi	r28, 0x7D	; 125
				if(urna_estado != BLOQUEADA){
					urna_estado = AGUARDANDO;
				}
			}
			else if(num_eleitores + num_justificativas >= 33 || currentTime[HOURS] > 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] > 14)){
				urna_estado = ENCERRADA;
    21ea:	dd 4f       	sbci	r29, 0xFD	; 253
    21ec:	a8 83       	st	Y, r26
    21ee:	c3 58       	subi	r28, 0x83	; 131
    21f0:	d2 40       	sbci	r29, 0x02	; 2
    21f2:	06 c0       	rjmp	.+12     	; 0x2200 <main+0x102a>
    21f4:	b3 e0       	ldi	r27, 0x03	; 3
    21f6:	cd 57       	subi	r28, 0x7D	; 125

					break;
			}
			if(currentTime[HOURS] < 8){
				if(urna_estado != BLOQUEADA){
					urna_estado = AGUARDANDO;
    21f8:	dd 4f       	sbci	r29, 0xFD	; 253
    21fa:	b8 83       	st	Y, r27
    21fc:	c3 58       	subi	r28, 0x83	; 131
    21fe:	d2 40       	sbci	r29, 0x02	; 2
    2200:	cd 57       	subi	r28, 0x7D	; 125
    2202:	dd 4f       	sbci	r29, 0xFD	; 253
				option_menu_operacional = 0;
			}

		}
		
		while(urna_estado == OPERACIONAL){
    2204:	e8 81       	ld	r30, Y
    2206:	c3 58       	subi	r28, 0x83	; 131
    2208:	d2 40       	sbci	r29, 0x02	; 2
    220a:	e2 30       	cpi	r30, 0x02	; 2
    220c:	09 f4       	brne	.+2      	; 0x2210 <main+0x103a>
    220e:	32 ca       	rjmp	.-2972   	; 0x1674 <main+0x49e>
    2210:	92 c4       	rjmp	.+2340   	; 0x2b36 <main+0x1960>
    2212:	8d 2d       	mov	r24, r13
    2214:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		
		while(urna_estado == AGUARDANDO){
			// Menu do sistema
			switch(menu_index){
    2216:	fc 01       	movw	r30, r24
    2218:	31 97       	sbiw	r30, 0x01	; 1
    221a:	e8 30       	cpi	r30, 0x08	; 8
    221c:	f1 05       	cpc	r31, r1
    221e:	08 f0       	brcs	.+2      	; 0x2222 <main+0x104c>
    2220:	1a c1       	rjmp	.+564    	; 0x2456 <main+0x1280>
    2222:	ec 5b       	subi	r30, 0xBC	; 188
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__tablejump2__>
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	61 e0       	ldi	r22, 0x01	; 1
				case 1:
					sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    222e:	86 eb       	ldi	r24, 0xB6	; 182
    2230:	92 e0       	ldi	r25, 0x02	; 2
    2232:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    223c:	81 e4       	ldi	r24, 0x41	; 65
    223e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2246:	85 ec       	ldi	r24, 0xC5	; 197
    2248:	92 e0       	ldi	r25, 0x02	; 2
    224a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2254:	82 e4       	ldi	r24, 0x42	; 66
    2256:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    225a:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    225e:	82 34       	cpi	r24, 0x42	; 66
    2260:	19 f4       	brne	.+6      	; 0x2268 <main+0x1092>
					if(tecla == 'B'){ menu_index+=2;}
    2262:	d3 94       	inc	r13
    2264:	d3 94       	inc	r13
    2266:	f7 c0       	rjmp	.+494    	; 0x2456 <main+0x1280>
    2268:	81 34       	cpi	r24, 0x41	; 65
    226a:	09 f0       	breq	.+2      	; 0x226e <main+0x1098>
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_index = 0;}
    226c:	f4 c0       	rjmp	.+488    	; 0x2456 <main+0x1280>
    226e:	cb c0       	rjmp	.+406    	; 0x2406 <main+0x1230>
    2270:	d3 94       	inc	r13
    2272:	f1 c0       	rjmp	.+482    	; 0x2456 <main+0x1280>
					break;
				case 2:
					menu_index++;
    2274:	41 e0       	ldi	r20, 0x01	; 1
					break;
    2276:	61 e0       	ldi	r22, 0x01	; 1
				case 3:
					sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2278:	82 ef       	ldi	r24, 0xF2	; 242
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2286:	81 e4       	ldi	r24, 0x41	; 65
    2288:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	93 e0       	ldi	r25, 0x03	; 3
    2294:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    229e:	82 e4       	ldi	r24, 0x42	; 66
    22a0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    22a4:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    22a8:	82 34       	cpi	r24, 0x42	; 66
    22aa:	11 f4       	brne	.+4      	; 0x22b0 <main+0x10da>
					if(tecla == 'B') { menu_index++;}
    22ac:	d3 94       	inc	r13
    22ae:	d3 c0       	rjmp	.+422    	; 0x2456 <main+0x1280>
    22b0:	81 34       	cpi	r24, 0x41	; 65
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <main+0x10e0>
					else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_index = 0;}
    22b4:	d0 c0       	rjmp	.+416    	; 0x2456 <main+0x1280>
    22b6:	ab c0       	rjmp	.+342    	; 0x240e <main+0x1238>
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 4:
					sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    22bc:	80 e1       	ldi	r24, 0x10	; 16
    22be:	93 e0       	ldi	r25, 0x03	; 3
    22c0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    22ca:	81 e4       	ldi	r24, 0x41	; 65
    22cc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    22d4:	8f e1       	ldi	r24, 0x1F	; 31
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    22e2:	82 e4       	ldi	r24, 0x42	; 66
    22e4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    22e8:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    22ec:	82 34       	cpi	r24, 0x42	; 66
    22ee:	11 f4       	brne	.+4      	; 0x22f4 <main+0x111e>
					if(tecla == 'B') { menu_index++;}
    22f0:	d3 94       	inc	r13
    22f2:	b1 c0       	rjmp	.+354    	; 0x2456 <main+0x1280>
    22f4:	81 34       	cpi	r24, 0x41	; 65
    22f6:	09 f0       	breq	.+2      	; 0x22fa <main+0x1124>
					else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_index = 0;}
    22f8:	ae c0       	rjmp	.+348    	; 0x2456 <main+0x1280>
    22fa:	8f c0       	rjmp	.+286    	; 0x241a <main+0x1244>
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 5:
					sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2300:	8e e2       	ldi	r24, 0x2E	; 46
    2302:	93 e0       	ldi	r25, 0x03	; 3
    2304:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    230e:	81 e4       	ldi	r24, 0x41	; 65
    2310:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2318:	8d e3       	ldi	r24, 0x3D	; 61
    231a:	93 e0       	ldi	r25, 0x03	; 3
    231c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2326:	82 e4       	ldi	r24, 0x42	; 66
    2328:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    232c:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    2330:	82 34       	cpi	r24, 0x42	; 66
    2332:	11 f4       	brne	.+4      	; 0x2338 <main+0x1162>
					if(tecla == 'B') { menu_index++;}
    2334:	d3 94       	inc	r13
    2336:	8f c0       	rjmp	.+286    	; 0x2456 <main+0x1280>
    2338:	81 34       	cpi	r24, 0x41	; 65
    233a:	09 f0       	breq	.+2      	; 0x233e <main+0x1168>
					else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_index = 0;}
    233c:	8c c0       	rjmp	.+280    	; 0x2456 <main+0x1280>
    233e:	72 c0       	rjmp	.+228    	; 0x2424 <main+0x124e>
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 6:
					sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2344:	8c e4       	ldi	r24, 0x4C	; 76
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2352:	81 e4       	ldi	r24, 0x41	; 65
    2354:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    235c:	8b e5       	ldi	r24, 0x5B	; 91
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    236a:	82 e4       	ldi	r24, 0x42	; 66
    236c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2370:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    2374:	82 34       	cpi	r24, 0x42	; 66
    2376:	11 f4       	brne	.+4      	; 0x237c <main+0x11a6>
					if(tecla == 'B') {menu_index++;}
    2378:	d3 94       	inc	r13
    237a:	6d c0       	rjmp	.+218    	; 0x2456 <main+0x1280>
    237c:	81 34       	cpi	r24, 0x41	; 65
    237e:	09 f0       	breq	.+2      	; 0x2382 <main+0x11ac>
					else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_index = 0;}
    2380:	6a c0       	rjmp	.+212    	; 0x2456 <main+0x1280>
    2382:	56 c0       	rjmp	.+172    	; 0x2430 <main+0x125a>
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 7:
					sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2388:	8a e6       	ldi	r24, 0x6A	; 106
    238a:	93 e0       	ldi	r25, 0x03	; 3
    238c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2396:	81 e4       	ldi	r24, 0x41	; 65
    2398:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    23a0:	89 e7       	ldi	r24, 0x79	; 121
    23a2:	93 e0       	ldi	r25, 0x03	; 3
    23a4:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    23ae:	82 e4       	ldi	r24, 0x42	; 66
    23b0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    23b4:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    23b8:	82 34       	cpi	r24, 0x42	; 66
    23ba:	11 f4       	brne	.+4      	; 0x23c0 <main+0x11ea>
					if(tecla == 'B') {menu_index++;}
    23bc:	d3 94       	inc	r13
    23be:	4b c0       	rjmp	.+150    	; 0x2456 <main+0x1280>
    23c0:	81 34       	cpi	r24, 0x41	; 65
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <main+0x11f0>
					else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_index = 0;}
    23c4:	48 c0       	rjmp	.+144    	; 0x2456 <main+0x1280>
    23c6:	3a c0       	rjmp	.+116    	; 0x243c <main+0x1266>
    23c8:	41 e0       	ldi	r20, 0x01	; 1
    23ca:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case 8:
					sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    23cc:	88 e8       	ldi	r24, 0x88	; 136
    23ce:	93 e0       	ldi	r25, 0x03	; 3
    23d0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    23da:	81 e4       	ldi	r24, 0x41	; 65
    23dc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    23e4:	89 e7       	ldi	r24, 0x79	; 121
    23e6:	93 e0       	ldi	r25, 0x03	; 3
    23e8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    23f2:	82 e4       	ldi	r24, 0x42	; 66
    23f4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    23f8:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    23fc:	82 34       	cpi	r24, 0x42	; 66
    23fe:	21 f1       	breq	.+72     	; 0x2448 <main+0x1272>
					if(tecla == 'B') {menu_index = 1;}
    2400:	81 34       	cpi	r24, 0x41	; 65
    2402:	49 f5       	brne	.+82     	; 0x2456 <main+0x1280>
					else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_index = 0;}
    2404:	24 c0       	rjmp	.+72     	; 0x244e <main+0x1278>
    2406:	99 24       	eor	r9, r9
    2408:	93 94       	inc	r9
				case 1:
					sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B'){ menu_index+=2;}
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_index = 0;}
    240a:	d1 2c       	mov	r13, r1
    240c:	24 c0       	rjmp	.+72     	; 0x2456 <main+0x1280>
    240e:	0f 2e       	mov	r0, r31
    2410:	f3 e0       	ldi	r31, 0x03	; 3
				case 3:
					sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_index = 0;}
    2412:	9f 2e       	mov	r9, r31
    2414:	f0 2d       	mov	r31, r0
    2416:	d1 2c       	mov	r13, r1
    2418:	1e c0       	rjmp	.+60     	; 0x2456 <main+0x1280>
    241a:	68 94       	set
    241c:	99 24       	eor	r9, r9
				case 4:
					sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_index = 0;}
    241e:	92 f8       	bld	r9, 2
    2420:	d1 2c       	mov	r13, r1
    2422:	19 c0       	rjmp	.+50     	; 0x2456 <main+0x1280>
    2424:	0f 2e       	mov	r0, r31
    2426:	f5 e0       	ldi	r31, 0x05	; 5
				case 5:
					sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_index = 0;}
    2428:	9f 2e       	mov	r9, r31
    242a:	f0 2d       	mov	r31, r0
    242c:	d1 2c       	mov	r13, r1
    242e:	13 c0       	rjmp	.+38     	; 0x2456 <main+0x1280>
    2430:	0f 2e       	mov	r0, r31
    2432:	f6 e0       	ldi	r31, 0x06	; 6
				case 6:
					sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_index++;}
					else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_index = 0;}
    2434:	9f 2e       	mov	r9, r31
    2436:	f0 2d       	mov	r31, r0
    2438:	d1 2c       	mov	r13, r1
    243a:	0d c0       	rjmp	.+26     	; 0x2456 <main+0x1280>
    243c:	0f 2e       	mov	r0, r31
    243e:	f7 e0       	ldi	r31, 0x07	; 7
				case 7:
					sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_index++;}
					else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_index = 0;}
    2440:	9f 2e       	mov	r9, r31
    2442:	f0 2d       	mov	r31, r0
    2444:	d1 2c       	mov	r13, r1
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <main+0x1280>
    2448:	dd 24       	eor	r13, r13
    244a:	d3 94       	inc	r13
					break;
				case 8:
					sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_index = 1;}
    244c:	04 c0       	rjmp	.+8      	; 0x2456 <main+0x1280>
    244e:	68 94       	set
    2450:	99 24       	eor	r9, r9
					else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_index = 0;}
    2452:	93 f8       	bld	r9, 3
    2454:	d1 2c       	mov	r13, r1
    2456:	89 2d       	mov	r24, r9
    2458:	90 e0       	ldi	r25, 0x00	; 0
				default:
					break;
			}
			
			// Opções do menu do sistema
			switch(option_menu_operacional){
    245a:	fc 01       	movw	r30, r24
    245c:	31 97       	sbiw	r30, 0x01	; 1
    245e:	e8 30       	cpi	r30, 0x08	; 8
    2460:	f1 05       	cpc	r31, r1
    2462:	08 f0       	brcs	.+2      	; 0x2466 <main+0x1290>
    2464:	24 c3       	rjmp	.+1608   	; 0x2aae <main+0x18d8>
    2466:	e4 5b       	subi	r30, 0xB4	; 180
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__tablejump2__>
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	61 e0       	ldi	r22, 0x01	; 1
				case OPTION_ESTADO:
					sendString_setAdress("AGUARDANDO    ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
    2472:	81 e6       	ldi	r24, 0x61	; 97
    2474:	95 e0       	ldi	r25, 0x05	; 5
    2476:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2480:	81 e4       	ldi	r24, 0x41	; 65
    2482:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
    248a:	86 ea       	ldi	r24, 0xA6	; 166
    248c:	93 e0       	ldi	r25, 0x03	; 3
    248e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2498:	82 e4       	ldi	r24, 0x42	; 66
    249a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    249e:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    24a2:	82 34       	cpi	r24, 0x42	; 66
    24a4:	d9 f4       	brne	.+54     	; 0x24dc <main+0x1306>
					if(tecla == 'B') {
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	61 e0       	ldi	r22, 0x01	; 1
						urna_estado = BLOQUEADA;
						menu_index = 1;
						sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    24aa:	85 eb       	ldi	r24, 0xB5	; 181
    24ac:	93 e0       	ldi	r25, 0x03	; 3
    24ae:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("      ...       ", 2, 1);
    24b6:	86 ec       	ldi	r24, 0xC6	; 198
    24b8:	93 e0       	ldi	r25, 0x03	; 3
    24ba:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    24be:	68 ee       	ldi	r22, 0xE8	; 232
    24c0:	73 e0       	ldi	r23, 0x03	; 3
						delay_ms(1000);
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    24ca:	dd 24       	eor	r13, r13
    24cc:	d3 94       	inc	r13
					sendString_setAdress("AGUARDANDO    ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
					sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {
						urna_estado = BLOQUEADA;
						menu_index = 1;
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	cd 57       	subi	r28, 0x7D	; 125
				case OPTION_ESTADO:
					sendString_setAdress("AGUARDANDO    ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
					sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {
						urna_estado = BLOQUEADA;
    24d2:	dd 4f       	sbci	r29, 0xFD	; 253
    24d4:	f8 83       	st	Y, r31
    24d6:	c3 58       	subi	r28, 0x83	; 131
    24d8:	d2 40       	sbci	r29, 0x02	; 2
    24da:	e9 c2       	rjmp	.+1490   	; 0x2aae <main+0x18d8>
    24dc:	81 34       	cpi	r24, 0x41	; 65
    24de:	09 f0       	breq	.+2      	; 0x24e2 <main+0x130c>
						menu_index = 1;
						sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
						sendString_setAdress("      ...       ", 2, 1);
						delay_ms(1000);
					}
					else if(tecla == 'A') {option_menu_operacional = 0; menu_index = 1;}
    24e0:	e6 c2       	rjmp	.+1484   	; 0x2aae <main+0x18d8>
    24e2:	dc c2       	rjmp	.+1464   	; 0x2a9c <main+0x18c6>
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	61 e0       	ldi	r22, 0x01	; 1
					break;
				case OPTION_ELEITOR:
					break;
				case OPTION_CONSULTA_HORA:
					sendString_setAdress("HORA ATUAL:     ", 1, 1);
    24e8:	8c e2       	ldi	r24, 0x2C	; 44
    24ea:	94 e0       	ldi	r25, 0x04	; 4
    24ec:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("              ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    24f4:	84 ee       	ldi	r24, 0xE4	; 228
    24f6:	91 e0       	ldi	r25, 0x01	; 1
    24f8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2502:	82 e4       	ldi	r24, 0x42	; 66
    2504:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2508:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <exibe_hora_display>
					exibe_hora_display();
    250c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					if(get_tecla() == 'B'){
    2510:	82 34       	cpi	r24, 0x42	; 66
    2512:	09 f0       	breq	.+2      	; 0x2516 <main+0x1340>
    2514:	cc c2       	rjmp	.+1432   	; 0x2aae <main+0x18d8>
    2516:	0e 94 66 1d 	call	0x3acc	; 0x3acc <apaga_hora_display>
						apaga_hora_display();
    251a:	91 2c       	mov	r9, r1
    251c:	0f 2e       	mov	r0, r31
						option_menu_operacional = 0;
    251e:	f3 e0       	ldi	r31, 0x03	; 3
						menu_index = 3;
    2520:	df 2e       	mov	r13, r31
    2522:	f0 2d       	mov	r31, r0
    2524:	c4 c2       	rjmp	.+1416   	; 0x2aae <main+0x18d8>
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	61 e0       	ldi	r22, 0x01	; 1
					}
					break;
				
				case OPTION_TROCA_HORA:
					input_caracters_counter = 0;
					sendString_setAdress("INSERIR HORARIO ", 1, 1);
    252a:	8d e3       	ldi	r24, 0x3D	; 61
    252c:	94 e0       	ldi	r25, 0x04	; 4
    252e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("<  :  > ", 2, 1); sendChar(LEFT_ARROW_CHARACTER); sendChar('C'); sendChar(' '); sendChar(RETURN_CHARACTER); sendChar('B'); sendChar(' '); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2536:	8e e4       	ldi	r24, 0x4E	; 78
    2538:	94 e0       	ldi	r25, 0x04	; 4
    253a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    253e:	8f e7       	ldi	r24, 0x7F	; 127
    2540:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2544:	83 e4       	ldi	r24, 0x43	; 67
    2546:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    254a:	80 e2       	ldi	r24, 0x20	; 32
    254c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2556:	82 e4       	ldi	r24, 0x42	; 66
    2558:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    255c:	80 e2       	ldi	r24, 0x20	; 32
    255e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2568:	81 e4       	ldi	r24, 0x41	; 65
    256a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    256e:	c7 58       	subi	r28, 0x87	; 135
    2570:	dd 4f       	sbci	r29, 0xFD	; 253
					
					char guarda_novo_horario[4] = {0};
    2572:	18 82       	st	Y, r1
    2574:	19 82       	std	Y+1, r1	; 0x01
    2576:	1a 82       	std	Y+2, r1	; 0x02
    2578:	1b 82       	std	Y+3, r1	; 0x03
    257a:	c9 57       	subi	r28, 0x79	; 121
    257c:	d2 40       	sbci	r29, 0x02	; 2
    257e:	00 e0       	ldi	r16, 0x00	; 0
    2580:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_tecla>
					do{
						tecla = get_tecla();
    2584:	18 2f       	mov	r17, r24
    2586:	81 34       	cpi	r24, 0x41	; 65
    2588:	09 f0       	breq	.+2      	; 0x258c <main+0x13b6>
						// se tecla A e horário com 4 dígitos, prossegue para mudar hora
						if(tecla == 'A' && input_caracters_counter == 4){
    258a:	55 c0       	rjmp	.+170    	; 0x2636 <main+0x1460>
    258c:	04 30       	cpi	r16, 0x04	; 4
    258e:	09 f0       	breq	.+2      	; 0x2592 <main+0x13bc>
    2590:	52 c0       	rjmp	.+164    	; 0x2636 <main+0x1460>
    2592:	c5 58       	subi	r28, 0x85	; 133
    2594:	dd 4f       	sbci	r29, 0xFD	; 253
							// avisa se conseguiu alterar horário, e se é válido ou não
							if(!setTime(((guarda_novo_horario[0] - 48) * 10) + (guarda_novo_horario[1] - 48), ((guarda_novo_horario[2] - 48) * 10) + (guarda_novo_horario[3] - 48))){
    2596:	48 81       	ld	r20, Y
    2598:	cb 57       	subi	r28, 0x7B	; 123
    259a:	d2 40       	sbci	r29, 0x02	; 2
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	40 53       	subi	r20, 0x30	; 48
    25a0:	51 09       	sbc	r21, r1
    25a2:	c4 58       	subi	r28, 0x84	; 132
    25a4:	dd 4f       	sbci	r29, 0xFD	; 253
    25a6:	98 81       	ld	r25, Y
    25a8:	cc 57       	subi	r28, 0x7C	; 124
    25aa:	d2 40       	sbci	r29, 0x02	; 2
    25ac:	c7 58       	subi	r28, 0x87	; 135
    25ae:	dd 4f       	sbci	r29, 0xFD	; 253
    25b0:	28 81       	ld	r18, Y
    25b2:	c9 57       	subi	r28, 0x79	; 121
    25b4:	d2 40       	sbci	r29, 0x02	; 2
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	20 53       	subi	r18, 0x30	; 48
    25ba:	31 09       	sbc	r19, r1
    25bc:	c6 58       	subi	r28, 0x86	; 134
    25be:	dd 4f       	sbci	r29, 0xFD	; 253
    25c0:	38 81       	ld	r19, Y
    25c2:	ca 57       	subi	r28, 0x7A	; 122
    25c4:	d2 40       	sbci	r29, 0x02	; 2
    25c6:	44 0f       	add	r20, r20
    25c8:	64 2f       	mov	r22, r20
    25ca:	66 0f       	add	r22, r22
    25cc:	66 0f       	add	r22, r22
    25ce:	46 0f       	add	r20, r22
    25d0:	64 2f       	mov	r22, r20
    25d2:	69 0f       	add	r22, r25
    25d4:	60 53       	subi	r22, 0x30	; 48
    25d6:	22 0f       	add	r18, r18
    25d8:	82 2f       	mov	r24, r18
    25da:	88 0f       	add	r24, r24
    25dc:	88 0f       	add	r24, r24
    25de:	28 0f       	add	r18, r24
    25e0:	82 2f       	mov	r24, r18
    25e2:	83 0f       	add	r24, r19
    25e4:	80 53       	subi	r24, 0x30	; 48
    25e6:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <setTime>
    25ea:	81 11       	cpse	r24, r1
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <main+0x1432>
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	61 e0       	ldi	r22, 0x01	; 1
								sendString_setAdress("HORARIO ALTERADO", 1, 1);
    25f2:	87 e5       	ldi	r24, 0x57	; 87
    25f4:	94 e0       	ldi	r25, 0x04	; 4
    25f6:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("  COM SUCESSO   ", 2, 1);
    25fe:	88 e6       	ldi	r24, 0x68	; 104
    2600:	94 e0       	ldi	r25, 0x04	; 4
    2602:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2606:	0c c0       	rjmp	.+24     	; 0x2620 <main+0x144a>
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	61 e0       	ldi	r22, 0x01	; 1
							}
							else{
								sendString_setAdress("VALOR INVALIDO, ", 1, 1);
    260c:	89 e7       	ldi	r24, 0x79	; 121
    260e:	94 e0       	ldi	r25, 0x04	; 4
    2610:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("TENTE NOVAMENTE ", 2, 1);
    2618:	8a e8       	ldi	r24, 0x8A	; 138
    261a:	94 e0       	ldi	r25, 0x04	; 4
    261c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2620:	60 ed       	ldi	r22, 0xD0	; 208
    2622:	77 e0       	ldi	r23, 0x07	; 7
							}
							delay_ms(2000);
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    262c:	91 2c       	mov	r9, r1
    262e:	68 94       	set
							menu_index = 4;
							option_menu_operacional = 0;
    2630:	dd 24       	eor	r13, r13
							else{
								sendString_setAdress("VALOR INVALIDO, ", 1, 1);
								sendString_setAdress("TENTE NOVAMENTE ", 2, 1);
							}
							delay_ms(2000);
							menu_index = 4;
    2632:	d2 f8       	bld	r13, 2
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <main+0x14de>
    2636:	12 34       	cpi	r17, 0x42	; 66
							option_menu_operacional = 0;
    2638:	c9 f1       	breq	.+114    	; 0x26ac <main+0x14d6>
						}
						// se a tecla for B, volta para o menu
						else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
    263a:	13 34       	cpi	r17, 0x43	; 67
    263c:	a1 f4       	brne	.+40     	; 0x2666 <main+0x1490>
						// se a tecla for C, apaga o último caractere
						else if(tecla == 'C' && input_caracters_counter > 0){
    263e:	00 23       	and	r16, r16
    2640:	91 f0       	breq	.+36     	; 0x2666 <main+0x1490>
    2642:	1f ef       	ldi	r17, 0xFF	; 255
    2644:	10 0f       	add	r17, r16
							input_caracters_counter--;
    2646:	12 30       	cpi	r17, 0x02	; 2
    2648:	28 f4       	brcc	.+10     	; 0x2654 <main+0x147e>
							if(input_caracters_counter < 2){
    264a:	80 e4       	ldi	r24, 0x40	; 64
    264c:	80 0f       	add	r24, r16
								setDdRamAddress(0x41 + input_caracters_counter);
    264e:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2652:	04 c0       	rjmp	.+8      	; 0x265c <main+0x1486>
    2654:	81 e4       	ldi	r24, 0x41	; 65
    2656:	80 0f       	add	r24, r16
							}
							else{
								setDdRamAddress(0x42 + input_caracters_counter);								
    2658:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    265c:	80 e2       	ldi	r24, 0x20	; 32
    265e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							}
							sendChar(' ');
    2662:	01 2f       	mov	r16, r17
    2664:	27 c0       	rjmp	.+78     	; 0x26b4 <main+0x14de>
						}
						// se a tecla for B, volta para o menu
						else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
						// se a tecla for C, apaga o último caractere
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    2666:	04 30       	cpi	r16, 0x04	; 4
								setDdRamAddress(0x41 + input_caracters_counter);
							}
							else{
								setDdRamAddress(0x42 + input_caracters_counter);								
							}
							sendChar(' ');
    2668:	28 f5       	brcc	.+74     	; 0x26b4 <main+0x14de>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 4 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    266a:	1a 32       	cpi	r17, 0x2A	; 42
    266c:	19 f1       	breq	.+70     	; 0x26b4 <main+0x14de>
    266e:	14 34       	cpi	r17, 0x44	; 68
    2670:	09 f1       	breq	.+66     	; 0x26b4 <main+0x14de>
    2672:	13 32       	cpi	r17, 0x23	; 35
    2674:	f9 f0       	breq	.+62     	; 0x26b4 <main+0x14de>
    2676:	11 34       	cpi	r17, 0x41	; 65
    2678:	e9 f0       	breq	.+58     	; 0x26b4 <main+0x14de>
    267a:	13 34       	cpi	r17, 0x43	; 67
    267c:	d9 f0       	breq	.+54     	; 0x26b4 <main+0x14de>
    267e:	02 30       	cpi	r16, 0x02	; 2
    2680:	28 f4       	brcc	.+10     	; 0x268c <main+0x14b6>
							if(input_caracters_counter < 2){
    2682:	81 e4       	ldi	r24, 0x41	; 65
    2684:	80 0f       	add	r24, r16
								setDdRamAddress(0x41 + input_caracters_counter);
    2686:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <main+0x14be>
    268c:	82 e4       	ldi	r24, 0x42	; 66
    268e:	80 0f       	add	r24, r16
							}
							else{
								setDdRamAddress(0x42 + input_caracters_counter);
    2690:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2694:	81 2f       	mov	r24, r17
    2696:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							}
							sendChar(tecla);
    269a:	e9 e7       	ldi	r30, 0x79	; 121
    269c:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_novo_horario[input_caracters_counter] = tecla;
    269e:	ec 0f       	add	r30, r28
    26a0:	fd 1f       	adc	r31, r29
    26a2:	e0 0f       	add	r30, r16
    26a4:	f1 1d       	adc	r31, r1
    26a6:	10 83       	st	Z, r17
    26a8:	0f 5f       	subi	r16, 0xFF	; 255
    26aa:	04 c0       	rjmp	.+8      	; 0x26b4 <main+0x14de>
							input_caracters_counter++;
    26ac:	91 2c       	mov	r9, r1
    26ae:	68 94       	set
							delay_ms(2000);
							menu_index = 4;
							option_menu_operacional = 0;
						}
						// se a tecla for B, volta para o menu
						else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
    26b0:	dd 24       	eor	r13, r13
    26b2:	d2 f8       	bld	r13, 2
    26b4:	84 e0       	ldi	r24, 0x04	; 4
    26b6:	98 16       	cp	r9, r24
							}
							sendChar(tecla);
							guarda_novo_horario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(option_menu_operacional == OPTION_TROCA_HORA);
    26b8:	09 f4       	brne	.+2      	; 0x26bc <main+0x14e6>
    26ba:	62 cf       	rjmp	.-316    	; 0x2580 <main+0x13aa>
    26bc:	f8 c1       	rjmp	.+1008   	; 0x2aae <main+0x18d8>
    26be:	85 e5       	ldi	r24, 0x55	; 85
    26c0:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
					
					break;
				
				case OPTION_VERIFICA_CORRESPONDENCIA:
					do{
						sendSerialChar('U'); sendSerialChar('V');
    26c4:	86 e5       	ldi	r24, 0x56	; 86
    26c6:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    26ca:	04 e9       	ldi	r16, 0x94	; 148
    26cc:	15 e0       	ldi	r17, 0x05	; 5
						sendSerialChar(currentTime[HOURS]); sendSerialChar(currentTime[MINUTES]); sendSerialChar(num_eleitores);
    26ce:	d8 01       	movw	r26, r16
    26d0:	8c 91       	ld	r24, X
    26d2:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    26d6:	f8 01       	movw	r30, r16
    26d8:	81 81       	ldd	r24, Z+1	; 0x01
    26da:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    26de:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <__data_end>
    26e2:	0e 94 33 1c 	call	0x3866	; 0x3866 <sendSerialChar>
    26e6:	ce 01       	movw	r24, r28
    26e8:	89 5b       	subi	r24, 0xB9	; 185
						getSerialMessage(consistencia);
    26ea:	9d 4f       	sbci	r25, 0xFD	; 253
    26ec:	0e 94 3a 1c 	call	0x3874	; 0x3874 <getSerialMessage>
    26f0:	c9 5b       	subi	r28, 0xB9	; 185
    26f2:	dd 4f       	sbci	r29, 0xFD	; 253
						if(consistencia[0] == 'M' && consistencia[1] == 'V'){
    26f4:	88 81       	ld	r24, Y
    26f6:	c7 54       	subi	r28, 0x47	; 71
    26f8:	d2 40       	sbci	r29, 0x02	; 2
    26fa:	8d 34       	cpi	r24, 0x4D	; 77
    26fc:	09 f0       	breq	.+2      	; 0x2700 <main+0x152a>
    26fe:	92 c0       	rjmp	.+292    	; 0x2824 <main+0x164e>
    2700:	c8 5b       	subi	r28, 0xB8	; 184
    2702:	dd 4f       	sbci	r29, 0xFD	; 253
    2704:	88 81       	ld	r24, Y
    2706:	c8 54       	subi	r28, 0x48	; 72
    2708:	d2 40       	sbci	r29, 0x02	; 2
    270a:	86 35       	cpi	r24, 0x56	; 86
    270c:	09 f0       	breq	.+2      	; 0x2710 <main+0x153a>
    270e:	8a c0       	rjmp	.+276    	; 0x2824 <main+0x164e>
    2710:	c7 5b       	subi	r28, 0xB7	; 183
    2712:	dd 4f       	sbci	r29, 0xFD	; 253
							if(consistencia[2] == 'O'){
    2714:	88 81       	ld	r24, Y
    2716:	c9 54       	subi	r28, 0x49	; 73
    2718:	d2 40       	sbci	r29, 0x02	; 2
    271a:	8f 34       	cpi	r24, 0x4F	; 79
    271c:	e1 f4       	brne	.+56     	; 0x2756 <main+0x1580>
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	61 e0       	ldi	r22, 0x01	; 1
								verificacao = 3;
								sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    2722:	8b e9       	ldi	r24, 0x9B	; 155
    2724:	94 e0       	ldi	r25, 0x04	; 4
    2726:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("       OK       ", 2, 1);
    272e:	8c ea       	ldi	r24, 0xAC	; 172
    2730:	94 e0       	ldi	r25, 0x04	; 4
    2732:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2736:	68 ee       	ldi	r22, 0xE8	; 232
    2738:	73 e0       	ldi	r23, 0x03	; 3
								delay_ms(1000);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    2742:	0f 2e       	mov	r0, r31
    2744:	f3 e0       	ldi	r31, 0x03	; 3
						sendSerialChar('U'); sendSerialChar('V');
						sendSerialChar(currentTime[HOURS]); sendSerialChar(currentTime[MINUTES]); sendSerialChar(num_eleitores);
						getSerialMessage(consistencia);
						if(consistencia[0] == 'M' && consistencia[1] == 'V'){
							if(consistencia[2] == 'O'){
								verificacao = 3;
    2746:	8f 2e       	mov	r8, r31
    2748:	f0 2d       	mov	r31, r0
    274a:	91 2c       	mov	r9, r1
    274c:	0f 2e       	mov	r0, r31
								sendString_setAdress("  CONSISTENCIA  ", 1, 1);
								sendString_setAdress("       OK       ", 2, 1);
								delay_ms(1000);
								option_menu_operacional = 0;
    274e:	f5 e0       	ldi	r31, 0x05	; 5
								menu_index = 5;
    2750:	df 2e       	mov	r13, r31
    2752:	f0 2d       	mov	r31, r0
    2754:	67 c0       	rjmp	.+206    	; 0x2824 <main+0x164e>
    2756:	89 34       	cpi	r24, 0x49	; 73
    2758:	91 f5       	brne	.+100    	; 0x27be <main+0x15e8>
							}
							else if(consistencia[2] == 'I'){
    275a:	83 94       	inc	r8
    275c:	f3 e0       	ldi	r31, 0x03	; 3
								verificacao++;
    275e:	8f 12       	cpse	r8, r31
								if(verificacao == 3){
    2760:	61 c0       	rjmp	.+194    	; 0x2824 <main+0x164e>
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	61 e0       	ldi	r22, 0x01	; 1
									urna_estado = BLOQUEADA;
									sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    2766:	8b e9       	ldi	r24, 0x9B	; 155
    2768:	94 e0       	ldi	r25, 0x04	; 4
    276a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("     FALHOU     ", 2, 1);
    2772:	8d eb       	ldi	r24, 0xBD	; 189
    2774:	94 e0       	ldi	r25, 0x04	; 4
    2776:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    277a:	68 ee       	ldi	r22, 0xE8	; 232
    277c:	73 e0       	ldi	r23, 0x03	; 3
									delay_ms(1000);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	61 e0       	ldi	r22, 0x01	; 1
									sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    278a:	85 eb       	ldi	r24, 0xB5	; 181
    278c:	93 e0       	ldi	r25, 0x03	; 3
    278e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("      ...       ", 2, 1);
    2796:	86 ec       	ldi	r24, 0xC6	; 198
    2798:	93 e0       	ldi	r25, 0x03	; 3
    279a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    279e:	68 ee       	ldi	r22, 0xE8	; 232
    27a0:	73 e0       	ldi	r23, 0x03	; 3
									delay_ms(1000);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    27aa:	91 2c       	mov	r9, r1
    27ac:	dd 24       	eor	r13, r13
									option_menu_operacional = 0;
    27ae:	d3 94       	inc	r13
									menu_index = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	cd 57       	subi	r28, 0x7D	; 125
								menu_index = 5;
							}
							else if(consistencia[2] == 'I'){
								verificacao++;
								if(verificacao == 3){
									urna_estado = BLOQUEADA;
    27b4:	dd 4f       	sbci	r29, 0xFD	; 253
    27b6:	88 83       	st	Y, r24
    27b8:	c3 58       	subi	r28, 0x83	; 131
    27ba:	d2 40       	sbci	r29, 0x02	; 2
    27bc:	33 c0       	rjmp	.+102    	; 0x2824 <main+0x164e>
    27be:	88 35       	cpi	r24, 0x58	; 88
    27c0:	89 f5       	brne	.+98     	; 0x2824 <main+0x164e>
									option_menu_operacional = 0;
									menu_index = 1;
								}
								
							}
							else if(consistencia[2] == 'X'){
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	61 e0       	ldi	r22, 0x01	; 1
								verificacao = 3;
								urna_estado = BLOQUEADA;
								sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    27c6:	8b e9       	ldi	r24, 0x9B	; 155
    27c8:	94 e0       	ldi	r25, 0x04	; 4
    27ca:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("     FALHOU     ", 2, 1);
    27d2:	8d eb       	ldi	r24, 0xBD	; 189
    27d4:	94 e0       	ldi	r25, 0x04	; 4
    27d6:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    27da:	68 ee       	ldi	r22, 0xE8	; 232
    27dc:	73 e0       	ldi	r23, 0x03	; 3
								delay_ms(1000);
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	61 e0       	ldi	r22, 0x01	; 1
								sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    27ea:	85 eb       	ldi	r24, 0xB5	; 181
    27ec:	93 e0       	ldi	r25, 0x03	; 3
    27ee:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("      ...       ", 2, 1);
    27f6:	86 ec       	ldi	r24, 0xC6	; 198
    27f8:	93 e0       	ldi	r25, 0x03	; 3
    27fa:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    27fe:	68 ee       	ldi	r22, 0xE8	; 232
    2800:	73 e0       	ldi	r23, 0x03	; 3
								delay_ms(1000);
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <delay_ms>
    280a:	0f 2e       	mov	r0, r31
    280c:	f3 e0       	ldi	r31, 0x03	; 3
									menu_index = 1;
								}
								
							}
							else if(consistencia[2] == 'X'){
								verificacao = 3;
    280e:	8f 2e       	mov	r8, r31
    2810:	f0 2d       	mov	r31, r0
    2812:	91 2c       	mov	r9, r1
    2814:	dd 24       	eor	r13, r13
								sendString_setAdress("     FALHOU     ", 2, 1);
								delay_ms(1000);
								sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
								sendString_setAdress("      ...       ", 2, 1);
								delay_ms(1000);
								option_menu_operacional = 0;
    2816:	d3 94       	inc	r13
								menu_index = 1;
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	cd 57       	subi	r28, 0x7D	; 125
								}
								
							}
							else if(consistencia[2] == 'X'){
								verificacao = 3;
								urna_estado = BLOQUEADA;
    281c:	dd 4f       	sbci	r29, 0xFD	; 253
    281e:	98 83       	st	Y, r25
    2820:	c3 58       	subi	r28, 0x83	; 131
    2822:	d2 40       	sbci	r29, 0x02	; 2
    2824:	a2 e0       	ldi	r26, 0x02	; 2
    2826:	a8 15       	cp	r26, r8
								delay_ms(1000);
								option_menu_operacional = 0;
								menu_index = 1;
							}
						}
					} while(verificacao < 3);
    2828:	08 f0       	brcs	.+2      	; 0x282c <main+0x1656>
    282a:	49 cf       	rjmp	.-366    	; 0x26be <main+0x14e8>
    282c:	40 c1       	rjmp	.+640    	; 0x2aae <main+0x18d8>
    282e:	fe 01       	movw	r30, r28
    2830:	e2 58       	subi	r30, 0x82	; 130
					// TO DO
					break;

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
					char guarda_novasenha1_mesario[5] = {0};
    2832:	fd 4f       	sbci	r31, 0xFD	; 253
    2834:	85 e0       	ldi	r24, 0x05	; 5
    2836:	df 01       	movw	r26, r30
    2838:	98 2f       	mov	r25, r24
    283a:	1d 92       	st	X+, r1
    283c:	9a 95       	dec	r25
    283e:	e9 f7       	brne	.-6      	; 0x283a <main+0x1664>
    2840:	35 97       	sbiw	r30, 0x05	; 5
    2842:	df 01       	movw	r26, r30
					char guarda_novasenha2_mesario[5] = {0};
    2844:	1d 92       	st	X+, r1
    2846:	8a 95       	dec	r24
    2848:	e9 f7       	brne	.-6      	; 0x2844 <main+0x166e>
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	61 e0       	ldi	r22, 0x01	; 1
					char b = 1;
					// primeiro pedido de nova senha
					sendString_setAdress("Nova Senha:     ", 1, 1);
    284e:	80 ef       	ldi	r24, 0xF0	; 240
    2850:	94 e0       	ldi	r25, 0x04	; 4
    2852:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    285a:	82 e5       	ldi	r24, 0x52	; 82
    285c:	92 e0       	ldi	r25, 0x02	; 2
    285e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2862:	82 e4       	ldi	r24, 0x42	; 66
    2864:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 2);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RIGHT_OPTION_CHARACTER);
    286e:	88 e4       	ldi	r24, 0x48	; 72
    2870:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 8);
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RETURN_CHARACTER);
    287a:	8e e4       	ldi	r24, 0x4E	; 78
					setDdRamAddress(0x40 + 14);
    287c:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2880:	8f e7       	ldi	r24, 0x7F	; 127
					sendChar(LEFT_ARROW_CHARACTER);
    2882:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2886:	01 e0       	ldi	r16, 0x01	; 1

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
					char guarda_novasenha1_mesario[5] = {0};
					char guarda_novasenha2_mesario[5] = {0};
					char b = 1;
    2888:	f1 2c       	mov	r15, r1
				case OPTION_RELATORIO_VOTACAO:
					// TO DO
					break;

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
    288a:	55 d7       	rcall	.+3754   	; 0x3736 <get_tecla>
					sendChar(RETURN_CHARACTER);
					setDdRamAddress(0x40 + 14);
					sendChar(LEFT_ARROW_CHARACTER);

					do{
						tecla = get_tecla();
    288c:	18 2f       	mov	r17, r24
    288e:	81 34       	cpi	r24, 0x41	; 65
    2890:	19 f4       	brne	.+6      	; 0x2898 <main+0x16c2>
						// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
						if(tecla == 'A' && input_caracters_counter == 5){
    2892:	b5 e0       	ldi	r27, 0x05	; 5
    2894:	fb 16       	cp	r15, r27
    2896:	51 f1       	breq	.+84     	; 0x28ec <main+0x1716>
    2898:	12 34       	cpi	r17, 0x42	; 66
    289a:	51 f1       	breq	.+84     	; 0x28f0 <main+0x171a>
							b = 2;
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
    289c:	13 34       	cpi	r17, 0x43	; 67
    289e:	59 f4       	brne	.+22     	; 0x28b6 <main+0x16e0>
							option_menu_operacional = 0;
							b = 3;
						}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    28a0:	1f ef       	ldi	r17, 0xFF	; 255
    28a2:	1f 0d       	add	r17, r15
							input_caracters_counter--;
    28a4:	8a e0       	ldi	r24, 0x0A	; 10
    28a6:	8f 0d       	add	r24, r15
							setDdRamAddress(11 + input_caracters_counter);
    28a8:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    28ac:	80 e2       	ldi	r24, 0x20	; 32
    28ae:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    28b2:	f1 2e       	mov	r15, r17
    28b4:	1f c0       	rjmp	.+62     	; 0x28f4 <main+0x171e>
							option_menu_operacional = 0;
							b = 3;
						}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
							input_caracters_counter--;
    28b6:	e4 e0       	ldi	r30, 0x04	; 4
    28b8:	ef 15       	cp	r30, r15
							setDdRamAddress(11 + input_caracters_counter);
							sendChar(' ');
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    28ba:	e0 f0       	brcs	.+56     	; 0x28f4 <main+0x171e>
    28bc:	1a 32       	cpi	r17, 0x2A	; 42
    28be:	d1 f0       	breq	.+52     	; 0x28f4 <main+0x171e>
    28c0:	14 34       	cpi	r17, 0x44	; 68
    28c2:	c1 f0       	breq	.+48     	; 0x28f4 <main+0x171e>
    28c4:	13 32       	cpi	r17, 0x23	; 35
    28c6:	b1 f0       	breq	.+44     	; 0x28f4 <main+0x171e>
    28c8:	11 34       	cpi	r17, 0x41	; 65
    28ca:	a1 f0       	breq	.+40     	; 0x28f4 <main+0x171e>
    28cc:	8b e0       	ldi	r24, 0x0B	; 11
    28ce:	8f 0d       	add	r24, r15
							setDdRamAddress(11 + input_caracters_counter);
    28d0:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    28d4:	8a e2       	ldi	r24, 0x2A	; 42
    28d6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar('*');
    28da:	ee e7       	ldi	r30, 0x7E	; 126
    28dc:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_novasenha1_mesario[input_caracters_counter] = tecla;
    28de:	ec 0f       	add	r30, r28
    28e0:	fd 1f       	adc	r31, r29
    28e2:	ef 0d       	add	r30, r15
    28e4:	f1 1d       	adc	r31, r1
    28e6:	10 83       	st	Z, r17
    28e8:	f3 94       	inc	r15
    28ea:	04 c0       	rjmp	.+8      	; 0x28f4 <main+0x171e>
							input_caracters_counter++;
    28ec:	02 e0       	ldi	r16, 0x02	; 2
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <main+0x171e>

					do{
						tecla = get_tecla();
						// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
						if(tecla == 'A' && input_caracters_counter == 5){
							b = 2;
    28f0:	03 e0       	ldi	r16, 0x03	; 3
    28f2:	91 2c       	mov	r9, r1
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
							option_menu_operacional = 0;
							b = 3;
    28f4:	01 30       	cpi	r16, 0x01	; 1
						if(tecla == 'A' && input_caracters_counter == 5){
							b = 2;
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
							option_menu_operacional = 0;
    28f6:	49 f2       	breq	.-110    	; 0x288a <main+0x16b4>
							setDdRamAddress(11 + input_caracters_counter);
							sendChar('*');
							guarda_novasenha1_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(b == 1);
    28f8:	03 30       	cpi	r16, 0x03	; 3
    28fa:	09 f4       	brne	.+2      	; 0x28fe <main+0x1728>
					
					if(b != 3){
    28fc:	d3 c0       	rjmp	.+422    	; 0x2aa4 <main+0x18ce>
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	61 e0       	ldi	r22, 0x01	; 1
						sendString_setAdress(" Repita a Nova  ", 1, 1);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	95 e0       	ldi	r25, 0x05	; 5
    2906:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
    290e:	82 e1       	ldi	r24, 0x12	; 18
    2910:	95 e0       	ldi	r25, 0x05	; 5
    2912:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    291c:	81 e4       	ldi	r24, 0x41	; 65
    291e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2922:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	61 e0       	ldi	r22, 0x01	; 1

						// segundo pedido de nova senha
						input_caracters_counter = 0;
						sendString_setAdress("Nova Senha:     ", 1, 1);
    292a:	80 ef       	ldi	r24, 0xF0	; 240
    292c:	94 e0       	ldi	r25, 0x04	; 4
    292e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("A:    B:    C:  ", 2, 1);
    2936:	82 e5       	ldi	r24, 0x52	; 82
    2938:	92 e0       	ldi	r25, 0x02	; 2
    293a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    293e:	82 e4       	ldi	r24, 0x42	; 66
    2940:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 2);
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(RIGHT_OPTION_CHARACTER);
    294a:	88 e4       	ldi	r24, 0x48	; 72
    294c:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 8);
    2950:	82 e0       	ldi	r24, 0x02	; 2
						sendChar(RETURN_CHARACTER);
    2952:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2956:	8e e4       	ldi	r24, 0x4E	; 78
						setDdRamAddress(0x40 + 14);
    2958:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    295c:	8f e7       	ldi	r24, 0x7F	; 127
						sendChar(LEFT_ARROW_CHARACTER);
    295e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2962:	f1 2c       	mov	r15, r1
						sendString_setAdress(" Repita a Nova  ", 1, 1);
						sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
						tecla = getCharacter_AB();

						// segundo pedido de nova senha
						input_caracters_counter = 0;
    2964:	e8 d6       	rcall	.+3536   	; 0x3736 <get_tecla>
						setDdRamAddress(0x40 + 14);
						sendChar(LEFT_ARROW_CHARACTER);

						unsigned char a, i;
						do{
							tecla = get_tecla();
    2966:	18 2f       	mov	r17, r24
    2968:	81 34       	cpi	r24, 0x41	; 65
    296a:	09 f0       	breq	.+2      	; 0x296e <main+0x1798>
							// se tecla A e senha com 5 dígitos, confere senhas
							if(tecla == 'A' && input_caracters_counter == 5){
    296c:	63 c0       	rjmp	.+198    	; 0x2a34 <main+0x185e>
    296e:	f5 e0       	ldi	r31, 0x05	; 5
    2970:	ff 12       	cpse	r15, r31
    2972:	60 c0       	rjmp	.+192    	; 0x2a34 <main+0x185e>
    2974:	15 c0       	rjmp	.+42     	; 0x29a0 <main+0x17ca>
    2976:	82 2f       	mov	r24, r18
    2978:	90 e0       	ldi	r25, 0x00	; 0
								a = 0;
								for(i = 0; i < 5; i++){
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
    297a:	ee e7       	ldi	r30, 0x7E	; 126
    297c:	f2 e0       	ldi	r31, 0x02	; 2
    297e:	ec 0f       	add	r30, r28
    2980:	fd 1f       	adc	r31, r29
    2982:	e8 0f       	add	r30, r24
    2984:	f9 1f       	adc	r31, r25
    2986:	30 81       	ld	r19, Z
    2988:	e9 e7       	ldi	r30, 0x79	; 121
    298a:	f2 e0       	ldi	r31, 0x02	; 2
    298c:	ec 0f       	add	r30, r28
    298e:	fd 1f       	adc	r31, r29
    2990:	e8 0f       	add	r30, r24
    2992:	f9 1f       	adc	r31, r25
    2994:	80 81       	ld	r24, Z
    2996:	38 13       	cpse	r19, r24
    2998:	01 c0       	rjmp	.+2      	; 0x299c <main+0x17c6>
    299a:	4f 5f       	subi	r20, 0xFF	; 255
    299c:	2f 5f       	subi	r18, 0xFF	; 255
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <main+0x17ce>
						do{
							tecla = get_tecla();
							// se tecla A e senha com 5 dígitos, confere senhas
							if(tecla == 'A' && input_caracters_counter == 5){
								a = 0;
								for(i = 0; i < 5; i++){
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	25 30       	cpi	r18, 0x05	; 5
    29a6:	38 f3       	brcs	.-50     	; 0x2976 <main+0x17a0>
    29a8:	45 30       	cpi	r20, 0x05	; 5
    29aa:	49 f5       	brne	.+82     	; 0x29fe <main+0x1828>
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
								}
								menu_index = OPTION_TROCA_SENHA;
								if(a == 5){
    29ac:	12 c0       	rjmp	.+36     	; 0x29d2 <main+0x17fc>
    29ae:	82 2f       	mov	r24, r18
    29b0:	90 e0       	ldi	r25, 0x00	; 0
									for(i = 0; i < 5; i++) {guarda_senha_mesario[i] = guarda_novasenha1_mesario[i];}
    29b2:	ee e7       	ldi	r30, 0x7E	; 126
    29b4:	f2 e0       	ldi	r31, 0x02	; 2
    29b6:	ec 0f       	add	r30, r28
    29b8:	fd 1f       	adc	r31, r29
    29ba:	e8 0f       	add	r30, r24
    29bc:	f9 1f       	adc	r31, r25
    29be:	30 81       	ld	r19, Z
    29c0:	e3 e3       	ldi	r30, 0x33	; 51
    29c2:	f2 e0       	ldi	r31, 0x02	; 2
    29c4:	ec 0f       	add	r30, r28
    29c6:	fd 1f       	adc	r31, r29
    29c8:	e8 0f       	add	r30, r24
    29ca:	f9 1f       	adc	r31, r25
    29cc:	30 83       	st	Z, r19
    29ce:	2f 5f       	subi	r18, 0xFF	; 255
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <main+0x17fe>
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	25 30       	cpi	r18, 0x05	; 5
    29d6:	58 f3       	brcs	.-42     	; 0x29ae <main+0x17d8>
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	61 e0       	ldi	r22, 0x01	; 1
									sendString_setAdress(" Troca de Senha ", 1, 1);
    29dc:	81 e2       	ldi	r24, 0x21	; 33
    29de:	95 e0       	ldi	r25, 0x05	; 5
    29e0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("    Efetuada  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    29e8:	82 e3       	ldi	r24, 0x32	; 50
    29ea:	95 e0       	ldi	r25, 0x05	; 5
    29ec:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    29f6:	82 e4       	ldi	r24, 0x42	; 66
    29f8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    29fc:	12 c0       	rjmp	.+36     	; 0x2a22 <main+0x184c>
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	61 e0       	ldi	r22, 0x01	; 1
								}
								else{
									sendString_setAdress("   Senhas Nao   ", 1, 1);
    2a02:	81 e4       	ldi	r24, 0x41	; 65
    2a04:	95 e0       	ldi	r25, 0x05	; 5
    2a06:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    2a0e:	82 e5       	ldi	r24, 0x52	; 82
    2a10:	95 e0       	ldi	r25, 0x05	; 5
    2a12:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2a1c:	82 e4       	ldi	r24, 0x42	; 66
    2a1e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2a22:	0e 94 ab 03 	call	0x756	; 0x756 <getCharacter_B>
								}
								tecla = getCharacter_B();
    2a26:	03 e0       	ldi	r16, 0x03	; 3
    2a28:	91 2c       	mov	r9, r1
								option_menu_operacional = 0;
								b = 3;
    2a2a:	0f 2e       	mov	r0, r31
								else{
									sendString_setAdress("   Senhas Nao   ", 1, 1);
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
								}
								tecla = getCharacter_B();
								option_menu_operacional = 0;
    2a2c:	f7 e0       	ldi	r31, 0x07	; 7
							if(tecla == 'A' && input_caracters_counter == 5){
								a = 0;
								for(i = 0; i < 5; i++){
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
								}
								menu_index = OPTION_TROCA_SENHA;
    2a2e:	df 2e       	mov	r13, r31
    2a30:	f0 2d       	mov	r31, r0
    2a32:	30 c0       	rjmp	.+96     	; 0x2a94 <main+0x18be>
    2a34:	12 34       	cpi	r17, 0x42	; 66
									sendString_setAdress("   Senhas Nao   ", 1, 1);
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
								}
								tecla = getCharacter_B();
								option_menu_operacional = 0;
								b = 3;
    2a36:	41 f1       	breq	.+80     	; 0x2a88 <main+0x18b2>
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
    2a38:	13 34       	cpi	r17, 0x43	; 67
    2a3a:	59 f4       	brne	.+22     	; 0x2a52 <main+0x187c>
								option_menu_operacional = 0;
								menu_index = OPTION_TROCA_SENHA;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    2a3c:	1f ef       	ldi	r17, 0xFF	; 255
    2a3e:	1f 0d       	add	r17, r15
								input_caracters_counter--;
    2a40:	8a e0       	ldi	r24, 0x0A	; 10
    2a42:	8f 0d       	add	r24, r15
								setDdRamAddress(11 + input_caracters_counter);
    2a44:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2a48:	80 e2       	ldi	r24, 0x20	; 32
    2a4a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar(' ');
    2a4e:	f1 2e       	mov	r15, r17
    2a50:	21 c0       	rjmp	.+66     	; 0x2a94 <main+0x18be>
								menu_index = OPTION_TROCA_SENHA;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
								input_caracters_counter--;
    2a52:	84 e0       	ldi	r24, 0x04	; 4
    2a54:	8f 15       	cp	r24, r15
								setDdRamAddress(11 + input_caracters_counter);
								sendChar(' ');
							}
							// se for um caractere válido e ainda não tiver execedido o limite, é contabilizado
							else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    2a56:	f0 f0       	brcs	.+60     	; 0x2a94 <main+0x18be>
    2a58:	1a 32       	cpi	r17, 0x2A	; 42
    2a5a:	e1 f0       	breq	.+56     	; 0x2a94 <main+0x18be>
    2a5c:	14 34       	cpi	r17, 0x44	; 68
    2a5e:	d1 f0       	breq	.+52     	; 0x2a94 <main+0x18be>
    2a60:	13 32       	cpi	r17, 0x23	; 35
    2a62:	c1 f0       	breq	.+48     	; 0x2a94 <main+0x18be>
    2a64:	11 34       	cpi	r17, 0x41	; 65
    2a66:	b1 f0       	breq	.+44     	; 0x2a94 <main+0x18be>
    2a68:	8b e0       	ldi	r24, 0x0B	; 11
    2a6a:	8f 0d       	add	r24, r15
								setDdRamAddress(11 + input_caracters_counter);
    2a6c:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2a70:	8a e2       	ldi	r24, 0x2A	; 42
    2a72:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar('*');
    2a76:	e9 e7       	ldi	r30, 0x79	; 121
    2a78:	f2 e0       	ldi	r31, 0x02	; 2
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
    2a7a:	ec 0f       	add	r30, r28
    2a7c:	fd 1f       	adc	r31, r29
    2a7e:	ef 0d       	add	r30, r15
    2a80:	f1 1d       	adc	r31, r1
    2a82:	10 83       	st	Z, r17
    2a84:	f3 94       	inc	r15
    2a86:	06 c0       	rjmp	.+12     	; 0x2a94 <main+0x18be>
								input_caracters_counter++;
    2a88:	03 e0       	ldi	r16, 0x03	; 3
    2a8a:	91 2c       	mov	r9, r1
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
								menu_index = OPTION_TROCA_SENHA;
								b = 3;
    2a8c:	0f 2e       	mov	r0, r31
								option_menu_operacional = 0;
								b = 3;
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
    2a8e:	f7 e0       	ldi	r31, 0x07	; 7
								menu_index = OPTION_TROCA_SENHA;
    2a90:	df 2e       	mov	r13, r31
    2a92:	f0 2d       	mov	r31, r0
    2a94:	02 30       	cpi	r16, 0x02	; 2
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <main+0x18c4>
								setDdRamAddress(11 + input_caracters_counter);
								sendChar('*');
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(b == 2);
    2a98:	65 cf       	rjmp	.-310    	; 0x2964 <main+0x178e>
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <main+0x18d8>
    2a9c:	91 2c       	mov	r9, r1
    2a9e:	dd 24       	eor	r13, r13
						menu_index = 1;
						sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
						sendString_setAdress("      ...       ", 2, 1);
						delay_ms(1000);
					}
					else if(tecla == 'A') {option_menu_operacional = 0; menu_index = 1;}
    2aa0:	d3 94       	inc	r13
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <main+0x18d8>
    2aa4:	91 2c       	mov	r9, r1
    2aa6:	0f 2e       	mov	r0, r31
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(b == 2);
					}
					else {option_menu_operacional = 0; menu_index = OPTION_TROCA_SENHA;}
    2aa8:	f7 e0       	ldi	r31, 0x07	; 7
    2aaa:	df 2e       	mov	r13, r31
    2aac:	f0 2d       	mov	r31, r0
    2aae:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <currentTime>
				
				case OPTION_RESET_SENHA:

					break;
			}
			if(currentTime[HOURS] >= 8 && (currentTime[HOURS] < 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] < 15))){
    2ab2:	88 30       	cpi	r24, 0x08	; 8
    2ab4:	80 f0       	brcs	.+32     	; 0x2ad6 <main+0x1900>
    2ab6:	81 31       	cpi	r24, 0x11	; 17
    2ab8:	30 f0       	brcs	.+12     	; 0x2ac6 <main+0x18f0>
    2aba:	81 31       	cpi	r24, 0x11	; 17
    2abc:	61 f4       	brne	.+24     	; 0x2ad6 <main+0x1900>
    2abe:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <currentTime+0x1>
    2ac2:	9f 30       	cpi	r25, 0x0F	; 15
    2ac4:	40 f4       	brcc	.+16     	; 0x2ad6 <main+0x1900>
    2ac6:	cd 57       	subi	r28, 0x7D	; 125
    2ac8:	dd 4f       	sbci	r29, 0xFD	; 253
				if(urna_estado != BLOQUEADA){
    2aca:	98 81       	ld	r25, Y
    2acc:	c3 58       	subi	r28, 0x83	; 131
    2ace:	d2 40       	sbci	r29, 0x02	; 2
    2ad0:	91 30       	cpi	r25, 0x01	; 1
    2ad2:	59 f5       	brne	.+86     	; 0x2b2a <main+0x1954>
    2ad4:	30 c0       	rjmp	.+96     	; 0x2b36 <main+0x1960>
    2ad6:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <__data_end>
					urna_estado = OPERACIONAL;
				}
			}
			else if(num_eleitores + num_justificativas >= 33 || currentTime[HOURS] > 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] > 14)){
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	21 32       	cpi	r18, 0x21	; 33
    2ade:	31 05       	cpc	r19, r1
    2ae0:	44 f4       	brge	.+16     	; 0x2af2 <main+0x191c>
    2ae2:	82 31       	cpi	r24, 0x12	; 18
    2ae4:	30 f4       	brcc	.+12     	; 0x2af2 <main+0x191c>
    2ae6:	81 31       	cpi	r24, 0x11	; 17
    2ae8:	31 f5       	brne	.+76     	; 0x2b36 <main+0x1960>
    2aea:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <currentTime+0x1>
    2aee:	8f 30       	cpi	r24, 0x0F	; 15
    2af0:	10 f1       	brcs	.+68     	; 0x2b36 <main+0x1960>
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	61 e0       	ldi	r22, 0x01	; 1
				urna_estado = ENCERRADA;
				sendString_setAdress("      URNA      ", 1, 1);
    2af6:	84 e9       	ldi	r24, 0x94	; 148
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2afe:	41 e0       	ldi	r20, 0x01	; 1
				sendString_setAdress("    ENCERRADA   ", 2, 1);
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	85 ea       	ldi	r24, 0xA5	; 165
    2b04:	92 e0       	ldi	r25, 0x02	; 2
    2b06:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2b0a:	60 ed       	ldi	r22, 0xD0	; 208
				delay_ms(2000);
    2b0c:	77 e0       	ldi	r23, 0x07	; 7
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	75 d7       	rcall	.+3818   	; 0x39fe <delay_ms>
    2b14:	71 2c       	mov	r7, r1
    2b16:	91 2c       	mov	r9, r1
				encerrada_bloqueada = 0;
    2b18:	dd 24       	eor	r13, r13
				menu_index = 1;
				option_menu_operacional = 0;
    2b1a:	d3 94       	inc	r13
				urna_estado = ENCERRADA;
				sendString_setAdress("      URNA      ", 1, 1);
				sendString_setAdress("    ENCERRADA   ", 2, 1);
				delay_ms(2000);
				encerrada_bloqueada = 0;
				menu_index = 1;
    2b1c:	a4 e0       	ldi	r26, 0x04	; 4
    2b1e:	cd 57       	subi	r28, 0x7D	; 125
				if(urna_estado != BLOQUEADA){
					urna_estado = OPERACIONAL;
				}
			}
			else if(num_eleitores + num_justificativas >= 33 || currentTime[HOURS] > 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] > 14)){
				urna_estado = ENCERRADA;
    2b20:	dd 4f       	sbci	r29, 0xFD	; 253
    2b22:	a8 83       	st	Y, r26
    2b24:	c3 58       	subi	r28, 0x83	; 131
    2b26:	d2 40       	sbci	r29, 0x02	; 2
    2b28:	06 c0       	rjmp	.+12     	; 0x2b36 <main+0x1960>
    2b2a:	b2 e0       	ldi	r27, 0x02	; 2
    2b2c:	cd 57       	subi	r28, 0x7D	; 125

					break;
			}
			if(currentTime[HOURS] >= 8 && (currentTime[HOURS] < 17 || (currentTime[HOURS] == 17 && currentTime[MINUTES] < 15))){
				if(urna_estado != BLOQUEADA){
					urna_estado = OPERACIONAL;
    2b2e:	dd 4f       	sbci	r29, 0xFD	; 253
    2b30:	b8 83       	st	Y, r27
    2b32:	c3 58       	subi	r28, 0x83	; 131
    2b34:	d2 40       	sbci	r29, 0x02	; 2
    2b36:	cd 57       	subi	r28, 0x7D	; 125
    2b38:	dd 4f       	sbci	r29, 0xFD	; 253
				menu_index = 1;
				option_menu_operacional = 0;
			}
		}
		
		while(urna_estado == AGUARDANDO){
    2b3a:	e8 81       	ld	r30, Y
    2b3c:	c3 58       	subi	r28, 0x83	; 131
    2b3e:	d2 40       	sbci	r29, 0x02	; 2
    2b40:	e3 30       	cpi	r30, 0x03	; 3
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <main+0x1970>
    2b44:	66 cb       	rjmp	.-2356   	; 0x2212 <main+0x103c>
    2b46:	64 c5       	rjmp	.+2760   	; 0x3610 <main+0x243a>
    2b48:	77 20       	and	r7, r7
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <main+0x1978>
				option_menu_operacional = 0;
			}
		}
		
		while(urna_estado == ENCERRADA){
			if(encerrada_bloqueada){
    2b4c:	2b c1       	rjmp	.+598    	; 0x2da4 <main+0x1bce>
    2b4e:	f2 e0       	ldi	r31, 0x02	; 2
    2b50:	df 16       	cp	r13, r31
				switch(menu_index){
    2b52:	11 f1       	breq	.+68     	; 0x2b98 <main+0x19c2>
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	d8 16       	cp	r13, r24
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <main+0x1986>
    2b5a:	7e c0       	rjmp	.+252    	; 0x2c58 <main+0x1a82>
    2b5c:	91 e0       	ldi	r25, 0x01	; 1
    2b5e:	d9 12       	cpse	r13, r25
    2b60:	57 c5       	rjmp	.+2734   	; 0x3610 <main+0x243a>
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	61 e0       	ldi	r22, 0x01	; 1
					case 1:
					sendString_setAdress("      Urna      ", 1, 1);
    2b66:	81 e2       	ldi	r24, 0x21	; 33
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    2b6a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("   Encerrada  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
    2b72:	80 e7       	ldi	r24, 0x70	; 112
    2b74:	95 e0       	ldi	r25, 0x05	; 5
    2b76:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2b80:	81 e4       	ldi	r24, 0x41	; 65
    2b82:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2b86:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
					tecla = getCharacter_AB();
    2b8a:	81 34       	cpi	r24, 0x41	; 65
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <main+0x19ba>
					// se a tecla apertada for A, espera o login do mesário
					if(tecla == 'A') {menu_index = 2; /*break;*/}
    2b8e:	40 c5       	rjmp	.+2688   	; 0x3610 <main+0x243a>
    2b90:	68 94       	set
    2b92:	dd 24       	eor	r13, r13
    2b94:	d1 f8       	bld	r13, 1
    2b96:	3c c5       	rjmp	.+2680   	; 0x3610 <main+0x243a>
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	61 e0       	ldi	r22, 0x01	; 1
					else {menu_index = 1; /*break;*/}
					break;
					// login do mesário
					case 2:
					input_caracters_counter = 0;
					sendString_setAdress("Login adm:      ", 1, 1);
    2b9c:	81 e4       	ldi	r24, 0x41	; 65
    2b9e:	92 e0       	ldi	r25, 0x02	; 2
    2ba0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    2ba8:	82 e5       	ldi	r24, 0x52	; 82
    2baa:	92 e0       	ldi	r25, 0x02	; 2
    2bac:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2bb0:	82 e4       	ldi	r24, 0x42	; 66
    2bb2:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 2);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RIGHT_OPTION_CHARACTER);
    2bbc:	88 e4       	ldi	r24, 0x48	; 72
    2bbe:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 8);
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RETURN_CHARACTER);
    2bc8:	8e e4       	ldi	r24, 0x4E	; 78
					setDdRamAddress(0x40 + 14);
    2bca:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2bce:	8f e7       	ldi	r24, 0x7F	; 127
					sendChar(LEFT_ARROW_CHARACTER);
    2bd0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2bd4:	88 e0       	ldi	r24, 0x08	; 8
					setDdRamAddress(8);
    2bd6:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2bda:	00 e0       	ldi	r16, 0x00	; 0
					if(tecla == 'A') {menu_index = 2; /*break;*/}
					else {menu_index = 1; /*break;*/}
					break;
					// login do mesário
					case 2:
					input_caracters_counter = 0;
    2bdc:	ac d5       	rcall	.+2904   	; 0x3736 <get_tecla>
					setDdRamAddress(0x40 + 14);
					sendChar(LEFT_ARROW_CHARACTER);
					setDdRamAddress(8);

					do{
						tecla = get_tecla();
    2bde:	18 2f       	mov	r17, r24
    2be0:	81 34       	cpi	r24, 0x41	; 65
    2be2:	11 f4       	brne	.+4      	; 0x2be8 <main+0x1a12>
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5) {menu_index = 3;}
    2be4:	05 30       	cpi	r16, 0x05	; 5
    2be6:	69 f1       	breq	.+90     	; 0x2c42 <main+0x1a6c>
    2be8:	12 34       	cpi	r17, 0x42	; 66
    2bea:	81 f1       	breq	.+96     	; 0x2c4c <main+0x1a76>
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    2bec:	13 34       	cpi	r17, 0x43	; 67
    2bee:	69 f4       	brne	.+26     	; 0x2c0a <main+0x1a34>
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
    2bf0:	00 23       	and	r16, r16
    2bf2:	59 f0       	breq	.+22     	; 0x2c0a <main+0x1a34>
    2bf4:	1f ef       	ldi	r17, 0xFF	; 255
    2bf6:	10 0f       	add	r17, r16
							input_caracters_counter--;
    2bf8:	89 e0       	ldi	r24, 0x09	; 9
    2bfa:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    2bfc:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2c00:	80 e2       	ldi	r24, 0x20	; 32
    2c02:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    2c06:	01 2f       	mov	r16, r17
    2c08:	23 c0       	rjmp	.+70     	; 0x2c50 <main+0x1a7a>
						if(tecla == 'A' && input_caracters_counter == 5) {menu_index = 3;}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    2c0a:	05 30       	cpi	r16, 0x05	; 5
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(' ');
    2c0c:	08 f5       	brcc	.+66     	; 0x2c50 <main+0x1a7a>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    2c0e:	1a 32       	cpi	r17, 0x2A	; 42
    2c10:	f9 f0       	breq	.+62     	; 0x2c50 <main+0x1a7a>
    2c12:	14 34       	cpi	r17, 0x44	; 68
    2c14:	e9 f0       	breq	.+58     	; 0x2c50 <main+0x1a7a>
    2c16:	13 32       	cpi	r17, 0x23	; 35
    2c18:	d9 f0       	breq	.+54     	; 0x2c50 <main+0x1a7a>
    2c1a:	11 34       	cpi	r17, 0x41	; 65
    2c1c:	c9 f0       	breq	.+50     	; 0x2c50 <main+0x1a7a>
    2c1e:	13 34       	cpi	r17, 0x43	; 67
    2c20:	b9 f0       	breq	.+46     	; 0x2c50 <main+0x1a7a>
    2c22:	8a e0       	ldi	r24, 0x0A	; 10
    2c24:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    2c26:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2c2a:	81 2f       	mov	r24, r17
    2c2c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(tecla);
    2c30:	e8 e3       	ldi	r30, 0x38	; 56
    2c32:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_login_mesario[input_caracters_counter] = tecla;
    2c34:	ec 0f       	add	r30, r28
    2c36:	fd 1f       	adc	r31, r29
    2c38:	e0 0f       	add	r30, r16
    2c3a:	f1 1d       	adc	r31, r1
    2c3c:	10 83       	st	Z, r17
    2c3e:	0f 5f       	subi	r16, 0xFF	; 255
    2c40:	07 c0       	rjmp	.+14     	; 0x2c50 <main+0x1a7a>
							input_caracters_counter++;
    2c42:	0f 2e       	mov	r0, r31
    2c44:	f3 e0       	ldi	r31, 0x03	; 3
					setDdRamAddress(8);

					do{
						tecla = get_tecla();
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5) {menu_index = 3;}
    2c46:	df 2e       	mov	r13, r31
    2c48:	f0 2d       	mov	r31, r0
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <main+0x1a7a>
    2c4c:	dd 24       	eor	r13, r13
    2c4e:	d3 94       	inc	r13
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    2c50:	a2 e0       	ldi	r26, 0x02	; 2
    2c52:	da 16       	cp	r13, r26
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(tecla);
							guarda_login_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(menu_index == 2);
    2c54:	19 f2       	breq	.-122    	; 0x2bdc <main+0x1a06>
    2c56:	dc c4       	rjmp	.+2488   	; 0x3610 <main+0x243a>
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
					break;
					// senha do mesário
					case 3:
					input_caracters_counter = 0;
					sendString_setAdress("Senha adm:      ", 1, 1);
    2c5c:	83 e6       	ldi	r24, 0x63	; 99
    2c5e:	92 e0       	ldi	r25, 0x02	; 2
    2c60:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	62 e0       	ldi	r22, 0x02	; 2
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    2c68:	82 e5       	ldi	r24, 0x52	; 82
    2c6a:	92 e0       	ldi	r25, 0x02	; 2
    2c6c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2c70:	82 e4       	ldi	r24, 0x42	; 66
    2c72:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 2);
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
					sendChar(RIGHT_OPTION_CHARACTER);
    2c7c:	88 e4       	ldi	r24, 0x48	; 72
    2c7e:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
					setDdRamAddress(0x40 + 8);
    2c82:	82 e0       	ldi	r24, 0x02	; 2
					sendChar(RETURN_CHARACTER);
    2c84:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2c88:	8e e4       	ldi	r24, 0x4E	; 78
					setDdRamAddress(0x40 + 14);
    2c8a:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2c8e:	8f e7       	ldi	r24, 0x7F	; 127
					sendChar(LEFT_ARROW_CHARACTER);
    2c90:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2c94:	88 e0       	ldi	r24, 0x08	; 8
					setDdRamAddress(8);
    2c96:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2c9a:	00 e0       	ldi	r16, 0x00	; 0
						}
					} while(menu_index == 2);
					break;
					// senha do mesário
					case 3:
					input_caracters_counter = 0;
    2c9c:	4c d5       	rcall	.+2712   	; 0x3736 <get_tecla>
					setDdRamAddress(8);
					
					unsigned char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
    2c9e:	18 2f       	mov	r17, r24
    2ca0:	81 34       	cpi	r24, 0x41	; 65
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <main+0x1ad0>
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5){
    2ca4:	47 c0       	rjmp	.+142    	; 0x2d34 <main+0x1b5e>
    2ca6:	05 30       	cpi	r16, 0x05	; 5
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <main+0x1ad6>
    2caa:	44 c0       	rjmp	.+136    	; 0x2d34 <main+0x1b5e>
    2cac:	25 c0       	rjmp	.+74     	; 0x2cf8 <main+0x1b22>
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
    2cb2:	e8 e3       	ldi	r30, 0x38	; 56
    2cb4:	f2 e0       	ldi	r31, 0x02	; 2
    2cb6:	ec 0f       	add	r30, r28
    2cb8:	fd 1f       	adc	r31, r29
    2cba:	e2 0f       	add	r30, r18
    2cbc:	f3 1f       	adc	r31, r19
    2cbe:	40 81       	ld	r20, Z
    2cc0:	ed e3       	ldi	r30, 0x3D	; 61
    2cc2:	f2 e0       	ldi	r31, 0x02	; 2
    2cc4:	ec 0f       	add	r30, r28
    2cc6:	fd 1f       	adc	r31, r29
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	90 81       	ld	r25, Z
    2cce:	49 13       	cpse	r20, r25
    2cd0:	11 c0       	rjmp	.+34     	; 0x2cf4 <main+0x1b1e>
    2cd2:	e3 e3       	ldi	r30, 0x33	; 51
    2cd4:	f2 e0       	ldi	r31, 0x02	; 2
    2cd6:	ec 0f       	add	r30, r28
    2cd8:	fd 1f       	adc	r31, r29
    2cda:	e2 0f       	add	r30, r18
    2cdc:	f3 1f       	adc	r31, r19
    2cde:	40 81       	ld	r20, Z
    2ce0:	e2 e4       	ldi	r30, 0x42	; 66
    2ce2:	f2 e0       	ldi	r31, 0x02	; 2
    2ce4:	ec 0f       	add	r30, r28
    2ce6:	fd 1f       	adc	r31, r29
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	90 81       	ld	r25, Z
    2cee:	49 13       	cpse	r20, r25
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <main+0x1b1e>
    2cf2:	5f 5f       	subi	r21, 0xFF	; 255
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
								{a++;}
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <main+0x1b26>
						// a = 0;
						tecla = get_tecla();
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5){
							a = 0;
							for(i = 0; i < 5; i++){
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	85 30       	cpi	r24, 0x05	; 5
    2cfe:	b8 f2       	brcs	.-82     	; 0x2cae <main+0x1ad8>
    2d00:	55 30       	cpi	r21, 0x05	; 5
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <main+0x1b30>
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
							if(a == 5) {encerrada_bloqueada = 0; /*break;*/}
    2d04:	44 c0       	rjmp	.+136    	; 0x2d8e <main+0x1bb8>
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	61 e0       	ldi	r22, 0x01	; 1
							else{
								sendString_setAdress("     Mesario    ", 1, 1);
    2d0a:	84 e7       	ldi	r24, 0x74	; 116
    2d0c:	92 e0       	ldi	r25, 0x02	; 2
    2d0e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2d12:	41 e0       	ldi	r20, 0x01	; 1
    2d14:	62 e0       	ldi	r22, 0x02	; 2
								sendString_setAdress("    invalido  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    2d16:	85 e8       	ldi	r24, 0x85	; 133
    2d18:	92 e0       	ldi	r25, 0x02	; 2
    2d1a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2d24:	82 e4       	ldi	r24, 0x42	; 66
    2d26:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2d2a:	0e 94 ab 03 	call	0x756	; 0x756 <getCharacter_B>
								tecla = getCharacter_B();
    2d2e:	dd 24       	eor	r13, r13
    2d30:	d3 94       	inc	r13
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
    2d32:	33 c0       	rjmp	.+102    	; 0x2d9a <main+0x1bc4>
    2d34:	12 34       	cpi	r17, 0x42	; 66
    2d36:	79 f1       	breq	.+94     	; 0x2d96 <main+0x1bc0>
								tecla = getCharacter_B();
							}
							
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    2d38:	13 34       	cpi	r17, 0x43	; 67
    2d3a:	69 f4       	brne	.+26     	; 0x2d56 <main+0x1b80>
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
    2d3c:	00 23       	and	r16, r16
    2d3e:	59 f0       	breq	.+22     	; 0x2d56 <main+0x1b80>
    2d40:	1f ef       	ldi	r17, 0xFF	; 255
    2d42:	10 0f       	add	r17, r16
							input_caracters_counter--;
    2d44:	89 e0       	ldi	r24, 0x09	; 9
    2d46:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    2d48:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2d4c:	80 e2       	ldi	r24, 0x20	; 32
    2d4e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(' ');
    2d52:	01 2f       	mov	r16, r17
    2d54:	22 c0       	rjmp	.+68     	; 0x2d9a <main+0x1bc4>
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' && input_caracters_counter > 0){
							input_caracters_counter--;
    2d56:	05 30       	cpi	r16, 0x05	; 5
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(' ');
    2d58:	00 f5       	brcc	.+64     	; 0x2d9a <main+0x1bc4>
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    2d5a:	1a 32       	cpi	r17, 0x2A	; 42
    2d5c:	f1 f0       	breq	.+60     	; 0x2d9a <main+0x1bc4>
    2d5e:	14 34       	cpi	r17, 0x44	; 68
    2d60:	e1 f0       	breq	.+56     	; 0x2d9a <main+0x1bc4>
    2d62:	13 32       	cpi	r17, 0x23	; 35
    2d64:	d1 f0       	breq	.+52     	; 0x2d9a <main+0x1bc4>
    2d66:	11 34       	cpi	r17, 0x41	; 65
    2d68:	c1 f0       	breq	.+48     	; 0x2d9a <main+0x1bc4>
    2d6a:	13 34       	cpi	r17, 0x43	; 67
    2d6c:	b1 f0       	breq	.+44     	; 0x2d9a <main+0x1bc4>
    2d6e:	8a e0       	ldi	r24, 0x0A	; 10
    2d70:	80 0f       	add	r24, r16
							setDdRamAddress(10 + input_caracters_counter);
    2d72:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
    2d76:	8a e2       	ldi	r24, 0x2A	; 42
    2d78:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar('*');
    2d7c:	e3 e3       	ldi	r30, 0x33	; 51
    2d7e:	f2 e0       	ldi	r31, 0x02	; 2
							guarda_senha_mesario[input_caracters_counter] = tecla;
    2d80:	ec 0f       	add	r30, r28
    2d82:	fd 1f       	adc	r31, r29
    2d84:	e0 0f       	add	r30, r16
    2d86:	f1 1d       	adc	r31, r1
    2d88:	10 83       	st	Z, r17
    2d8a:	0f 5f       	subi	r16, 0xFF	; 255
    2d8c:	06 c0       	rjmp	.+12     	; 0x2d9a <main+0x1bc4>
							input_caracters_counter++;
    2d8e:	71 2c       	mov	r7, r1
    2d90:	dd 24       	eor	r13, r13
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
							if(a == 5) {encerrada_bloqueada = 0; /*break;*/}
    2d92:	d3 94       	inc	r13
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_index = 1;
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <main+0x1bc4>
    2d96:	dd 24       	eor	r13, r13
    2d98:	d3 94       	inc	r13
								tecla = getCharacter_B();
							}
							
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_index = 1;}
    2d9a:	b3 e0       	ldi	r27, 0x03	; 3
    2d9c:	db 16       	cp	r13, r27
							setDdRamAddress(10 + input_caracters_counter);
							sendChar('*');
							guarda_senha_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(menu_index == 3);
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <main+0x1bcc>
    2da0:	7d cf       	rjmp	.-262    	; 0x2c9c <main+0x1ac6>
    2da2:	36 c4       	rjmp	.+2156   	; 0x3610 <main+0x243a>
    2da4:	8d 2d       	mov	r24, r13
					break;
				}
			}
			else{
				// Menu do sistema
				switch(menu_index){
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	fc 01       	movw	r30, r24
    2daa:	31 97       	sbiw	r30, 0x01	; 1
    2dac:	e8 30       	cpi	r30, 0x08	; 8
    2dae:	f1 05       	cpc	r31, r1
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <main+0x1bde>
    2db2:	19 c1       	rjmp	.+562    	; 0x2fe6 <main+0x1e10>
    2db4:	ec 5a       	subi	r30, 0xAC	; 172
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	2c c7       	rjmp	.+3672   	; 0x3c12 <__tablejump2__>
    2dba:	41 e0       	ldi	r20, 0x01	; 1
    2dbc:	61 e0       	ldi	r22, 0x01	; 1
					case 1:
						sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2dbe:	86 eb       	ldi	r24, 0xB6	; 182
    2dc0:	92 e0       	ldi	r25, 0x02	; 2
    2dc2:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2dcc:	81 e4       	ldi	r24, 0x41	; 65
    2dce:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2dd2:	41 e0       	ldi	r20, 0x01	; 1
    2dd4:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2dd6:	85 ec       	ldi	r24, 0xC5	; 197
    2dd8:	92 e0       	ldi	r25, 0x02	; 2
    2dda:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2de4:	82 e4       	ldi	r24, 0x42	; 66
    2de6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2dea:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2dee:	82 34       	cpi	r24, 0x42	; 66
    2df0:	19 f4       	brne	.+6      	; 0x2df8 <main+0x1c22>
						if(tecla == 'B'){ menu_index+=2;}
    2df2:	d3 94       	inc	r13
    2df4:	d3 94       	inc	r13
    2df6:	f7 c0       	rjmp	.+494    	; 0x2fe6 <main+0x1e10>
    2df8:	81 34       	cpi	r24, 0x41	; 65
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <main+0x1c28>
						else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_index = 0;}
    2dfc:	f4 c0       	rjmp	.+488    	; 0x2fe6 <main+0x1e10>
    2dfe:	cb c0       	rjmp	.+406    	; 0x2f96 <main+0x1dc0>
    2e00:	d3 94       	inc	r13
    2e02:	f1 c0       	rjmp	.+482    	; 0x2fe6 <main+0x1e10>
						break;
					case 2:
						menu_index++;
    2e04:	41 e0       	ldi	r20, 0x01	; 1
						break;
    2e06:	61 e0       	ldi	r22, 0x01	; 1
					case 3:
						sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2e08:	82 ef       	ldi	r24, 0xF2	; 242
    2e0a:	92 e0       	ldi	r25, 0x02	; 2
    2e0c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e16:	81 e4       	ldi	r24, 0x41	; 65
    2e18:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	93 e0       	ldi	r25, 0x03	; 3
    2e24:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e2e:	82 e4       	ldi	r24, 0x42	; 66
    2e30:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e34:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2e38:	82 34       	cpi	r24, 0x42	; 66
    2e3a:	11 f4       	brne	.+4      	; 0x2e40 <main+0x1c6a>
						if(tecla == 'B') { menu_index++;}
    2e3c:	d3 94       	inc	r13
    2e3e:	d3 c0       	rjmp	.+422    	; 0x2fe6 <main+0x1e10>
    2e40:	81 34       	cpi	r24, 0x41	; 65
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <main+0x1c70>
						else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_index = 0;}
    2e44:	d0 c0       	rjmp	.+416    	; 0x2fe6 <main+0x1e10>
    2e46:	ab c0       	rjmp	.+342    	; 0x2f9e <main+0x1dc8>
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
						break;
					case 4:
						sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2e4c:	80 e1       	ldi	r24, 0x10	; 16
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e5a:	81 e4       	ldi	r24, 0x41	; 65
    2e5c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2e64:	8f e1       	ldi	r24, 0x1F	; 31
    2e66:	93 e0       	ldi	r25, 0x03	; 3
    2e68:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e72:	82 e4       	ldi	r24, 0x42	; 66
    2e74:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e78:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2e7c:	82 34       	cpi	r24, 0x42	; 66
    2e7e:	11 f4       	brne	.+4      	; 0x2e84 <main+0x1cae>
						if(tecla == 'B') { menu_index++;}
    2e80:	d3 94       	inc	r13
    2e82:	b1 c0       	rjmp	.+354    	; 0x2fe6 <main+0x1e10>
    2e84:	81 34       	cpi	r24, 0x41	; 65
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <main+0x1cb4>
						else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_index = 0;}
    2e88:	ae c0       	rjmp	.+348    	; 0x2fe6 <main+0x1e10>
    2e8a:	8f c0       	rjmp	.+286    	; 0x2faa <main+0x1dd4>
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
						break;
					case 5:
						sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2e90:	8e e2       	ldi	r24, 0x2E	; 46
    2e92:	93 e0       	ldi	r25, 0x03	; 3
    2e94:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2e9e:	81 e4       	ldi	r24, 0x41	; 65
    2ea0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2ea8:	8d e3       	ldi	r24, 0x3D	; 61
    2eaa:	93 e0       	ldi	r25, 0x03	; 3
    2eac:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2eb6:	82 e4       	ldi	r24, 0x42	; 66
    2eb8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2ebc:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2ec0:	82 34       	cpi	r24, 0x42	; 66
    2ec2:	11 f4       	brne	.+4      	; 0x2ec8 <main+0x1cf2>
						if(tecla == 'B') { menu_index++;}
    2ec4:	d3 94       	inc	r13
    2ec6:	8f c0       	rjmp	.+286    	; 0x2fe6 <main+0x1e10>
    2ec8:	81 34       	cpi	r24, 0x41	; 65
    2eca:	09 f0       	breq	.+2      	; 0x2ece <main+0x1cf8>
						else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_index = 0;}
    2ecc:	8c c0       	rjmp	.+280    	; 0x2fe6 <main+0x1e10>
    2ece:	72 c0       	rjmp	.+228    	; 0x2fb4 <main+0x1dde>
    2ed0:	41 e0       	ldi	r20, 0x01	; 1
    2ed2:	61 e0       	ldi	r22, 0x01	; 1
						break;
					case 6:
						sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2ed4:	8c e4       	ldi	r24, 0x4C	; 76
    2ed6:	93 e0       	ldi	r25, 0x03	; 3
    2ed8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2ee2:	81 e4       	ldi	r24, 0x41	; 65
    2ee4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2eec:	8b e5       	ldi	r24, 0x5B	; 91
    2eee:	93 e0       	ldi	r25, 0x03	; 3
    2ef0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2efa:	82 e4       	ldi	r24, 0x42	; 66
    2efc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f00:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2f04:	82 34       	cpi	r24, 0x42	; 66
    2f06:	11 f4       	brne	.+4      	; 0x2f0c <main+0x1d36>
						if(tecla == 'B') {menu_index++;}
    2f08:	d3 94       	inc	r13
    2f0a:	6d c0       	rjmp	.+218    	; 0x2fe6 <main+0x1e10>
    2f0c:	81 34       	cpi	r24, 0x41	; 65
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <main+0x1d3c>
						else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_index = 0;}
    2f10:	6a c0       	rjmp	.+212    	; 0x2fe6 <main+0x1e10>
    2f12:	56 c0       	rjmp	.+172    	; 0x2fc0 <main+0x1dea>
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	61 e0       	ldi	r22, 0x01	; 1
						break;
					case 7:
						sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2f18:	8a e6       	ldi	r24, 0x6A	; 106
    2f1a:	93 e0       	ldi	r25, 0x03	; 3
    2f1c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f26:	81 e4       	ldi	r24, 0x41	; 65
    2f28:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2f30:	89 e7       	ldi	r24, 0x79	; 121
    2f32:	93 e0       	ldi	r25, 0x03	; 3
    2f34:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f3e:	82 e4       	ldi	r24, 0x42	; 66
    2f40:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f44:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2f48:	82 34       	cpi	r24, 0x42	; 66
    2f4a:	11 f4       	brne	.+4      	; 0x2f50 <main+0x1d7a>
						if(tecla == 'B') {menu_index++;}
    2f4c:	d3 94       	inc	r13
    2f4e:	4b c0       	rjmp	.+150    	; 0x2fe6 <main+0x1e10>
    2f50:	81 34       	cpi	r24, 0x41	; 65
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <main+0x1d80>
						else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_index = 0;}
    2f54:	48 c0       	rjmp	.+144    	; 0x2fe6 <main+0x1e10>
    2f56:	3a c0       	rjmp	.+116    	; 0x2fcc <main+0x1df6>
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	61 e0       	ldi	r22, 0x01	; 1
						break;
					case 8:
						sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    2f5c:	88 e8       	ldi	r24, 0x88	; 136
    2f5e:	93 e0       	ldi	r25, 0x03	; 3
    2f60:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f6a:	81 e4       	ldi	r24, 0x41	; 65
    2f6c:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    2f74:	89 e7       	ldi	r24, 0x79	; 121
    2f76:	93 e0       	ldi	r25, 0x03	; 3
    2f78:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f82:	82 e4       	ldi	r24, 0x42	; 66
    2f84:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    2f88:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    2f8c:	82 34       	cpi	r24, 0x42	; 66
    2f8e:	21 f1       	breq	.+72     	; 0x2fd8 <main+0x1e02>
						if(tecla == 'B') {menu_index = 1;}
    2f90:	81 34       	cpi	r24, 0x41	; 65
    2f92:	49 f5       	brne	.+82     	; 0x2fe6 <main+0x1e10>
						else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_index = 0;}
    2f94:	24 c0       	rjmp	.+72     	; 0x2fde <main+0x1e08>
    2f96:	99 24       	eor	r9, r9
    2f98:	93 94       	inc	r9
					case 1:
						sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B'){ menu_index+=2;}
						else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_index = 0;}
    2f9a:	d1 2c       	mov	r13, r1
    2f9c:	24 c0       	rjmp	.+72     	; 0x2fe6 <main+0x1e10>
    2f9e:	0f 2e       	mov	r0, r31
    2fa0:	f3 e0       	ldi	r31, 0x03	; 3
					case 3:
						sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') { menu_index++;}
						else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_index = 0;}
    2fa2:	9f 2e       	mov	r9, r31
    2fa4:	f0 2d       	mov	r31, r0
    2fa6:	d1 2c       	mov	r13, r1
    2fa8:	1e c0       	rjmp	.+60     	; 0x2fe6 <main+0x1e10>
    2faa:	68 94       	set
    2fac:	99 24       	eor	r9, r9
					case 4:
						sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') { menu_index++;}
						else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_index = 0;}
    2fae:	92 f8       	bld	r9, 2
    2fb0:	d1 2c       	mov	r13, r1
    2fb2:	19 c0       	rjmp	.+50     	; 0x2fe6 <main+0x1e10>
    2fb4:	0f 2e       	mov	r0, r31
    2fb6:	f5 e0       	ldi	r31, 0x05	; 5
					case 5:
						sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') { menu_index++;}
						else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_index = 0;}
    2fb8:	9f 2e       	mov	r9, r31
    2fba:	f0 2d       	mov	r31, r0
    2fbc:	d1 2c       	mov	r13, r1
    2fbe:	13 c0       	rjmp	.+38     	; 0x2fe6 <main+0x1e10>
    2fc0:	0f 2e       	mov	r0, r31
    2fc2:	f6 e0       	ldi	r31, 0x06	; 6
					case 6:
						sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') {menu_index++;}
						else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_index = 0;}
    2fc4:	9f 2e       	mov	r9, r31
    2fc6:	f0 2d       	mov	r31, r0
    2fc8:	d1 2c       	mov	r13, r1
    2fca:	0d c0       	rjmp	.+26     	; 0x2fe6 <main+0x1e10>
    2fcc:	0f 2e       	mov	r0, r31
    2fce:	f7 e0       	ldi	r31, 0x07	; 7
					case 7:
						sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') {menu_index++;}
						else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_index = 0;}
    2fd0:	9f 2e       	mov	r9, r31
    2fd2:	f0 2d       	mov	r31, r0
    2fd4:	d1 2c       	mov	r13, r1
    2fd6:	07 c0       	rjmp	.+14     	; 0x2fe6 <main+0x1e10>
    2fd8:	dd 24       	eor	r13, r13
    2fda:	d3 94       	inc	r13
						break;
					case 8:
						sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
						sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') {menu_index = 1;}
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <main+0x1e10>
    2fde:	68 94       	set
						else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_index = 0;}
    2fe0:	99 24       	eor	r9, r9
    2fe2:	93 f8       	bld	r9, 3
    2fe4:	d1 2c       	mov	r13, r1
    2fe6:	89 2d       	mov	r24, r9
					default:
						break;
				}
				
				// Opções do menu do sistema
				switch(option_menu_operacional){
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	fc 01       	movw	r30, r24
    2fec:	31 97       	sbiw	r30, 0x01	; 1
    2fee:	e8 30       	cpi	r30, 0x08	; 8
    2ff0:	f1 05       	cpc	r31, r1
    2ff2:	08 f0       	brcs	.+2      	; 0x2ff6 <main+0x1e20>
    2ff4:	0d c3       	rjmp	.+1562   	; 0x3610 <main+0x243a>
    2ff6:	e4 5a       	subi	r30, 0xA4	; 164
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	0b c6       	rjmp	.+3094   	; 0x3c12 <__tablejump2__>
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	61 e0       	ldi	r22, 0x01	; 1
					case OPTION_ESTADO:
						sendString_setAdress("ENCERRADA     ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
    3000:	8f e7       	ldi	r24, 0x7F	; 127
    3002:	95 e0       	ldi	r25, 0x05	; 5
    3004:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    300e:	81 e4       	ldi	r24, 0x41	; 65
    3010:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    3014:	41 e0       	ldi	r20, 0x01	; 1
    3016:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
    3018:	86 ea       	ldi	r24, 0xA6	; 166
    301a:	93 e0       	ldi	r25, 0x03	; 3
    301c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    3026:	82 e4       	ldi	r24, 0x42	; 66
    3028:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    302c:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
						tecla = getCharacter_AB();
    3030:	82 34       	cpi	r24, 0x42	; 66
    3032:	b1 f4       	brne	.+44     	; 0x3060 <main+0x1e8a>
						if(tecla == 'B') {
    3034:	41 e0       	ldi	r20, 0x01	; 1
							encerrada_bloqueada = 1;
							menu_index = 1;
							sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	85 eb       	ldi	r24, 0xB5	; 181
    303a:	93 e0       	ldi	r25, 0x03	; 3
    303c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3040:	41 e0       	ldi	r20, 0x01	; 1
							sendString_setAdress("      ...       ", 2, 1);
    3042:	62 e0       	ldi	r22, 0x02	; 2
    3044:	86 ec       	ldi	r24, 0xC6	; 198
    3046:	93 e0       	ldi	r25, 0x03	; 3
    3048:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    304c:	68 ee       	ldi	r22, 0xE8	; 232
							delay_ms(1000);
    304e:	73 e0       	ldi	r23, 0x03	; 3
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	d4 d4       	rcall	.+2472   	; 0x39fe <delay_ms>
    3056:	77 24       	eor	r7, r7
    3058:	73 94       	inc	r7
					case OPTION_ESTADO:
						sendString_setAdress("ENCERRADA     ", 1, 1); sendChar(RETURN_CHARACTER); sendChar('A');
						sendString_setAdress(" Bloquear?    ", 2, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('B');
						tecla = getCharacter_AB();
						if(tecla == 'B') {
							encerrada_bloqueada = 1;
    305a:	dd 24       	eor	r13, r13
    305c:	d3 94       	inc	r13
							menu_index = 1;
    305e:	d8 c2       	rjmp	.+1456   	; 0x3610 <main+0x243a>
    3060:	81 34       	cpi	r24, 0x41	; 65
    3062:	09 f0       	breq	.+2      	; 0x3066 <main+0x1e90>
							sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
							sendString_setAdress("      ...       ", 2, 1);
							delay_ms(1000);
						}
						else if(tecla == 'A') {option_menu_operacional = 0; menu_index = 1;}
    3064:	d5 c2       	rjmp	.+1450   	; 0x3610 <main+0x243a>
    3066:	cb c2       	rjmp	.+1430   	; 0x35fe <main+0x2428>
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	61 e0       	ldi	r22, 0x01	; 1
						
					case OPTION_ELEITOR:
						break;
						
					case OPTION_CONSULTA_HORA:
						sendString_setAdress("HORA ATUAL:     ", 1, 1);
    306c:	8c e2       	ldi	r24, 0x2C	; 44
    306e:	94 e0       	ldi	r25, 0x04	; 4
    3070:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
						sendString_setAdress("              ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	62 e0       	ldi	r22, 0x02	; 2
    3078:	84 ee       	ldi	r24, 0xE4	; 228
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    3086:	82 e4       	ldi	r24, 0x42	; 66
    3088:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						exibe_hora_display();
    308c:	1b d5       	rcall	.+2614   	; 0x3ac4 <exibe_hora_display>
    308e:	53 d3       	rcall	.+1702   	; 0x3736 <get_tecla>
						if(get_tecla() == 'B'){
    3090:	82 34       	cpi	r24, 0x42	; 66
    3092:	09 f0       	breq	.+2      	; 0x3096 <main+0x1ec0>
    3094:	bd c2       	rjmp	.+1402   	; 0x3610 <main+0x243a>
    3096:	1a d5       	rcall	.+2612   	; 0x3acc <apaga_hora_display>
    3098:	91 2c       	mov	r9, r1
							apaga_hora_display();
    309a:	0f 2e       	mov	r0, r31
    309c:	f3 e0       	ldi	r31, 0x03	; 3
							option_menu_operacional = 0;
    309e:	df 2e       	mov	r13, r31
							menu_index = 3;
    30a0:	f0 2d       	mov	r31, r0
    30a2:	b6 c2       	rjmp	.+1388   	; 0x3610 <main+0x243a>
    30a4:	41 e0       	ldi	r20, 0x01	; 1
    30a6:	61 e0       	ldi	r22, 0x01	; 1
    30a8:	8d e3       	ldi	r24, 0x3D	; 61
						}
						break;
						
					case OPTION_TROCA_HORA:
						input_caracters_counter = 0;
						sendString_setAdress("INSERIR HORARIO ", 1, 1);
    30aa:	94 e0       	ldi	r25, 0x04	; 4
    30ac:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	62 e0       	ldi	r22, 0x02	; 2
    30b4:	8e e4       	ldi	r24, 0x4E	; 78
						sendString_setAdress("<  :  > ", 2, 1); sendChar(LEFT_ARROW_CHARACTER); sendChar('C'); sendChar(' '); sendChar(RETURN_CHARACTER); sendChar('B'); sendChar(' '); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    30b6:	94 e0       	ldi	r25, 0x04	; 4
    30b8:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    30bc:	8f e7       	ldi	r24, 0x7F	; 127
    30be:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30c2:	83 e4       	ldi	r24, 0x43	; 67
    30c4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30d4:	82 e4       	ldi	r24, 0x42	; 66
    30d6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30da:	80 e2       	ldi	r24, 0x20	; 32
    30dc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30e6:	81 e4       	ldi	r24, 0x41	; 65
    30e8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    30ec:	c7 58       	subi	r28, 0x87	; 135
    30ee:	dd 4f       	sbci	r29, 0xFD	; 253
					
						char guarda_novo_horario[4] = {0};
    30f0:	18 82       	st	Y, r1
    30f2:	19 82       	std	Y+1, r1	; 0x01
    30f4:	1a 82       	std	Y+2, r1	; 0x02
    30f6:	1b 82       	std	Y+3, r1	; 0x03
    30f8:	c9 57       	subi	r28, 0x79	; 121
    30fa:	d2 40       	sbci	r29, 0x02	; 2
    30fc:	00 e0       	ldi	r16, 0x00	; 0
    30fe:	1b d3       	rcall	.+1590   	; 0x3736 <get_tecla>
							menu_index = 3;
						}
						break;
						
					case OPTION_TROCA_HORA:
						input_caracters_counter = 0;
    3100:	18 2f       	mov	r17, r24
						sendString_setAdress("INSERIR HORARIO ", 1, 1);
						sendString_setAdress("<  :  > ", 2, 1); sendChar(LEFT_ARROW_CHARACTER); sendChar('C'); sendChar(' '); sendChar(RETURN_CHARACTER); sendChar('B'); sendChar(' '); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					
						char guarda_novo_horario[4] = {0};
						do{
							tecla = get_tecla();
    3102:	81 34       	cpi	r24, 0x41	; 65
    3104:	09 f0       	breq	.+2      	; 0x3108 <main+0x1f32>
    3106:	53 c0       	rjmp	.+166    	; 0x31ae <main+0x1fd8>
							// se tecla A e horário com 4 dígitos, prossegue para mudar hora
							if(tecla == 'A' && input_caracters_counter == 4){
    3108:	04 30       	cpi	r16, 0x04	; 4
    310a:	09 f0       	breq	.+2      	; 0x310e <main+0x1f38>
    310c:	50 c0       	rjmp	.+160    	; 0x31ae <main+0x1fd8>
    310e:	c5 58       	subi	r28, 0x85	; 133
    3110:	dd 4f       	sbci	r29, 0xFD	; 253
    3112:	48 81       	ld	r20, Y
								// avisa se conseguiu alterar horário, e se é válido ou não
								if(!setTime(((guarda_novo_horario[0] - 48) * 10) + (guarda_novo_horario[1] - 48), ((guarda_novo_horario[2] - 48) * 10) + (guarda_novo_horario[3] - 48))){
    3114:	cb 57       	subi	r28, 0x7B	; 123
    3116:	d2 40       	sbci	r29, 0x02	; 2
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	40 53       	subi	r20, 0x30	; 48
    311c:	51 09       	sbc	r21, r1
    311e:	c4 58       	subi	r28, 0x84	; 132
    3120:	dd 4f       	sbci	r29, 0xFD	; 253
    3122:	98 81       	ld	r25, Y
    3124:	cc 57       	subi	r28, 0x7C	; 124
    3126:	d2 40       	sbci	r29, 0x02	; 2
    3128:	c7 58       	subi	r28, 0x87	; 135
    312a:	dd 4f       	sbci	r29, 0xFD	; 253
    312c:	28 81       	ld	r18, Y
    312e:	c9 57       	subi	r28, 0x79	; 121
    3130:	d2 40       	sbci	r29, 0x02	; 2
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	20 53       	subi	r18, 0x30	; 48
    3136:	31 09       	sbc	r19, r1
    3138:	c6 58       	subi	r28, 0x86	; 134
    313a:	dd 4f       	sbci	r29, 0xFD	; 253
    313c:	38 81       	ld	r19, Y
    313e:	ca 57       	subi	r28, 0x7A	; 122
    3140:	d2 40       	sbci	r29, 0x02	; 2
    3142:	44 0f       	add	r20, r20
    3144:	64 2f       	mov	r22, r20
    3146:	66 0f       	add	r22, r22
    3148:	66 0f       	add	r22, r22
    314a:	46 0f       	add	r20, r22
    314c:	64 2f       	mov	r22, r20
    314e:	69 0f       	add	r22, r25
    3150:	60 53       	subi	r22, 0x30	; 48
    3152:	22 0f       	add	r18, r18
    3154:	82 2f       	mov	r24, r18
    3156:	88 0f       	add	r24, r24
    3158:	88 0f       	add	r24, r24
    315a:	28 0f       	add	r18, r24
    315c:	82 2f       	mov	r24, r18
    315e:	83 0f       	add	r24, r19
    3160:	80 53       	subi	r24, 0x30	; 48
    3162:	85 d4       	rcall	.+2314   	; 0x3a6e <setTime>
    3164:	81 11       	cpse	r24, r1
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <main+0x1fac>
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	87 e5       	ldi	r24, 0x57	; 87
									sendString_setAdress("HORARIO ALTERADO", 1, 1);
    316e:	94 e0       	ldi	r25, 0x04	; 4
    3170:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	62 e0       	ldi	r22, 0x02	; 2
    3178:	88 e6       	ldi	r24, 0x68	; 104
									sendString_setAdress("  COM SUCESSO   ", 2, 1);
    317a:	94 e0       	ldi	r25, 0x04	; 4
    317c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3180:	0c c0       	rjmp	.+24     	; 0x319a <main+0x1fc4>
    3182:	41 e0       	ldi	r20, 0x01	; 1
    3184:	61 e0       	ldi	r22, 0x01	; 1
								}
								else{
									sendString_setAdress("VALOR INVALIDO, ", 1, 1);
    3186:	89 e7       	ldi	r24, 0x79	; 121
    3188:	94 e0       	ldi	r25, 0x04	; 4
    318a:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("TENTE NOVAMENTE ", 2, 1);
    3192:	8a e8       	ldi	r24, 0x8A	; 138
    3194:	94 e0       	ldi	r25, 0x04	; 4
    3196:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    319a:	60 ed       	ldi	r22, 0xD0	; 208
    319c:	77 e0       	ldi	r23, 0x07	; 7
								}
								delay_ms(2000);
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	2d d4       	rcall	.+2138   	; 0x39fe <delay_ms>
    31a4:	91 2c       	mov	r9, r1
    31a6:	68 94       	set
    31a8:	dd 24       	eor	r13, r13
								menu_index = 4;
								option_menu_operacional = 0;
    31aa:	d2 f8       	bld	r13, 2
								else{
									sendString_setAdress("VALOR INVALIDO, ", 1, 1);
									sendString_setAdress("TENTE NOVAMENTE ", 2, 1);
								}
								delay_ms(2000);
								menu_index = 4;
    31ac:	3f c0       	rjmp	.+126    	; 0x322c <main+0x2056>
    31ae:	12 34       	cpi	r17, 0x42	; 66
    31b0:	c9 f1       	breq	.+114    	; 0x3224 <main+0x204e>
								option_menu_operacional = 0;
    31b2:	13 34       	cpi	r17, 0x43	; 67
							}
							// se a tecla for B, volta para o menu
							else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
    31b4:	a1 f4       	brne	.+40     	; 0x31de <main+0x2008>
    31b6:	00 23       	and	r16, r16
							// se a tecla for C, apaga o último caractere
							else if(tecla == 'C' && input_caracters_counter > 0){
    31b8:	91 f0       	breq	.+36     	; 0x31de <main+0x2008>
    31ba:	1f ef       	ldi	r17, 0xFF	; 255
    31bc:	10 0f       	add	r17, r16
    31be:	12 30       	cpi	r17, 0x02	; 2
								input_caracters_counter--;
    31c0:	28 f4       	brcc	.+10     	; 0x31cc <main+0x1ff6>
    31c2:	80 e4       	ldi	r24, 0x40	; 64
								if(input_caracters_counter < 2){
    31c4:	80 0f       	add	r24, r16
    31c6:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
									setDdRamAddress(0x41 + input_caracters_counter);
    31ca:	04 c0       	rjmp	.+8      	; 0x31d4 <main+0x1ffe>
    31cc:	81 e4       	ldi	r24, 0x41	; 65
    31ce:	80 0f       	add	r24, r16
    31d0:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
								}
								else{
									setDdRamAddress(0x42 + input_caracters_counter);
    31d4:	80 e2       	ldi	r24, 0x20	; 32
    31d6:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								}
								sendChar(' ');
    31da:	01 2f       	mov	r16, r17
    31dc:	27 c0       	rjmp	.+78     	; 0x322c <main+0x2056>
    31de:	04 30       	cpi	r16, 0x04	; 4
							}
							// se a tecla for B, volta para o menu
							else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
							// se a tecla for C, apaga o último caractere
							else if(tecla == 'C' && input_caracters_counter > 0){
								input_caracters_counter--;
    31e0:	28 f5       	brcc	.+74     	; 0x322c <main+0x2056>
									setDdRamAddress(0x41 + input_caracters_counter);
								}
								else{
									setDdRamAddress(0x42 + input_caracters_counter);
								}
								sendChar(' ');
    31e2:	1a 32       	cpi	r17, 0x2A	; 42
							}
							// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
							else if(input_caracters_counter < 4 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A' && tecla != 'C'){
    31e4:	19 f1       	breq	.+70     	; 0x322c <main+0x2056>
    31e6:	14 34       	cpi	r17, 0x44	; 68
    31e8:	09 f1       	breq	.+66     	; 0x322c <main+0x2056>
    31ea:	13 32       	cpi	r17, 0x23	; 35
    31ec:	f9 f0       	breq	.+62     	; 0x322c <main+0x2056>
    31ee:	11 34       	cpi	r17, 0x41	; 65
    31f0:	e9 f0       	breq	.+58     	; 0x322c <main+0x2056>
    31f2:	13 34       	cpi	r17, 0x43	; 67
    31f4:	d9 f0       	breq	.+54     	; 0x322c <main+0x2056>
    31f6:	02 30       	cpi	r16, 0x02	; 2
    31f8:	28 f4       	brcc	.+10     	; 0x3204 <main+0x202e>
    31fa:	81 e4       	ldi	r24, 0x41	; 65
								if(input_caracters_counter < 2){
    31fc:	80 0f       	add	r24, r16
    31fe:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
									setDdRamAddress(0x41 + input_caracters_counter);
    3202:	04 c0       	rjmp	.+8      	; 0x320c <main+0x2036>
    3204:	82 e4       	ldi	r24, 0x42	; 66
    3206:	80 0f       	add	r24, r16
    3208:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
								}
								else{
									setDdRamAddress(0x42 + input_caracters_counter);
    320c:	81 2f       	mov	r24, r17
    320e:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								}
								sendChar(tecla);
    3212:	e9 e7       	ldi	r30, 0x79	; 121
								guarda_novo_horario[input_caracters_counter] = tecla;
    3214:	f2 e0       	ldi	r31, 0x02	; 2
    3216:	ec 0f       	add	r30, r28
    3218:	fd 1f       	adc	r31, r29
    321a:	e0 0f       	add	r30, r16
    321c:	f1 1d       	adc	r31, r1
								input_caracters_counter++;
    321e:	10 83       	st	Z, r17
								delay_ms(2000);
								menu_index = 4;
								option_menu_operacional = 0;
							}
							// se a tecla for B, volta para o menu
							else if(tecla == 'B') {menu_index = 4; option_menu_operacional = 0;}
    3220:	0f 5f       	subi	r16, 0xFF	; 255
    3222:	04 c0       	rjmp	.+8      	; 0x322c <main+0x2056>
    3224:	91 2c       	mov	r9, r1
								}
								sendChar(tecla);
								guarda_novo_horario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(option_menu_operacional == OPTION_TROCA_HORA);
    3226:	68 94       	set
    3228:	dd 24       	eor	r13, r13
    322a:	d2 f8       	bld	r13, 2
    322c:	e4 e0       	ldi	r30, 0x04	; 4
    322e:	9e 16       	cp	r9, r30
					
						break;
					
					case OPTION_VERIFICA_CORRESPONDENCIA:
						do{
							sendSerialChar('U'); sendSerialChar('V');
    3230:	09 f4       	brne	.+2      	; 0x3234 <main+0x205e>
    3232:	65 cf       	rjmp	.-310    	; 0x30fe <main+0x1f28>
    3234:	ed c1       	rjmp	.+986    	; 0x3610 <main+0x243a>
    3236:	85 e5       	ldi	r24, 0x55	; 85
    3238:	16 d3       	rcall	.+1580   	; 0x3866 <sendSerialChar>
    323a:	86 e5       	ldi	r24, 0x56	; 86
							sendSerialChar(currentTime[HOURS]); sendSerialChar(currentTime[MINUTES]); sendSerialChar(num_eleitores);
    323c:	14 d3       	rcall	.+1576   	; 0x3866 <sendSerialChar>
    323e:	04 e9       	ldi	r16, 0x94	; 148
    3240:	15 e0       	ldi	r17, 0x05	; 5
    3242:	d8 01       	movw	r26, r16
    3244:	8c 91       	ld	r24, X
    3246:	0f d3       	rcall	.+1566   	; 0x3866 <sendSerialChar>
    3248:	f8 01       	movw	r30, r16
    324a:	81 81       	ldd	r24, Z+1	; 0x01
    324c:	0c d3       	rcall	.+1560   	; 0x3866 <sendSerialChar>
    324e:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <__data_end>
    3252:	09 d3       	rcall	.+1554   	; 0x3866 <sendSerialChar>
    3254:	ce 01       	movw	r24, r28
    3256:	89 5b       	subi	r24, 0xB9	; 185
							getSerialMessage(consistencia);
    3258:	9d 4f       	sbci	r25, 0xFD	; 253
    325a:	0c d3       	rcall	.+1560   	; 0x3874 <getSerialMessage>
    325c:	c9 5b       	subi	r28, 0xB9	; 185
    325e:	dd 4f       	sbci	r29, 0xFD	; 253
    3260:	88 81       	ld	r24, Y
							if(consistencia[0] == 'M' && consistencia[1] == 'V'){
    3262:	c7 54       	subi	r28, 0x47	; 71
    3264:	d2 40       	sbci	r29, 0x02	; 2
    3266:	8d 34       	cpi	r24, 0x4D	; 77
    3268:	09 f0       	breq	.+2      	; 0x326c <main+0x2096>
    326a:	8d c0       	rjmp	.+282    	; 0x3386 <main+0x21b0>
    326c:	c8 5b       	subi	r28, 0xB8	; 184
    326e:	dd 4f       	sbci	r29, 0xFD	; 253
    3270:	88 81       	ld	r24, Y
    3272:	c8 54       	subi	r28, 0x48	; 72
    3274:	d2 40       	sbci	r29, 0x02	; 2
    3276:	86 35       	cpi	r24, 0x56	; 86
    3278:	09 f0       	breq	.+2      	; 0x327c <main+0x20a6>
    327a:	85 c0       	rjmp	.+266    	; 0x3386 <main+0x21b0>
    327c:	c7 5b       	subi	r28, 0xB7	; 183
    327e:	dd 4f       	sbci	r29, 0xFD	; 253
								if(consistencia[2] == 'O'){
    3280:	88 81       	ld	r24, Y
    3282:	c9 54       	subi	r28, 0x49	; 73
    3284:	d2 40       	sbci	r29, 0x02	; 2
    3286:	8f 34       	cpi	r24, 0x4F	; 79
    3288:	d9 f4       	brne	.+54     	; 0x32c0 <main+0x20ea>
    328a:	41 e0       	ldi	r20, 0x01	; 1
    328c:	61 e0       	ldi	r22, 0x01	; 1
									verificacao = 3;
									sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    328e:	8b e9       	ldi	r24, 0x9B	; 155
    3290:	94 e0       	ldi	r25, 0x04	; 4
    3292:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3296:	41 e0       	ldi	r20, 0x01	; 1
    3298:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("       OK       ", 2, 1);
    329a:	8c ea       	ldi	r24, 0xAC	; 172
    329c:	94 e0       	ldi	r25, 0x04	; 4
    329e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    32a2:	68 ee       	ldi	r22, 0xE8	; 232
    32a4:	73 e0       	ldi	r23, 0x03	; 3
									delay_ms(1000);
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a9 d3       	rcall	.+1874   	; 0x39fe <delay_ms>
    32ac:	0f 2e       	mov	r0, r31
    32ae:	f3 e0       	ldi	r31, 0x03	; 3
    32b0:	8f 2e       	mov	r8, r31
							sendSerialChar('U'); sendSerialChar('V');
							sendSerialChar(currentTime[HOURS]); sendSerialChar(currentTime[MINUTES]); sendSerialChar(num_eleitores);
							getSerialMessage(consistencia);
							if(consistencia[0] == 'M' && consistencia[1] == 'V'){
								if(consistencia[2] == 'O'){
									verificacao = 3;
    32b2:	f0 2d       	mov	r31, r0
    32b4:	91 2c       	mov	r9, r1
    32b6:	0f 2e       	mov	r0, r31
									sendString_setAdress("  CONSISTENCIA  ", 1, 1);
									sendString_setAdress("       OK       ", 2, 1);
									delay_ms(1000);
									option_menu_operacional = 0;
    32b8:	f5 e0       	ldi	r31, 0x05	; 5
									menu_index = 5;
    32ba:	df 2e       	mov	r13, r31
    32bc:	f0 2d       	mov	r31, r0
    32be:	63 c0       	rjmp	.+198    	; 0x3386 <main+0x21b0>
    32c0:	89 34       	cpi	r24, 0x49	; 73
    32c2:	81 f5       	brne	.+96     	; 0x3324 <main+0x214e>
								}
								else if(consistencia[2] == 'I'){
    32c4:	83 94       	inc	r8
    32c6:	f3 e0       	ldi	r31, 0x03	; 3
									verificacao++;
    32c8:	8f 12       	cpse	r8, r31
									if(verificacao == 3){
    32ca:	5d c0       	rjmp	.+186    	; 0x3386 <main+0x21b0>
    32cc:	41 e0       	ldi	r20, 0x01	; 1
    32ce:	61 e0       	ldi	r22, 0x01	; 1
										urna_estado = BLOQUEADA;
										sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    32d0:	8b e9       	ldi	r24, 0x9B	; 155
    32d2:	94 e0       	ldi	r25, 0x04	; 4
    32d4:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    32d8:	41 e0       	ldi	r20, 0x01	; 1
										sendString_setAdress("     FALHOU     ", 2, 1);
    32da:	62 e0       	ldi	r22, 0x02	; 2
    32dc:	8d eb       	ldi	r24, 0xBD	; 189
    32de:	94 e0       	ldi	r25, 0x04	; 4
    32e0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    32e4:	68 ee       	ldi	r22, 0xE8	; 232
										delay_ms(1000);
    32e6:	73 e0       	ldi	r23, 0x03	; 3
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	88 d3       	rcall	.+1808   	; 0x39fe <delay_ms>
    32ee:	41 e0       	ldi	r20, 0x01	; 1
    32f0:	61 e0       	ldi	r22, 0x01	; 1
										sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    32f2:	85 eb       	ldi	r24, 0xB5	; 181
    32f4:	93 e0       	ldi	r25, 0x03	; 3
    32f6:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	62 e0       	ldi	r22, 0x02	; 2
										sendString_setAdress("      ...       ", 2, 1);
    32fe:	86 ec       	ldi	r24, 0xC6	; 198
    3300:	93 e0       	ldi	r25, 0x03	; 3
    3302:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3306:	68 ee       	ldi	r22, 0xE8	; 232
    3308:	73 e0       	ldi	r23, 0x03	; 3
										delay_ms(1000);
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	77 d3       	rcall	.+1774   	; 0x39fe <delay_ms>
    3310:	91 2c       	mov	r9, r1
    3312:	dd 24       	eor	r13, r13
										option_menu_operacional = 0;
    3314:	d3 94       	inc	r13
										menu_index = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	cd 57       	subi	r28, 0x7D	; 125
									menu_index = 5;
								}
								else if(consistencia[2] == 'I'){
									verificacao++;
									if(verificacao == 3){
										urna_estado = BLOQUEADA;
    331a:	dd 4f       	sbci	r29, 0xFD	; 253
    331c:	88 83       	st	Y, r24
    331e:	c3 58       	subi	r28, 0x83	; 131
    3320:	d2 40       	sbci	r29, 0x02	; 2
    3322:	31 c0       	rjmp	.+98     	; 0x3386 <main+0x21b0>
    3324:	88 35       	cpi	r24, 0x58	; 88
    3326:	79 f5       	brne	.+94     	; 0x3386 <main+0x21b0>
										option_menu_operacional = 0;
										menu_index = 1;
									}
								
								}
								else if(consistencia[2] == 'X'){
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	61 e0       	ldi	r22, 0x01	; 1
									verificacao = 3;
									urna_estado = BLOQUEADA;
									sendString_setAdress("  CONSISTENCIA  ", 1, 1);
    332c:	8b e9       	ldi	r24, 0x9B	; 155
    332e:	94 e0       	ldi	r25, 0x04	; 4
    3330:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3334:	41 e0       	ldi	r20, 0x01	; 1
									sendString_setAdress("     FALHOU     ", 2, 1);
    3336:	62 e0       	ldi	r22, 0x02	; 2
    3338:	8d eb       	ldi	r24, 0xBD	; 189
    333a:	94 e0       	ldi	r25, 0x04	; 4
    333c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3340:	68 ee       	ldi	r22, 0xE8	; 232
									delay_ms(1000);
    3342:	73 e0       	ldi	r23, 0x03	; 3
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	5a d3       	rcall	.+1716   	; 0x39fe <delay_ms>
    334a:	41 e0       	ldi	r20, 0x01	; 1
    334c:	61 e0       	ldi	r22, 0x01	; 1
									sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
    334e:	85 eb       	ldi	r24, 0xB5	; 181
    3350:	93 e0       	ldi	r25, 0x03	; 3
    3352:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	62 e0       	ldi	r22, 0x02	; 2
									sendString_setAdress("      ...       ", 2, 1);
    335a:	86 ec       	ldi	r24, 0xC6	; 198
    335c:	93 e0       	ldi	r25, 0x03	; 3
    335e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3362:	68 ee       	ldi	r22, 0xE8	; 232
    3364:	73 e0       	ldi	r23, 0x03	; 3
									delay_ms(1000);
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	49 d3       	rcall	.+1682   	; 0x39fe <delay_ms>
    336c:	0f 2e       	mov	r0, r31
    336e:	f3 e0       	ldi	r31, 0x03	; 3
    3370:	8f 2e       	mov	r8, r31
										menu_index = 1;
									}
								
								}
								else if(consistencia[2] == 'X'){
									verificacao = 3;
    3372:	f0 2d       	mov	r31, r0
    3374:	91 2c       	mov	r9, r1
    3376:	dd 24       	eor	r13, r13
    3378:	d3 94       	inc	r13
									sendString_setAdress("     FALHOU     ", 2, 1);
									delay_ms(1000);
									sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
									sendString_setAdress("      ...       ", 2, 1);
									delay_ms(1000);
									option_menu_operacional = 0;
    337a:	91 e0       	ldi	r25, 0x01	; 1
									menu_index = 1;
    337c:	cd 57       	subi	r28, 0x7D	; 125
    337e:	dd 4f       	sbci	r29, 0xFD	; 253
									}
								
								}
								else if(consistencia[2] == 'X'){
									verificacao = 3;
									urna_estado = BLOQUEADA;
    3380:	98 83       	st	Y, r25
    3382:	c3 58       	subi	r28, 0x83	; 131
    3384:	d2 40       	sbci	r29, 0x02	; 2
    3386:	a2 e0       	ldi	r26, 0x02	; 2
    3388:	a8 15       	cp	r26, r8
    338a:	08 f0       	brcs	.+2      	; 0x338e <main+0x21b8>
									delay_ms(1000);
									option_menu_operacional = 0;
									menu_index = 1;
								}
							}
						} while(verificacao < 3);
    338c:	54 cf       	rjmp	.-344    	; 0x3236 <main+0x2060>
    338e:	40 c1       	rjmp	.+640    	; 0x3610 <main+0x243a>
    3390:	fe 01       	movw	r30, r28
    3392:	e2 58       	subi	r30, 0x82	; 130
    3394:	fd 4f       	sbci	r31, 0xFD	; 253
						// TO DO
						break;

					case OPTION_TROCA_SENHA:
						input_caracters_counter = 0;
						char guarda_novasenha1_mesario[5] = {0};
    3396:	85 e0       	ldi	r24, 0x05	; 5
    3398:	df 01       	movw	r26, r30
    339a:	98 2f       	mov	r25, r24
    339c:	1d 92       	st	X+, r1
    339e:	9a 95       	dec	r25
    33a0:	e9 f7       	brne	.-6      	; 0x339c <main+0x21c6>
    33a2:	35 97       	sbiw	r30, 0x05	; 5
    33a4:	df 01       	movw	r26, r30
    33a6:	1d 92       	st	X+, r1
						char guarda_novasenha2_mesario[5] = {0};
    33a8:	8a 95       	dec	r24
    33aa:	e9 f7       	brne	.-6      	; 0x33a6 <main+0x21d0>
    33ac:	41 e0       	ldi	r20, 0x01	; 1
    33ae:	61 e0       	ldi	r22, 0x01	; 1
						char b = 1;
						// primeiro pedido de nova senha
						sendString_setAdress("Nova Senha:     ", 1, 1);
    33b0:	80 ef       	ldi	r24, 0xF0	; 240
    33b2:	94 e0       	ldi	r25, 0x04	; 4
    33b4:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	62 e0       	ldi	r22, 0x02	; 2
						sendString_setAdress("A:    B:    C:  ", 2, 1);
    33bc:	82 e5       	ldi	r24, 0x52	; 82
    33be:	92 e0       	ldi	r25, 0x02	; 2
    33c0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    33c4:	82 e4       	ldi	r24, 0x42	; 66
    33c6:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 2);
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(RIGHT_OPTION_CHARACTER);
    33d0:	88 e4       	ldi	r24, 0x48	; 72
    33d2:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 8);
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(RETURN_CHARACTER);
    33dc:	8e e4       	ldi	r24, 0x4E	; 78
    33de:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
						setDdRamAddress(0x40 + 14);
    33e2:	8f e7       	ldi	r24, 0x7F	; 127
    33e4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
						sendChar(LEFT_ARROW_CHARACTER);
    33e8:	01 e0       	ldi	r16, 0x01	; 1
    33ea:	f1 2c       	mov	r15, r1

					case OPTION_TROCA_SENHA:
						input_caracters_counter = 0;
						char guarda_novasenha1_mesario[5] = {0};
						char guarda_novasenha2_mesario[5] = {0};
						char b = 1;
    33ec:	a4 d1       	rcall	.+840    	; 0x3736 <get_tecla>
					case OPTION_RELATORIO_VOTACAO:
						// TO DO
						break;

					case OPTION_TROCA_SENHA:
						input_caracters_counter = 0;
    33ee:	18 2f       	mov	r17, r24
						sendChar(RETURN_CHARACTER);
						setDdRamAddress(0x40 + 14);
						sendChar(LEFT_ARROW_CHARACTER);

						do{
							tecla = get_tecla();
    33f0:	81 34       	cpi	r24, 0x41	; 65
    33f2:	19 f4       	brne	.+6      	; 0x33fa <main+0x2224>
    33f4:	b5 e0       	ldi	r27, 0x05	; 5
							// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
							if(tecla == 'A' && input_caracters_counter == 5){
    33f6:	fb 16       	cp	r15, r27
    33f8:	51 f1       	breq	.+84     	; 0x344e <main+0x2278>
    33fa:	12 34       	cpi	r17, 0x42	; 66
    33fc:	51 f1       	breq	.+84     	; 0x3452 <main+0x227c>
    33fe:	13 34       	cpi	r17, 0x43	; 67
								b = 2;
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
    3400:	59 f4       	brne	.+22     	; 0x3418 <main+0x2242>
    3402:	1f ef       	ldi	r17, 0xFF	; 255
								option_menu_operacional = 0;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    3404:	1f 0d       	add	r17, r15
    3406:	8a e0       	ldi	r24, 0x0A	; 10
								input_caracters_counter--;
    3408:	8f 0d       	add	r24, r15
    340a:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
								setDdRamAddress(11 + input_caracters_counter);
    340e:	80 e2       	ldi	r24, 0x20	; 32
    3410:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar(' ');
    3414:	f1 2e       	mov	r15, r17
    3416:	1f c0       	rjmp	.+62     	; 0x3456 <main+0x2280>
    3418:	e4 e0       	ldi	r30, 0x04	; 4
								option_menu_operacional = 0;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
								input_caracters_counter--;
    341a:	ef 15       	cp	r30, r15
    341c:	e0 f0       	brcs	.+56     	; 0x3456 <main+0x2280>
								setDdRamAddress(11 + input_caracters_counter);
								sendChar(' ');
							}
							// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
							else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    341e:	1a 32       	cpi	r17, 0x2A	; 42
    3420:	d1 f0       	breq	.+52     	; 0x3456 <main+0x2280>
    3422:	14 34       	cpi	r17, 0x44	; 68
    3424:	c1 f0       	breq	.+48     	; 0x3456 <main+0x2280>
    3426:	13 32       	cpi	r17, 0x23	; 35
    3428:	b1 f0       	breq	.+44     	; 0x3456 <main+0x2280>
    342a:	11 34       	cpi	r17, 0x41	; 65
    342c:	a1 f0       	breq	.+40     	; 0x3456 <main+0x2280>
    342e:	8b e0       	ldi	r24, 0x0B	; 11
    3430:	8f 0d       	add	r24, r15
    3432:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
								setDdRamAddress(11 + input_caracters_counter);
    3436:	8a e2       	ldi	r24, 0x2A	; 42
    3438:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
								sendChar('*');
    343c:	ee e7       	ldi	r30, 0x7E	; 126
    343e:	f2 e0       	ldi	r31, 0x02	; 2
    3440:	ec 0f       	add	r30, r28
								guarda_novasenha1_mesario[input_caracters_counter] = tecla;
    3442:	fd 1f       	adc	r31, r29
    3444:	ef 0d       	add	r30, r15
    3446:	f1 1d       	adc	r31, r1
    3448:	10 83       	st	Z, r17
    344a:	f3 94       	inc	r15
    344c:	04 c0       	rjmp	.+8      	; 0x3456 <main+0x2280>
    344e:	02 e0       	ldi	r16, 0x02	; 2
								input_caracters_counter++;
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <main+0x2280>
    3452:	03 e0       	ldi	r16, 0x03	; 3

						do{
							tecla = get_tecla();
							// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
							if(tecla == 'A' && input_caracters_counter == 5){
								b = 2;
    3454:	91 2c       	mov	r9, r1
    3456:	01 30       	cpi	r16, 0x01	; 1
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
								b = 3;
    3458:	49 f2       	breq	.-110    	; 0x33ec <main+0x2216>
							if(tecla == 'A' && input_caracters_counter == 5){
								b = 2;
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
    345a:	03 30       	cpi	r16, 0x03	; 3
								setDdRamAddress(11 + input_caracters_counter);
								sendChar('*');
								guarda_novasenha1_mesario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(b == 1);
    345c:	09 f4       	brne	.+2      	; 0x3460 <main+0x228a>
    345e:	d3 c0       	rjmp	.+422    	; 0x3606 <main+0x2430>
					
						if(b != 3){
    3460:	41 e0       	ldi	r20, 0x01	; 1
    3462:	61 e0       	ldi	r22, 0x01	; 1
    3464:	81 e0       	ldi	r24, 0x01	; 1
							sendString_setAdress(" Repita a Nova  ", 1, 1);
    3466:	95 e0       	ldi	r25, 0x05	; 5
    3468:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    346c:	41 e0       	ldi	r20, 0x01	; 1
    346e:	62 e0       	ldi	r22, 0x02	; 2
    3470:	82 e1       	ldi	r24, 0x12	; 18
							sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
    3472:	95 e0       	ldi	r25, 0x05	; 5
    3474:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    347e:	81 e4       	ldi	r24, 0x41	; 65
    3480:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    3484:	0e 94 9e 03 	call	0x73c	; 0x73c <getCharacter_AB>
							tecla = getCharacter_AB();
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	61 e0       	ldi	r22, 0x01	; 1

							// segundo pedido de nova senha
							input_caracters_counter = 0;
							sendString_setAdress("Nova Senha:     ", 1, 1);
    348c:	80 ef       	ldi	r24, 0xF0	; 240
    348e:	94 e0       	ldi	r25, 0x04	; 4
    3490:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	62 e0       	ldi	r22, 0x02	; 2
							sendString_setAdress("A:    B:    C:  ", 2, 1);
    3498:	82 e5       	ldi	r24, 0x52	; 82
    349a:	92 e0       	ldi	r25, 0x02	; 2
    349c:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    34a0:	82 e4       	ldi	r24, 0x42	; 66
    34a2:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
							setDdRamAddress(0x40 + 2);
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(RIGHT_OPTION_CHARACTER);
    34ac:	88 e4       	ldi	r24, 0x48	; 72
    34ae:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
							setDdRamAddress(0x40 + 8);
    34b2:	82 e0       	ldi	r24, 0x02	; 2
    34b4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(RETURN_CHARACTER);
    34b8:	8e e4       	ldi	r24, 0x4E	; 78
    34ba:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
							setDdRamAddress(0x40 + 14);
    34be:	8f e7       	ldi	r24, 0x7F	; 127
    34c0:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
							sendChar(LEFT_ARROW_CHARACTER);
    34c4:	f1 2c       	mov	r15, r1
    34c6:	37 d1       	rcall	.+622    	; 0x3736 <get_tecla>
							sendString_setAdress(" Repita a Nova  ", 1, 1);
							sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
							tecla = getCharacter_AB();

							// segundo pedido de nova senha
							input_caracters_counter = 0;
    34c8:	18 2f       	mov	r17, r24
							setDdRamAddress(0x40 + 14);
							sendChar(LEFT_ARROW_CHARACTER);

							unsigned char a, i;
							do{
								tecla = get_tecla();
    34ca:	81 34       	cpi	r24, 0x41	; 65
    34cc:	09 f0       	breq	.+2      	; 0x34d0 <main+0x22fa>
    34ce:	63 c0       	rjmp	.+198    	; 0x3596 <main+0x23c0>
								// se tecla A e senha com 5 dígitos, confere senhas
								if(tecla == 'A' && input_caracters_counter == 5){
    34d0:	f5 e0       	ldi	r31, 0x05	; 5
    34d2:	ff 12       	cpse	r15, r31
    34d4:	60 c0       	rjmp	.+192    	; 0x3596 <main+0x23c0>
    34d6:	15 c0       	rjmp	.+42     	; 0x3502 <main+0x232c>
    34d8:	82 2f       	mov	r24, r18
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	ee e7       	ldi	r30, 0x7E	; 126
									a = 0;
									for(i = 0; i < 5; i++){
										if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
    34de:	f2 e0       	ldi	r31, 0x02	; 2
    34e0:	ec 0f       	add	r30, r28
    34e2:	fd 1f       	adc	r31, r29
    34e4:	e8 0f       	add	r30, r24
    34e6:	f9 1f       	adc	r31, r25
    34e8:	30 81       	ld	r19, Z
    34ea:	e9 e7       	ldi	r30, 0x79	; 121
    34ec:	f2 e0       	ldi	r31, 0x02	; 2
    34ee:	ec 0f       	add	r30, r28
    34f0:	fd 1f       	adc	r31, r29
    34f2:	e8 0f       	add	r30, r24
    34f4:	f9 1f       	adc	r31, r25
    34f6:	80 81       	ld	r24, Z
    34f8:	38 13       	cpse	r19, r24
    34fa:	01 c0       	rjmp	.+2      	; 0x34fe <main+0x2328>
    34fc:	4f 5f       	subi	r20, 0xFF	; 255
    34fe:	2f 5f       	subi	r18, 0xFF	; 255
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <main+0x2330>
    3502:	20 e0       	ldi	r18, 0x00	; 0
							do{
								tecla = get_tecla();
								// se tecla A e senha com 5 dígitos, confere senhas
								if(tecla == 'A' && input_caracters_counter == 5){
									a = 0;
									for(i = 0; i < 5; i++){
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	25 30       	cpi	r18, 0x05	; 5
    3508:	38 f3       	brcs	.-50     	; 0x34d8 <main+0x2302>
    350a:	45 30       	cpi	r20, 0x05	; 5
    350c:	49 f5       	brne	.+82     	; 0x3560 <main+0x238a>
    350e:	12 c0       	rjmp	.+36     	; 0x3534 <main+0x235e>
										if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
									}
									menu_index = OPTION_TROCA_SENHA;
									if(a == 5){
    3510:	82 2f       	mov	r24, r18
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	ee e7       	ldi	r30, 0x7E	; 126
										for(i = 0; i < 5; i++) {guarda_senha_mesario[i] = guarda_novasenha1_mesario[i];}
    3516:	f2 e0       	ldi	r31, 0x02	; 2
    3518:	ec 0f       	add	r30, r28
    351a:	fd 1f       	adc	r31, r29
    351c:	e8 0f       	add	r30, r24
    351e:	f9 1f       	adc	r31, r25
    3520:	30 81       	ld	r19, Z
    3522:	e3 e3       	ldi	r30, 0x33	; 51
    3524:	f2 e0       	ldi	r31, 0x02	; 2
    3526:	ec 0f       	add	r30, r28
    3528:	fd 1f       	adc	r31, r29
    352a:	e8 0f       	add	r30, r24
    352c:	f9 1f       	adc	r31, r25
    352e:	30 83       	st	Z, r19
    3530:	2f 5f       	subi	r18, 0xFF	; 255
    3532:	01 c0       	rjmp	.+2      	; 0x3536 <main+0x2360>
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	25 30       	cpi	r18, 0x05	; 5
    3538:	58 f3       	brcs	.-42     	; 0x3510 <main+0x233a>
    353a:	41 e0       	ldi	r20, 0x01	; 1
    353c:	61 e0       	ldi	r22, 0x01	; 1
    353e:	81 e2       	ldi	r24, 0x21	; 33
										sendString_setAdress(" Troca de Senha ", 1, 1);
    3540:	95 e0       	ldi	r25, 0x05	; 5
    3542:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3546:	41 e0       	ldi	r20, 0x01	; 1
    3548:	62 e0       	ldi	r22, 0x02	; 2
    354a:	82 e3       	ldi	r24, 0x32	; 50
										sendString_setAdress("    Efetuada  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    354c:	95 e0       	ldi	r25, 0x05	; 5
    354e:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3552:	82 e0       	ldi	r24, 0x02	; 2
    3554:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    3558:	82 e4       	ldi	r24, 0x42	; 66
    355a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    355e:	12 c0       	rjmp	.+36     	; 0x3584 <main+0x23ae>
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	61 e0       	ldi	r22, 0x01	; 1
    3564:	81 e4       	ldi	r24, 0x41	; 65
									}
									else{
										sendString_setAdress("   Senhas Nao   ", 1, 1);
    3566:	95 e0       	ldi	r25, 0x05	; 5
    3568:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    356c:	41 e0       	ldi	r20, 0x01	; 1
    356e:	62 e0       	ldi	r22, 0x02	; 2
    3570:	82 e5       	ldi	r24, 0x52	; 82
										sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    3572:	95 e0       	ldi	r25, 0x05	; 5
    3574:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3578:	82 e0       	ldi	r24, 0x02	; 2
    357a:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    357e:	82 e4       	ldi	r24, 0x42	; 66
    3580:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
    3584:	0e 94 ab 03 	call	0x756	; 0x756 <getCharacter_B>
    3588:	03 e0       	ldi	r16, 0x03	; 3
									}
									tecla = getCharacter_B();
    358a:	91 2c       	mov	r9, r1
    358c:	0f 2e       	mov	r0, r31
									option_menu_operacional = 0;
									b = 3;
    358e:	f7 e0       	ldi	r31, 0x07	; 7
									else{
										sendString_setAdress("   Senhas Nao   ", 1, 1);
										sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
									}
									tecla = getCharacter_B();
									option_menu_operacional = 0;
    3590:	df 2e       	mov	r13, r31
								if(tecla == 'A' && input_caracters_counter == 5){
									a = 0;
									for(i = 0; i < 5; i++){
										if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
									}
									menu_index = OPTION_TROCA_SENHA;
    3592:	f0 2d       	mov	r31, r0
    3594:	30 c0       	rjmp	.+96     	; 0x35f6 <main+0x2420>
    3596:	12 34       	cpi	r17, 0x42	; 66
    3598:	41 f1       	breq	.+80     	; 0x35ea <main+0x2414>
										sendString_setAdress("   Senhas Nao   ", 1, 1);
										sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
									}
									tecla = getCharacter_B();
									option_menu_operacional = 0;
									b = 3;
    359a:	13 34       	cpi	r17, 0x43	; 67
								}
								// se a tecla for B, volta para "urna bloqueada"
								else if(tecla == 'B'){
    359c:	59 f4       	brne	.+22     	; 0x35b4 <main+0x23de>
    359e:	1f ef       	ldi	r17, 0xFF	; 255
									option_menu_operacional = 0;
									menu_index = OPTION_TROCA_SENHA;
									b = 3;
								}
								// se a tecla for C, apaga o último caractere (não funcionando)
								else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    35a0:	1f 0d       	add	r17, r15
    35a2:	8a e0       	ldi	r24, 0x0A	; 10
									input_caracters_counter--;
    35a4:	8f 0d       	add	r24, r15
    35a6:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
									setDdRamAddress(11 + input_caracters_counter);
    35aa:	80 e2       	ldi	r24, 0x20	; 32
    35ac:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
									sendChar(' ');
    35b0:	f1 2e       	mov	r15, r17
    35b2:	21 c0       	rjmp	.+66     	; 0x35f6 <main+0x2420>
    35b4:	84 e0       	ldi	r24, 0x04	; 4
									menu_index = OPTION_TROCA_SENHA;
									b = 3;
								}
								// se a tecla for C, apaga o último caractere (não funcionando)
								else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
									input_caracters_counter--;
    35b6:	8f 15       	cp	r24, r15
    35b8:	f0 f0       	brcs	.+60     	; 0x35f6 <main+0x2420>
									setDdRamAddress(11 + input_caracters_counter);
									sendChar(' ');
								}
								// se for um caractere válido e ainda não tiver execedido o limite, é contabilizado
								else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    35ba:	1a 32       	cpi	r17, 0x2A	; 42
    35bc:	e1 f0       	breq	.+56     	; 0x35f6 <main+0x2420>
    35be:	14 34       	cpi	r17, 0x44	; 68
    35c0:	d1 f0       	breq	.+52     	; 0x35f6 <main+0x2420>
    35c2:	13 32       	cpi	r17, 0x23	; 35
    35c4:	c1 f0       	breq	.+48     	; 0x35f6 <main+0x2420>
    35c6:	11 34       	cpi	r17, 0x41	; 65
    35c8:	b1 f0       	breq	.+44     	; 0x35f6 <main+0x2420>
    35ca:	8b e0       	ldi	r24, 0x0B	; 11
    35cc:	8f 0d       	add	r24, r15
    35ce:	0e 94 29 02 	call	0x452	; 0x452 <setDdRamAddress>
									setDdRamAddress(11 + input_caracters_counter);
    35d2:	8a e2       	ldi	r24, 0x2A	; 42
    35d4:	0e 94 b1 01 	call	0x362	; 0x362 <sendChar>
									sendChar('*');
    35d8:	e9 e7       	ldi	r30, 0x79	; 121
    35da:	f2 e0       	ldi	r31, 0x02	; 2
    35dc:	ec 0f       	add	r30, r28
									guarda_novasenha2_mesario[input_caracters_counter] = tecla;
    35de:	fd 1f       	adc	r31, r29
    35e0:	ef 0d       	add	r30, r15
    35e2:	f1 1d       	adc	r31, r1
    35e4:	10 83       	st	Z, r17
    35e6:	f3 94       	inc	r15
    35e8:	06 c0       	rjmp	.+12     	; 0x35f6 <main+0x2420>
    35ea:	03 e0       	ldi	r16, 0x03	; 3
									input_caracters_counter++;
    35ec:	91 2c       	mov	r9, r1
    35ee:	0f 2e       	mov	r0, r31
								}
								// se a tecla for B, volta para "urna bloqueada"
								else if(tecla == 'B'){
									option_menu_operacional = 0;
									menu_index = OPTION_TROCA_SENHA;
									b = 3;
    35f0:	f7 e0       	ldi	r31, 0x07	; 7
									option_menu_operacional = 0;
									b = 3;
								}
								// se a tecla for B, volta para "urna bloqueada"
								else if(tecla == 'B'){
									option_menu_operacional = 0;
    35f2:	df 2e       	mov	r13, r31
									menu_index = OPTION_TROCA_SENHA;
    35f4:	f0 2d       	mov	r31, r0
    35f6:	02 30       	cpi	r16, 0x02	; 2
    35f8:	09 f4       	brne	.+2      	; 0x35fc <main+0x2426>
    35fa:	65 cf       	rjmp	.-310    	; 0x34c6 <main+0x22f0>
									setDdRamAddress(11 + input_caracters_counter);
									sendChar('*');
									guarda_novasenha2_mesario[input_caracters_counter] = tecla;
									input_caracters_counter++;
								}
							} while(b == 2);
    35fc:	09 c0       	rjmp	.+18     	; 0x3610 <main+0x243a>
    35fe:	91 2c       	mov	r9, r1
    3600:	dd 24       	eor	r13, r13
    3602:	d3 94       	inc	r13
							menu_index = 1;
							sendString_setAdress("BLOQUEANDO URNA ", 1, 1);
							sendString_setAdress("      ...       ", 2, 1);
							delay_ms(1000);
						}
						else if(tecla == 'A') {option_menu_operacional = 0; menu_index = 1;}
    3604:	05 c0       	rjmp	.+10     	; 0x3610 <main+0x243a>
    3606:	91 2c       	mov	r9, r1
    3608:	0f 2e       	mov	r0, r31
    360a:	f7 e0       	ldi	r31, 0x07	; 7
									guarda_novasenha2_mesario[input_caracters_counter] = tecla;
									input_caracters_counter++;
								}
							} while(b == 2);
						}
						else {option_menu_operacional = 0; menu_index = OPTION_TROCA_SENHA;}
    360c:	df 2e       	mov	r13, r31
    360e:	f0 2d       	mov	r31, r0
    3610:	cd 57       	subi	r28, 0x7D	; 125
    3612:	dd 4f       	sbci	r29, 0xFD	; 253
    3614:	98 81       	ld	r25, Y
				menu_index = 1;
				option_menu_operacional = 0;
			}
		}
		
		while(urna_estado == ENCERRADA){
    3616:	c3 58       	subi	r28, 0x83	; 131
    3618:	d2 40       	sbci	r29, 0x02	; 2
    361a:	94 30       	cpi	r25, 0x04	; 4
    361c:	09 f4       	brne	.+2      	; 0x3620 <main+0x244a>
    361e:	94 ca       	rjmp	.-2776   	; 0x2b48 <main+0x1972>
    3620:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <main+0x48c>

00003624 <debounce>:
    3624:	1f 93       	push	r17
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	c6 2f       	mov	r28, r22
    362c:	82 30       	cpi	r24, 0x02	; 2
    362e:	b1 f0       	breq	.+44     	; 0x365c <debounce+0x38>
    3630:	18 f4       	brcc	.+6      	; 0x3638 <debounce+0x14>
    3632:	81 30       	cpi	r24, 0x01	; 1
    3634:	31 f0       	breq	.+12     	; 0x3642 <debounce+0x1e>
    3636:	38 c0       	rjmp	.+112    	; 0x36a8 <debounce+0x84>
    3638:	83 30       	cpi	r24, 0x03	; 3
    363a:	e9 f0       	breq	.+58     	; 0x3676 <debounce+0x52>
    363c:	84 30       	cpi	r24, 0x04	; 4
    363e:	41 f1       	breq	.+80     	; 0x3690 <debounce+0x6c>
    3640:	33 c0       	rjmp	.+102    	; 0x36a8 <debounce+0x84>
    3642:	8b b1       	in	r24, 0x0b	; 11
    3644:	8f 7d       	andi	r24, 0xDF	; 223
    3646:	8b b9       	out	0x0b, r24	; 11
    3648:	8b b1       	in	r24, 0x0b	; 11
    364a:	80 61       	ori	r24, 0x10	; 16
    364c:	8b b9       	out	0x0b, r24	; 11
    364e:	8b b1       	in	r24, 0x0b	; 11
    3650:	88 60       	ori	r24, 0x08	; 8
    3652:	8b b9       	out	0x0b, r24	; 11
    3654:	8b b1       	in	r24, 0x0b	; 11
    3656:	84 60       	ori	r24, 0x04	; 4
    3658:	8b b9       	out	0x0b, r24	; 11
    365a:	26 c0       	rjmp	.+76     	; 0x36a8 <debounce+0x84>
    365c:	8b b1       	in	r24, 0x0b	; 11
    365e:	80 62       	ori	r24, 0x20	; 32
    3660:	8b b9       	out	0x0b, r24	; 11
    3662:	8b b1       	in	r24, 0x0b	; 11
    3664:	8f 7e       	andi	r24, 0xEF	; 239
    3666:	8b b9       	out	0x0b, r24	; 11
    3668:	8b b1       	in	r24, 0x0b	; 11
    366a:	88 60       	ori	r24, 0x08	; 8
    366c:	8b b9       	out	0x0b, r24	; 11
    366e:	8b b1       	in	r24, 0x0b	; 11
    3670:	84 60       	ori	r24, 0x04	; 4
    3672:	8b b9       	out	0x0b, r24	; 11
    3674:	19 c0       	rjmp	.+50     	; 0x36a8 <debounce+0x84>
    3676:	8b b1       	in	r24, 0x0b	; 11
    3678:	80 62       	ori	r24, 0x20	; 32
    367a:	8b b9       	out	0x0b, r24	; 11
    367c:	8b b1       	in	r24, 0x0b	; 11
    367e:	80 61       	ori	r24, 0x10	; 16
    3680:	8b b9       	out	0x0b, r24	; 11
    3682:	8b b1       	in	r24, 0x0b	; 11
    3684:	87 7f       	andi	r24, 0xF7	; 247
    3686:	8b b9       	out	0x0b, r24	; 11
    3688:	8b b1       	in	r24, 0x0b	; 11
    368a:	84 60       	ori	r24, 0x04	; 4
    368c:	8b b9       	out	0x0b, r24	; 11
    368e:	0c c0       	rjmp	.+24     	; 0x36a8 <debounce+0x84>
    3690:	8b b1       	in	r24, 0x0b	; 11
    3692:	80 62       	ori	r24, 0x20	; 32
    3694:	8b b9       	out	0x0b, r24	; 11
    3696:	8b b1       	in	r24, 0x0b	; 11
    3698:	80 61       	ori	r24, 0x10	; 16
    369a:	8b b9       	out	0x0b, r24	; 11
    369c:	8b b1       	in	r24, 0x0b	; 11
    369e:	88 60       	ori	r24, 0x08	; 8
    36a0:	8b b9       	out	0x0b, r24	; 11
    36a2:	8b b1       	in	r24, 0x0b	; 11
    36a4:	8b 7f       	andi	r24, 0xFB	; 251
    36a6:	8b b9       	out	0x0b, r24	; 11
    36a8:	d0 e0       	ldi	r29, 0x00	; 0
    36aa:	10 e0       	ldi	r17, 0x00	; 0
    36ac:	01 c0       	rjmp	.+2      	; 0x36b0 <debounce+0x8c>
    36ae:	18 2f       	mov	r17, r24
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a2 d1       	rcall	.+836    	; 0x39fe <delay_ms>
    36ba:	c2 30       	cpi	r28, 0x02	; 2
    36bc:	61 f0       	breq	.+24     	; 0x36d6 <debounce+0xb2>
    36be:	18 f4       	brcc	.+6      	; 0x36c6 <debounce+0xa2>
    36c0:	c1 30       	cpi	r28, 0x01	; 1
    36c2:	31 f0       	breq	.+12     	; 0x36d0 <debounce+0xac>
    36c4:	16 c0       	rjmp	.+44     	; 0x36f2 <debounce+0xce>
    36c6:	c3 30       	cpi	r28, 0x03	; 3
    36c8:	51 f0       	breq	.+20     	; 0x36de <debounce+0xba>
    36ca:	c4 30       	cpi	r28, 0x04	; 4
    36cc:	69 f0       	breq	.+26     	; 0x36e8 <debounce+0xc4>
    36ce:	11 c0       	rjmp	.+34     	; 0x36f2 <debounce+0xce>
    36d0:	86 b1       	in	r24, 0x06	; 6
    36d2:	81 70       	andi	r24, 0x01	; 1
    36d4:	0f c0       	rjmp	.+30     	; 0x36f4 <debounce+0xd0>
    36d6:	86 b1       	in	r24, 0x06	; 6
    36d8:	86 95       	lsr	r24
    36da:	81 70       	andi	r24, 0x01	; 1
    36dc:	0b c0       	rjmp	.+22     	; 0x36f4 <debounce+0xd0>
    36de:	86 b1       	in	r24, 0x06	; 6
    36e0:	82 fb       	bst	r24, 2
    36e2:	88 27       	eor	r24, r24
    36e4:	80 f9       	bld	r24, 0
    36e6:	06 c0       	rjmp	.+12     	; 0x36f4 <debounce+0xd0>
    36e8:	86 b1       	in	r24, 0x06	; 6
    36ea:	83 fb       	bst	r24, 3
    36ec:	88 27       	eor	r24, r24
    36ee:	80 f9       	bld	r24, 0
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <debounce+0xd0>
    36f2:	81 2f       	mov	r24, r17
    36f4:	18 13       	cpse	r17, r24
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <debounce+0xd8>
    36f8:	df 5f       	subi	r29, 0xFF	; 255
    36fa:	01 c0       	rjmp	.+2      	; 0x36fe <debounce+0xda>
    36fc:	d0 e0       	ldi	r29, 0x00	; 0
    36fe:	d7 30       	cpi	r29, 0x07	; 7
    3700:	b0 f2       	brcs	.-84     	; 0x36ae <debounce+0x8a>
    3702:	c2 30       	cpi	r28, 0x02	; 2
    3704:	61 f0       	breq	.+24     	; 0x371e <debounce+0xfa>
    3706:	18 f4       	brcc	.+6      	; 0x370e <debounce+0xea>
    3708:	c1 30       	cpi	r28, 0x01	; 1
    370a:	31 f0       	breq	.+12     	; 0x3718 <debounce+0xf4>
    370c:	10 c0       	rjmp	.+32     	; 0x372e <debounce+0x10a>
    370e:	c3 30       	cpi	r28, 0x03	; 3
    3710:	49 f0       	breq	.+18     	; 0x3724 <debounce+0x100>
    3712:	c4 30       	cpi	r28, 0x04	; 4
    3714:	51 f0       	breq	.+20     	; 0x372a <debounce+0x106>
    3716:	0b c0       	rjmp	.+22     	; 0x372e <debounce+0x10a>
    3718:	30 9b       	sbis	0x06, 0	; 6
    371a:	fe cf       	rjmp	.-4      	; 0x3718 <debounce+0xf4>
    371c:	08 c0       	rjmp	.+16     	; 0x372e <debounce+0x10a>
    371e:	31 9b       	sbis	0x06, 1	; 6
    3720:	fe cf       	rjmp	.-4      	; 0x371e <debounce+0xfa>
    3722:	05 c0       	rjmp	.+10     	; 0x372e <debounce+0x10a>
    3724:	32 9b       	sbis	0x06, 2	; 6
    3726:	fe cf       	rjmp	.-4      	; 0x3724 <debounce+0x100>
    3728:	02 c0       	rjmp	.+4      	; 0x372e <debounce+0x10a>
    372a:	33 9b       	sbis	0x06, 3	; 6
    372c:	fe cf       	rjmp	.-4      	; 0x372a <debounce+0x106>
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	1f 91       	pop	r17
    3734:	08 95       	ret

00003736 <get_tecla>:
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	74 df       	rcall	.-280    	; 0x3624 <debounce>
    373c:	88 23       	and	r24, r24
    373e:	09 f4       	brne	.+2      	; 0x3742 <get_tecla+0xc>
    3740:	54 c0       	rjmp	.+168    	; 0x37ea <get_tecla+0xb4>
    3742:	62 e0       	ldi	r22, 0x02	; 2
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	6e df       	rcall	.-292    	; 0x3624 <debounce>
    3748:	88 23       	and	r24, r24
    374a:	09 f4       	brne	.+2      	; 0x374e <get_tecla+0x18>
    374c:	50 c0       	rjmp	.+160    	; 0x37ee <get_tecla+0xb8>
    374e:	63 e0       	ldi	r22, 0x03	; 3
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	68 df       	rcall	.-304    	; 0x3624 <debounce>
    3754:	88 23       	and	r24, r24
    3756:	09 f4       	brne	.+2      	; 0x375a <get_tecla+0x24>
    3758:	4c c0       	rjmp	.+152    	; 0x37f2 <get_tecla+0xbc>
    375a:	64 e0       	ldi	r22, 0x04	; 4
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	62 df       	rcall	.-316    	; 0x3624 <debounce>
    3760:	88 23       	and	r24, r24
    3762:	09 f4       	brne	.+2      	; 0x3766 <get_tecla+0x30>
    3764:	48 c0       	rjmp	.+144    	; 0x37f6 <get_tecla+0xc0>
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	82 e0       	ldi	r24, 0x02	; 2
    376a:	5c df       	rcall	.-328    	; 0x3624 <debounce>
    376c:	88 23       	and	r24, r24
    376e:	09 f4       	brne	.+2      	; 0x3772 <get_tecla+0x3c>
    3770:	44 c0       	rjmp	.+136    	; 0x37fa <get_tecla+0xc4>
    3772:	62 e0       	ldi	r22, 0x02	; 2
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	56 df       	rcall	.-340    	; 0x3624 <debounce>
    3778:	88 23       	and	r24, r24
    377a:	09 f4       	brne	.+2      	; 0x377e <get_tecla+0x48>
    377c:	40 c0       	rjmp	.+128    	; 0x37fe <get_tecla+0xc8>
    377e:	63 e0       	ldi	r22, 0x03	; 3
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	50 df       	rcall	.-352    	; 0x3624 <debounce>
    3784:	88 23       	and	r24, r24
    3786:	09 f4       	brne	.+2      	; 0x378a <get_tecla+0x54>
    3788:	3c c0       	rjmp	.+120    	; 0x3802 <get_tecla+0xcc>
    378a:	64 e0       	ldi	r22, 0x04	; 4
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	4a df       	rcall	.-364    	; 0x3624 <debounce>
    3790:	88 23       	and	r24, r24
    3792:	09 f4       	brne	.+2      	; 0x3796 <get_tecla+0x60>
    3794:	38 c0       	rjmp	.+112    	; 0x3806 <get_tecla+0xd0>
    3796:	61 e0       	ldi	r22, 0x01	; 1
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	44 df       	rcall	.-376    	; 0x3624 <debounce>
    379c:	88 23       	and	r24, r24
    379e:	a9 f1       	breq	.+106    	; 0x380a <get_tecla+0xd4>
    37a0:	62 e0       	ldi	r22, 0x02	; 2
    37a2:	83 e0       	ldi	r24, 0x03	; 3
    37a4:	3f df       	rcall	.-386    	; 0x3624 <debounce>
    37a6:	88 23       	and	r24, r24
    37a8:	91 f1       	breq	.+100    	; 0x380e <get_tecla+0xd8>
    37aa:	63 e0       	ldi	r22, 0x03	; 3
    37ac:	83 e0       	ldi	r24, 0x03	; 3
    37ae:	3a df       	rcall	.-396    	; 0x3624 <debounce>
    37b0:	88 23       	and	r24, r24
    37b2:	79 f1       	breq	.+94     	; 0x3812 <get_tecla+0xdc>
    37b4:	64 e0       	ldi	r22, 0x04	; 4
    37b6:	83 e0       	ldi	r24, 0x03	; 3
    37b8:	35 df       	rcall	.-406    	; 0x3624 <debounce>
    37ba:	88 23       	and	r24, r24
    37bc:	61 f1       	breq	.+88     	; 0x3816 <get_tecla+0xe0>
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	84 e0       	ldi	r24, 0x04	; 4
    37c2:	30 df       	rcall	.-416    	; 0x3624 <debounce>
    37c4:	88 23       	and	r24, r24
    37c6:	49 f1       	breq	.+82     	; 0x381a <get_tecla+0xe4>
    37c8:	62 e0       	ldi	r22, 0x02	; 2
    37ca:	84 e0       	ldi	r24, 0x04	; 4
    37cc:	2b df       	rcall	.-426    	; 0x3624 <debounce>
    37ce:	88 23       	and	r24, r24
    37d0:	31 f1       	breq	.+76     	; 0x381e <get_tecla+0xe8>
    37d2:	63 e0       	ldi	r22, 0x03	; 3
    37d4:	84 e0       	ldi	r24, 0x04	; 4
    37d6:	26 df       	rcall	.-436    	; 0x3624 <debounce>
    37d8:	88 23       	and	r24, r24
    37da:	19 f1       	breq	.+70     	; 0x3822 <get_tecla+0xec>
    37dc:	64 e0       	ldi	r22, 0x04	; 4
    37de:	84 e0       	ldi	r24, 0x04	; 4
    37e0:	21 df       	rcall	.-446    	; 0x3624 <debounce>
    37e2:	81 11       	cpse	r24, r1
    37e4:	a8 cf       	rjmp	.-176    	; 0x3736 <get_tecla>
    37e6:	84 e4       	ldi	r24, 0x44	; 68
    37e8:	08 95       	ret
    37ea:	81 e3       	ldi	r24, 0x31	; 49
    37ec:	08 95       	ret
    37ee:	82 e3       	ldi	r24, 0x32	; 50
    37f0:	08 95       	ret
    37f2:	83 e3       	ldi	r24, 0x33	; 51
    37f4:	08 95       	ret
    37f6:	81 e4       	ldi	r24, 0x41	; 65
    37f8:	08 95       	ret
    37fa:	84 e3       	ldi	r24, 0x34	; 52
    37fc:	08 95       	ret
    37fe:	85 e3       	ldi	r24, 0x35	; 53
    3800:	08 95       	ret
    3802:	86 e3       	ldi	r24, 0x36	; 54
    3804:	08 95       	ret
    3806:	82 e4       	ldi	r24, 0x42	; 66
    3808:	08 95       	ret
    380a:	87 e3       	ldi	r24, 0x37	; 55
    380c:	08 95       	ret
    380e:	88 e3       	ldi	r24, 0x38	; 56
    3810:	08 95       	ret
    3812:	89 e3       	ldi	r24, 0x39	; 57
    3814:	08 95       	ret
    3816:	83 e4       	ldi	r24, 0x43	; 67
    3818:	08 95       	ret
    381a:	8a e2       	ldi	r24, 0x2A	; 42
    381c:	08 95       	ret
    381e:	80 e3       	ldi	r24, 0x30	; 48
    3820:	08 95       	ret
    3822:	83 e2       	ldi	r24, 0x23	; 35
    3824:	08 95       	ret

00003826 <initSerialConfig>:
    3826:	e1 ec       	ldi	r30, 0xC1	; 193
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	88 e1       	ldi	r24, 0x18	; 24
    382c:	80 83       	st	Z, r24
    382e:	83 e3       	ldi	r24, 0x33	; 51
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    3836:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    383a:	80 81       	ld	r24, Z
    383c:	80 68       	ori	r24, 0x80	; 128
    383e:	80 83       	st	Z, r24
    3840:	78 94       	sei
    3842:	08 95       	ret

00003844 <getSerialChar>:
    3844:	e1 ec       	ldi	r30, 0xC1	; 193
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	8f 77       	andi	r24, 0x7F	; 127
    384c:	80 83       	st	Z, r24
    384e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    3852:	88 23       	and	r24, r24
    3854:	e4 f7       	brge	.-8      	; 0x384e <getSerialChar+0xa>
    3856:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    385a:	e1 ec       	ldi	r30, 0xC1	; 193
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	90 81       	ld	r25, Z
    3860:	90 68       	ori	r25, 0x80	; 128
    3862:	90 83       	st	Z, r25
    3864:	08 95       	ret

00003866 <sendSerialChar>:
    3866:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    386a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    386e:	85 ff       	sbrs	r24, 5
    3870:	fc cf       	rjmp	.-8      	; 0x386a <sendSerialChar+0x4>
    3872:	08 95       	ret

00003874 <getSerialMessage>:
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	ec 01       	movw	r28, r24
    3880:	e1 df       	rcall	.-62     	; 0x3844 <getSerialChar>
    3882:	88 83       	st	Y, r24
    3884:	8d 34       	cpi	r24, 0x4D	; 77
    3886:	e1 f7       	brne	.-8      	; 0x3880 <getSerialMessage+0xc>
    3888:	8d 34       	cpi	r24, 0x4D	; 77
    388a:	99 f5       	brne	.+102    	; 0x38f2 <getSerialMessage+0x7e>
    388c:	db df       	rcall	.-74     	; 0x3844 <getSerialChar>
    388e:	89 83       	std	Y+1, r24	; 0x01
    3890:	89 34       	cpi	r24, 0x49	; 73
    3892:	31 f0       	breq	.+12     	; 0x38a0 <getSerialMessage+0x2c>
    3894:	83 34       	cpi	r24, 0x43	; 67
    3896:	21 f0       	breq	.+8      	; 0x38a0 <getSerialMessage+0x2c>
    3898:	84 35       	cpi	r24, 0x54	; 84
    389a:	11 f0       	breq	.+4      	; 0x38a0 <getSerialMessage+0x2c>
    389c:	82 35       	cpi	r24, 0x52	; 82
    389e:	11 f4       	brne	.+4      	; 0x38a4 <getSerialMessage+0x30>
    38a0:	1a 82       	std	Y+2, r1	; 0x02
    38a2:	28 c0       	rjmp	.+80     	; 0x38f4 <getSerialMessage+0x80>
    38a4:	86 35       	cpi	r24, 0x56	; 86
    38a6:	51 f4       	brne	.+20     	; 0x38bc <getSerialMessage+0x48>
    38a8:	cd df       	rcall	.-102    	; 0x3844 <getSerialChar>
    38aa:	8a 83       	std	Y+2, r24	; 0x02
    38ac:	8f 34       	cpi	r24, 0x4F	; 79
    38ae:	21 f0       	breq	.+8      	; 0x38b8 <getSerialMessage+0x44>
    38b0:	89 34       	cpi	r24, 0x49	; 73
    38b2:	11 f0       	breq	.+4      	; 0x38b8 <getSerialMessage+0x44>
    38b4:	88 35       	cpi	r24, 0x58	; 88
    38b6:	11 f4       	brne	.+4      	; 0x38bc <getSerialMessage+0x48>
    38b8:	1b 82       	std	Y+3, r1	; 0x03
    38ba:	1c c0       	rjmp	.+56     	; 0x38f4 <getSerialMessage+0x80>
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	8e 34       	cpi	r24, 0x4E	; 78
    38c0:	31 f0       	breq	.+12     	; 0x38ce <getSerialMessage+0x5a>
    38c2:	80 35       	cpi	r24, 0x50	; 80
    38c4:	21 f0       	breq	.+8      	; 0x38ce <getSerialMessage+0x5a>
    38c6:	83 35       	cpi	r24, 0x53	; 83
    38c8:	11 f0       	breq	.+4      	; 0x38ce <getSerialMessage+0x5a>
    38ca:	86 34       	cpi	r24, 0x46	; 70
    38cc:	91 f4       	brne	.+36     	; 0x38f2 <getSerialMessage+0x7e>
    38ce:	ba df       	rcall	.-140    	; 0x3844 <getSerialChar>
    38d0:	8a 83       	std	Y+2, r24	; 0x02
    38d2:	f1 2c       	mov	r15, r1
    38d4:	0a c0       	rjmp	.+20     	; 0x38ea <getSerialMessage+0x76>
    38d6:	0f 2d       	mov	r16, r15
    38d8:	10 e0       	ldi	r17, 0x00	; 0
    38da:	0d 5f       	subi	r16, 0xFD	; 253
    38dc:	1f 4f       	sbci	r17, 0xFF	; 255
    38de:	0c 0f       	add	r16, r28
    38e0:	1d 1f       	adc	r17, r29
    38e2:	b0 df       	rcall	.-160    	; 0x3844 <getSerialChar>
    38e4:	f8 01       	movw	r30, r16
    38e6:	80 83       	st	Z, r24
    38e8:	f3 94       	inc	r15
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	f8 16       	cp	r15, r24
    38ee:	98 f3       	brcs	.-26     	; 0x38d6 <getSerialMessage+0x62>
    38f0:	01 c0       	rjmp	.+2      	; 0x38f4 <getSerialMessage+0x80>
    38f2:	18 82       	st	Y, r1
    38f4:	df 91       	pop	r29
    38f6:	cf 91       	pop	r28
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	ff 90       	pop	r15
    38fe:	08 95       	ret

00003900 <sendSerialMessage>:
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
    390c:	7c 01       	movw	r14, r24
    390e:	fc 01       	movw	r30, r24
    3910:	01 90       	ld	r0, Z+
    3912:	00 20       	and	r0, r0
    3914:	e9 f7       	brne	.-6      	; 0x3910 <sendSerialMessage+0x10>
    3916:	31 97       	sbiw	r30, 0x01	; 1
    3918:	8f 01       	movw	r16, r30
    391a:	08 1b       	sub	r16, r24
    391c:	19 0b       	sbc	r17, r25
    391e:	c0 e0       	ldi	r28, 0x00	; 0
    3920:	d0 e0       	ldi	r29, 0x00	; 0
    3922:	06 c0       	rjmp	.+12     	; 0x3930 <sendSerialMessage+0x30>
    3924:	f7 01       	movw	r30, r14
    3926:	ec 0f       	add	r30, r28
    3928:	fd 1f       	adc	r31, r29
    392a:	80 81       	ld	r24, Z
    392c:	9c df       	rcall	.-200    	; 0x3866 <sendSerialChar>
    392e:	21 96       	adiw	r28, 0x01	; 1
    3930:	0c 17       	cp	r16, r28
    3932:	1d 07       	cpc	r17, r29
    3934:	bc f7       	brge	.-18     	; 0x3924 <sendSerialMessage+0x24>
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	ff 90       	pop	r15
    3940:	ef 90       	pop	r14
    3942:	08 95       	ret

00003944 <__vector_18>:
    3944:	1f 92       	push	r1
    3946:	0f 92       	push	r0
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	0f 92       	push	r0
    394c:	11 24       	eor	r1, r1
    394e:	2f 93       	push	r18
    3950:	3f 93       	push	r19
    3952:	4f 93       	push	r20
    3954:	5f 93       	push	r21
    3956:	6f 93       	push	r22
    3958:	7f 93       	push	r23
    395a:	8f 93       	push	r24
    395c:	9f 93       	push	r25
    395e:	af 93       	push	r26
    3960:	bf 93       	push	r27
    3962:	cf 93       	push	r28
    3964:	ef 93       	push	r30
    3966:	ff 93       	push	r31
    3968:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    396c:	8d 34       	cpi	r24, 0x4D	; 77
    396e:	c1 f4       	brne	.+48     	; 0x39a0 <__vector_18+0x5c>
    3970:	e1 ec       	ldi	r30, 0xC1	; 193
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	80 81       	ld	r24, Z
    3976:	8f 77       	andi	r24, 0x7F	; 127
    3978:	80 83       	st	Z, r24
    397a:	64 df       	rcall	.-312    	; 0x3844 <getSerialChar>
    397c:	88 34       	cpi	r24, 0x48	; 72
    397e:	59 f4       	brne	.+22     	; 0x3996 <__vector_18+0x52>
    3980:	61 df       	rcall	.-318    	; 0x3844 <getSerialChar>
    3982:	c8 2f       	mov	r28, r24
    3984:	5f df       	rcall	.-322    	; 0x3844 <getSerialChar>
    3986:	68 2f       	mov	r22, r24
    3988:	8c 2f       	mov	r24, r28
    398a:	71 d0       	rcall	.+226    	; 0x3a6e <setTime>
    398c:	81 11       	cpse	r24, r1
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <__vector_18+0x52>
    3990:	8e e8       	ldi	r24, 0x8E	; 142
    3992:	95 e0       	ldi	r25, 0x05	; 5
    3994:	b5 df       	rcall	.-150    	; 0x3900 <sendSerialMessage>
    3996:	e1 ec       	ldi	r30, 0xC1	; 193
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	80 68       	ori	r24, 0x80	; 128
    399e:	80 83       	st	Z, r24
    39a0:	ff 91       	pop	r31
    39a2:	ef 91       	pop	r30
    39a4:	cf 91       	pop	r28
    39a6:	bf 91       	pop	r27
    39a8:	af 91       	pop	r26
    39aa:	9f 91       	pop	r25
    39ac:	8f 91       	pop	r24
    39ae:	7f 91       	pop	r23
    39b0:	6f 91       	pop	r22
    39b2:	5f 91       	pop	r21
    39b4:	4f 91       	pop	r20
    39b6:	3f 91       	pop	r19
    39b8:	2f 91       	pop	r18
    39ba:	0f 90       	pop	r0
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	0f 90       	pop	r0
    39c0:	1f 90       	pop	r1
    39c2:	18 95       	reti

000039c4 <delay_us>:
    39c4:	22 e0       	ldi	r18, 0x02	; 2
    39c6:	24 bd       	out	0x24, r18	; 36
    39c8:	31 e0       	ldi	r19, 0x01	; 1
    39ca:	35 bd       	out	0x25, r19	; 37
    39cc:	3f e9       	ldi	r19, 0x9F	; 159
    39ce:	37 bd       	out	0x27, r19	; 39
    39d0:	16 bc       	out	0x26, r1	; 38
    39d2:	25 bb       	out	0x15, r18	; 21
    39d4:	2a e0       	ldi	r18, 0x0A	; 10
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	fe d0       	rcall	.+508    	; 0x3bda <__divmodsi4>
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	dc 01       	movw	r26, r24
    39e4:	a9 9b       	sbis	0x15, 1	; 21
    39e6:	fe cf       	rjmp	.-4      	; 0x39e4 <delay_us+0x20>
    39e8:	62 e0       	ldi	r22, 0x02	; 2
    39ea:	65 bb       	out	0x15, r22	; 21
    39ec:	01 96       	adiw	r24, 0x01	; 1
    39ee:	a1 1d       	adc	r26, r1
    39f0:	b1 1d       	adc	r27, r1
    39f2:	82 17       	cp	r24, r18
    39f4:	93 07       	cpc	r25, r19
    39f6:	a4 07       	cpc	r26, r20
    39f8:	b5 07       	cpc	r27, r21
    39fa:	a4 f3       	brlt	.-24     	; 0x39e4 <delay_us+0x20>
    39fc:	08 95       	ret

000039fe <delay_ms>:
    39fe:	0f 93       	push	r16
    3a00:	1f 93       	push	r17
    3a02:	8b 01       	movw	r16, r22
    3a04:	9c 01       	movw	r18, r24
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	84 bd       	out	0x24, r24	; 36
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	85 bd       	out	0x25, r24	; 37
    3a0e:	89 ef       	ldi	r24, 0xF9	; 249
    3a10:	87 bd       	out	0x27, r24	; 39
    3a12:	16 bc       	out	0x26, r1	; 38
    3a14:	85 b3       	in	r24, 0x15	; 21
    3a16:	82 60       	ori	r24, 0x02	; 2
    3a18:	85 bb       	out	0x15, r24	; 21
    3a1a:	40 e0       	ldi	r20, 0x00	; 0
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	ba 01       	movw	r22, r20
    3a20:	a9 9b       	sbis	0x15, 1	; 21
    3a22:	fe cf       	rjmp	.-4      	; 0x3a20 <delay_ms+0x22>
    3a24:	85 b3       	in	r24, 0x15	; 21
    3a26:	82 60       	ori	r24, 0x02	; 2
    3a28:	85 bb       	out	0x15, r24	; 21
    3a2a:	4f 5f       	subi	r20, 0xFF	; 255
    3a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2e:	6f 4f       	sbci	r22, 0xFF	; 255
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	40 17       	cp	r20, r16
    3a34:	51 07       	cpc	r21, r17
    3a36:	62 07       	cpc	r22, r18
    3a38:	73 07       	cpc	r23, r19
    3a3a:	94 f3       	brlt	.-28     	; 0x3a20 <delay_ms+0x22>
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	08 95       	ret

00003a42 <timeControlConfig>:
    3a42:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3a46:	8c e0       	ldi	r24, 0x0C	; 12
    3a48:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    3a4c:	83 e2       	ldi	r24, 0x23	; 35
    3a4e:	94 ef       	ldi	r25, 0xF4	; 244
    3a50:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    3a54:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    3a58:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    3a5c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    3a60:	ef e6       	ldi	r30, 0x6F	; 111
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	82 60       	ori	r24, 0x02	; 2
    3a68:	80 83       	st	Z, r24
    3a6a:	78 94       	sei
    3a6c:	08 95       	ret

00003a6e <setTime>:
    3a6e:	88 31       	cpi	r24, 0x18	; 24
    3a70:	40 f4       	brcc	.+16     	; 0x3a82 <setTime+0x14>
    3a72:	6c 33       	cpi	r22, 0x3C	; 60
    3a74:	40 f4       	brcc	.+16     	; 0x3a86 <setTime+0x18>
    3a76:	e4 e9       	ldi	r30, 0x94	; 148
    3a78:	f5 e0       	ldi	r31, 0x05	; 5
    3a7a:	80 83       	st	Z, r24
    3a7c:	61 83       	std	Z+1, r22	; 0x01
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	08 95       	ret
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	08 95       	ret
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	08 95       	ret

00003a8a <incTime>:
    3a8a:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <currentTime+0x2>
    3a8e:	8b 33       	cpi	r24, 0x3B	; 59
    3a90:	a9 f4       	brne	.+42     	; 0x3abc <incTime+0x32>
    3a92:	e4 e9       	ldi	r30, 0x94	; 148
    3a94:	f5 e0       	ldi	r31, 0x05	; 5
    3a96:	12 82       	std	Z+2, r1	; 0x02
    3a98:	81 81       	ldd	r24, Z+1	; 0x01
    3a9a:	8b 33       	cpi	r24, 0x3B	; 59
    3a9c:	59 f4       	brne	.+22     	; 0x3ab4 <incTime+0x2a>
    3a9e:	11 82       	std	Z+1, r1	; 0x01
    3aa0:	80 81       	ld	r24, Z
    3aa2:	87 31       	cpi	r24, 0x17	; 23
    3aa4:	19 f4       	brne	.+6      	; 0x3aac <incTime+0x22>
    3aa6:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <currentTime>
    3aaa:	08 95       	ret
    3aac:	8f 5f       	subi	r24, 0xFF	; 255
    3aae:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <currentTime>
    3ab2:	08 95       	ret
    3ab4:	8f 5f       	subi	r24, 0xFF	; 255
    3ab6:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <currentTime+0x1>
    3aba:	08 95       	ret
    3abc:	8f 5f       	subi	r24, 0xFF	; 255
    3abe:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <currentTime+0x2>
    3ac2:	08 95       	ret

00003ac4 <exibe_hora_display>:
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <exibindo_hora_display>
    3aca:	08 95       	ret

00003acc <apaga_hora_display>:
    3acc:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <exibindo_hora_display>
    3ad0:	08 95       	ret

00003ad2 <__vector_11>:
    3ad2:	1f 92       	push	r1
    3ad4:	0f 92       	push	r0
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	0f 92       	push	r0
    3ada:	11 24       	eor	r1, r1
    3adc:	2f 93       	push	r18
    3ade:	3f 93       	push	r19
    3ae0:	4f 93       	push	r20
    3ae2:	5f 93       	push	r21
    3ae4:	6f 93       	push	r22
    3ae6:	7f 93       	push	r23
    3ae8:	8f 93       	push	r24
    3aea:	9f 93       	push	r25
    3aec:	af 93       	push	r26
    3aee:	bf 93       	push	r27
    3af0:	ef 93       	push	r30
    3af2:	ff 93       	push	r31
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	29 97       	sbiw	r28, 0x09	; 9
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	cd bf       	out	0x3d, r28	; 61
    3b02:	c3 df       	rcall	.-122    	; 0x3a8a <incTime>
    3b04:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <exibindo_hora_display>
    3b08:	88 23       	and	r24, r24
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <__vector_11+0x3c>
    3b0c:	4b c0       	rjmp	.+150    	; 0x3ba4 <__vector_11+0xd2>
    3b0e:	fe 01       	movw	r30, r28
    3b10:	31 96       	adiw	r30, 0x01	; 1
    3b12:	89 e0       	ldi	r24, 0x09	; 9
    3b14:	df 01       	movw	r26, r30
    3b16:	1d 92       	st	X+, r1
    3b18:	8a 95       	dec	r24
    3b1a:	e9 f7       	brne	.-6      	; 0x3b16 <__vector_11+0x44>
    3b1c:	a4 e9       	ldi	r26, 0x94	; 148
    3b1e:	b5 e0       	ldi	r27, 0x05	; 5
    3b20:	8c 91       	ld	r24, X
    3b22:	9d ec       	ldi	r25, 0xCD	; 205
    3b24:	89 9f       	mul	r24, r25
    3b26:	21 2d       	mov	r18, r1
    3b28:	11 24       	eor	r1, r1
    3b2a:	26 95       	lsr	r18
    3b2c:	26 95       	lsr	r18
    3b2e:	26 95       	lsr	r18
    3b30:	30 e3       	ldi	r19, 0x30	; 48
    3b32:	32 0f       	add	r19, r18
    3b34:	39 83       	std	Y+1, r19	; 0x01
    3b36:	22 0f       	add	r18, r18
    3b38:	32 2f       	mov	r19, r18
    3b3a:	33 0f       	add	r19, r19
    3b3c:	33 0f       	add	r19, r19
    3b3e:	23 0f       	add	r18, r19
    3b40:	82 1b       	sub	r24, r18
    3b42:	80 5d       	subi	r24, 0xD0	; 208
    3b44:	8a 83       	std	Y+2, r24	; 0x02
    3b46:	4a e3       	ldi	r20, 0x3A	; 58
    3b48:	4b 83       	std	Y+3, r20	; 0x03
    3b4a:	11 96       	adiw	r26, 0x01	; 1
    3b4c:	8c 91       	ld	r24, X
    3b4e:	11 97       	sbiw	r26, 0x01	; 1
    3b50:	89 9f       	mul	r24, r25
    3b52:	21 2d       	mov	r18, r1
    3b54:	11 24       	eor	r1, r1
    3b56:	26 95       	lsr	r18
    3b58:	26 95       	lsr	r18
    3b5a:	26 95       	lsr	r18
    3b5c:	30 e3       	ldi	r19, 0x30	; 48
    3b5e:	32 0f       	add	r19, r18
    3b60:	3c 83       	std	Y+4, r19	; 0x04
    3b62:	22 0f       	add	r18, r18
    3b64:	32 2f       	mov	r19, r18
    3b66:	33 0f       	add	r19, r19
    3b68:	33 0f       	add	r19, r19
    3b6a:	23 0f       	add	r18, r19
    3b6c:	82 1b       	sub	r24, r18
    3b6e:	80 5d       	subi	r24, 0xD0	; 208
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	4e 83       	std	Y+6, r20	; 0x06
    3b74:	12 96       	adiw	r26, 0x02	; 2
    3b76:	2c 91       	ld	r18, X
    3b78:	29 9f       	mul	r18, r25
    3b7a:	91 2d       	mov	r25, r1
    3b7c:	11 24       	eor	r1, r1
    3b7e:	96 95       	lsr	r25
    3b80:	96 95       	lsr	r25
    3b82:	96 95       	lsr	r25
    3b84:	80 e3       	ldi	r24, 0x30	; 48
    3b86:	89 0f       	add	r24, r25
    3b88:	8f 83       	std	Y+7, r24	; 0x07
    3b8a:	99 0f       	add	r25, r25
    3b8c:	89 2f       	mov	r24, r25
    3b8e:	88 0f       	add	r24, r24
    3b90:	88 0f       	add	r24, r24
    3b92:	98 0f       	add	r25, r24
    3b94:	29 1b       	sub	r18, r25
    3b96:	20 5d       	subi	r18, 0xD0	; 208
    3b98:	28 87       	std	Y+8, r18	; 0x08
    3b9a:	41 e0       	ldi	r20, 0x01	; 1
    3b9c:	62 e0       	ldi	r22, 0x02	; 2
    3b9e:	cf 01       	movw	r24, r30
    3ba0:	0e 94 00 03 	call	0x600	; 0x600 <sendString_setAdress>
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	86 bb       	out	0x16, r24	; 22
    3ba8:	29 96       	adiw	r28, 0x09	; 9
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	ff 91       	pop	r31
    3bba:	ef 91       	pop	r30
    3bbc:	bf 91       	pop	r27
    3bbe:	af 91       	pop	r26
    3bc0:	9f 91       	pop	r25
    3bc2:	8f 91       	pop	r24
    3bc4:	7f 91       	pop	r23
    3bc6:	6f 91       	pop	r22
    3bc8:	5f 91       	pop	r21
    3bca:	4f 91       	pop	r20
    3bcc:	3f 91       	pop	r19
    3bce:	2f 91       	pop	r18
    3bd0:	0f 90       	pop	r0
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	0f 90       	pop	r0
    3bd6:	1f 90       	pop	r1
    3bd8:	18 95       	reti

00003bda <__divmodsi4>:
    3bda:	05 2e       	mov	r0, r21
    3bdc:	97 fb       	bst	r25, 7
    3bde:	16 f4       	brtc	.+4      	; 0x3be4 <__divmodsi4+0xa>
    3be0:	00 94       	com	r0
    3be2:	0f d0       	rcall	.+30     	; 0x3c02 <__negsi2>
    3be4:	57 fd       	sbrc	r21, 7
    3be6:	05 d0       	rcall	.+10     	; 0x3bf2 <__divmodsi4_neg2>
    3be8:	1a d0       	rcall	.+52     	; 0x3c1e <__udivmodsi4>
    3bea:	07 fc       	sbrc	r0, 7
    3bec:	02 d0       	rcall	.+4      	; 0x3bf2 <__divmodsi4_neg2>
    3bee:	46 f4       	brtc	.+16     	; 0x3c00 <__divmodsi4_exit>
    3bf0:	08 c0       	rjmp	.+16     	; 0x3c02 <__negsi2>

00003bf2 <__divmodsi4_neg2>:
    3bf2:	50 95       	com	r21
    3bf4:	40 95       	com	r20
    3bf6:	30 95       	com	r19
    3bf8:	21 95       	neg	r18
    3bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfc:	4f 4f       	sbci	r20, 0xFF	; 255
    3bfe:	5f 4f       	sbci	r21, 0xFF	; 255

00003c00 <__divmodsi4_exit>:
    3c00:	08 95       	ret

00003c02 <__negsi2>:
    3c02:	90 95       	com	r25
    3c04:	80 95       	com	r24
    3c06:	70 95       	com	r23
    3c08:	61 95       	neg	r22
    3c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c10:	08 95       	ret

00003c12 <__tablejump2__>:
    3c12:	ee 0f       	add	r30, r30
    3c14:	ff 1f       	adc	r31, r31
    3c16:	05 90       	lpm	r0, Z+
    3c18:	f4 91       	lpm	r31, Z
    3c1a:	e0 2d       	mov	r30, r0
    3c1c:	09 94       	ijmp

00003c1e <__udivmodsi4>:
    3c1e:	a1 e2       	ldi	r26, 0x21	; 33
    3c20:	1a 2e       	mov	r1, r26
    3c22:	aa 1b       	sub	r26, r26
    3c24:	bb 1b       	sub	r27, r27
    3c26:	fd 01       	movw	r30, r26
    3c28:	0d c0       	rjmp	.+26     	; 0x3c44 <__udivmodsi4_ep>

00003c2a <__udivmodsi4_loop>:
    3c2a:	aa 1f       	adc	r26, r26
    3c2c:	bb 1f       	adc	r27, r27
    3c2e:	ee 1f       	adc	r30, r30
    3c30:	ff 1f       	adc	r31, r31
    3c32:	a2 17       	cp	r26, r18
    3c34:	b3 07       	cpc	r27, r19
    3c36:	e4 07       	cpc	r30, r20
    3c38:	f5 07       	cpc	r31, r21
    3c3a:	20 f0       	brcs	.+8      	; 0x3c44 <__udivmodsi4_ep>
    3c3c:	a2 1b       	sub	r26, r18
    3c3e:	b3 0b       	sbc	r27, r19
    3c40:	e4 0b       	sbc	r30, r20
    3c42:	f5 0b       	sbc	r31, r21

00003c44 <__udivmodsi4_ep>:
    3c44:	66 1f       	adc	r22, r22
    3c46:	77 1f       	adc	r23, r23
    3c48:	88 1f       	adc	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	1a 94       	dec	r1
    3c4e:	69 f7       	brne	.-38     	; 0x3c2a <__udivmodsi4_loop>
    3c50:	60 95       	com	r22
    3c52:	70 95       	com	r23
    3c54:	80 95       	com	r24
    3c56:	90 95       	com	r25
    3c58:	9b 01       	movw	r18, r22
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	bd 01       	movw	r22, r26
    3c5e:	cf 01       	movw	r24, r30
    3c60:	08 95       	ret

00003c62 <_exit>:
    3c62:	f8 94       	cli

00003c64 <__stop_program>:
    3c64:	ff cf       	rjmp	.-2      	; 0x3c64 <__stop_program>
