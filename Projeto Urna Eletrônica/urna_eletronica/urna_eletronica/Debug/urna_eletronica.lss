
urna_eletronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800200  00800200  00000b48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000188b  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001004  00000000  00000000  00002563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f13  00000000  00000000  00003567  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000447c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a3  00000000  00000000  0000470c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f9  00000000  00000000  00004eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c4       	rjmp	.+2418   	; 0x9c4 <__vector_20>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 30       	cpi	r26, 0x03	; 3
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	e7 d1       	rcall	.+974    	; 0x4d4 <main>
 106:	e4 c4       	rjmp	.+2504   	; 0xad0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <functionSet>:
#include "lcd.h"
#include "timeControl.h"

// Conjunto de funções utilizadas para o Display LCD 16x2

void functionSet(void) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
	LOW(D7);
 10e:	c2 e0       	ldi	r28, 0x02	; 2
 110:	d1 e0       	ldi	r29, 0x01	; 1
 112:	88 81       	ld	r24, Y
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	88 83       	st	Y, r24
	LOW(D6);
 118:	88 81       	ld	r24, Y
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	88 83       	st	Y, r24
	HIGH(D5);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	80 61       	ori	r24, 0x10	; 16
 122:	85 b9       	out	0x05, r24	; 5
	LOW(D4);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	85 b9       	out	0x05, r24	; 5
	LOW(RS);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 77       	andi	r24, 0x7F	; 127
 12e:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	80 64       	ori	r24, 0x40	; 64
 134:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	85 b9       	out	0x05, r24	; 5
	delay_microsegundos(40);
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	b6 d3       	rcall	.+1900   	; 0x8ae <delay_microsegundos>
	HIGH(E);
 142:	85 b1       	in	r24, 0x05	; 5
 144:	80 64       	ori	r24, 0x40	; 64
 146:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	85 b9       	out	0x05, r24	; 5
	HIGH(D7);
 14e:	88 81       	ld	r24, Y
 150:	80 62       	ori	r24, 0x20	; 32
 152:	88 83       	st	Y, r24
	HIGH(E);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	80 64       	ori	r24, 0x40	; 64
 158:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	85 b9       	out	0x05, r24	; 5
	delay_microsegundos(40);
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a4 d3       	rcall	.+1864   	; 0x8ae <delay_microsegundos>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <entryModeSet>:
void entryModeSet(char id, char s) {
	LOW(RS);
 16c:	95 b1       	in	r25, 0x05	; 5
 16e:	9f 77       	andi	r25, 0x7F	; 127
 170:	95 b9       	out	0x05, r25	; 5
	LOW(D7);
 172:	e2 e0       	ldi	r30, 0x02	; 2
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	90 81       	ld	r25, Z
 178:	9f 7d       	andi	r25, 0xDF	; 223
 17a:	90 83       	st	Z, r25
	LOW(D6);
 17c:	90 81       	ld	r25, Z
 17e:	9f 7b       	andi	r25, 0xBF	; 191
 180:	90 83       	st	Z, r25
	LOW(D5);
 182:	95 b1       	in	r25, 0x05	; 5
 184:	9f 7e       	andi	r25, 0xEF	; 239
 186:	95 b9       	out	0x05, r25	; 5
	LOW(D4);
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	9f 7d       	andi	r25, 0xDF	; 223
 18c:	95 b9       	out	0x05, r25	; 5
	HIGH(E);
 18e:	95 b1       	in	r25, 0x05	; 5
 190:	90 64       	ori	r25, 0x40	; 64
 192:	95 b9       	out	0x05, r25	; 5
	LOW(E);
 194:	95 b1       	in	r25, 0x05	; 5
 196:	9f 7b       	andi	r25, 0xBF	; 191
 198:	95 b9       	out	0x05, r25	; 5
	HIGH(D6);
 19a:	90 81       	ld	r25, Z
 19c:	90 64       	ori	r25, 0x40	; 64
 19e:	90 83       	st	Z, r25
	if(id == 1){HIGH(D5);} else{LOW(D5);}
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	21 f4       	brne	.+8      	; 0x1ac <entryModeSet+0x40>
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <entryModeSet+0x46>
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	85 b9       	out	0x05, r24	; 5
	if(s == 1){HIGH(D4);} else{LOW(D4);}
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	21 f4       	brne	.+8      	; 0x1be <entryModeSet+0x52>
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	85 b9       	out	0x05, r24	; 5
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <entryModeSet+0x58>
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	85 b9       	out	0x05, r24	; 5
	delay_microsegundos(40);
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	6c c3       	rjmp	.+1752   	; 0x8ae <delay_microsegundos>
 1d6:	08 95       	ret

000001d8 <displayOnOffControl>:
}
void displayOnOffControl(char display, char cursor, char blinking) {
	LOW(D7);
 1d8:	e2 e0       	ldi	r30, 0x02	; 2
 1da:	f1 e0       	ldi	r31, 0x01	; 1
 1dc:	90 81       	ld	r25, Z
 1de:	9f 7d       	andi	r25, 0xDF	; 223
 1e0:	90 83       	st	Z, r25
	LOW(D6);
 1e2:	90 81       	ld	r25, Z
 1e4:	9f 7b       	andi	r25, 0xBF	; 191
 1e6:	90 83       	st	Z, r25
	LOW(D5);
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	9f 7e       	andi	r25, 0xEF	; 239
 1ec:	95 b9       	out	0x05, r25	; 5
	LOW(D4);
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	9f 7d       	andi	r25, 0xDF	; 223
 1f2:	95 b9       	out	0x05, r25	; 5
	HIGH(E);
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	90 64       	ori	r25, 0x40	; 64
 1f8:	95 b9       	out	0x05, r25	; 5
	LOW(E);
 1fa:	95 b1       	in	r25, 0x05	; 5
 1fc:	9f 7b       	andi	r25, 0xBF	; 191
 1fe:	95 b9       	out	0x05, r25	; 5
	HIGH(D7);
 200:	90 81       	ld	r25, Z
 202:	90 62       	ori	r25, 0x20	; 32
 204:	90 83       	st	Z, r25
	if(display == 1){HIGH(D6);} else{LOW(D6);}
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	21 f4       	brne	.+8      	; 0x212 <displayOnOffControl+0x3a>
 20a:	80 81       	ld	r24, Z
 20c:	80 64       	ori	r24, 0x40	; 64
 20e:	80 83       	st	Z, r24
 210:	05 c0       	rjmp	.+10     	; 0x21c <displayOnOffControl+0x44>
 212:	e2 e0       	ldi	r30, 0x02	; 2
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	8f 7b       	andi	r24, 0xBF	; 191
 21a:	80 83       	st	Z, r24
	if(cursor == 1){HIGH(D5);} else{LOW(D5);}
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	21 f4       	brne	.+8      	; 0x228 <displayOnOffControl+0x50>
 220:	85 b1       	in	r24, 0x05	; 5
 222:	80 61       	ori	r24, 0x10	; 16
 224:	85 b9       	out	0x05, r24	; 5
 226:	03 c0       	rjmp	.+6      	; 0x22e <displayOnOffControl+0x56>
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	8f 7e       	andi	r24, 0xEF	; 239
 22c:	85 b9       	out	0x05, r24	; 5
	if(blinking == 1){HIGH(D4);} else{LOW(D4);}
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	21 f4       	brne	.+8      	; 0x23a <displayOnOffControl+0x62>
 232:	85 b1       	in	r24, 0x05	; 5
 234:	80 62       	ori	r24, 0x20	; 32
 236:	85 b9       	out	0x05, r24	; 5
 238:	03 c0       	rjmp	.+6      	; 0x240 <displayOnOffControl+0x68>
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	8f 7d       	andi	r24, 0xDF	; 223
 23e:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 240:	85 b1       	in	r24, 0x05	; 5
 242:	80 64       	ori	r24, 0x40	; 64
 244:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8f 7b       	andi	r24, 0xBF	; 191
 24a:	85 b9       	out	0x05, r24	; 5
	delay_microsegundos(40);
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2e c3       	rjmp	.+1628   	; 0x8ae <delay_microsegundos>
 252:	08 95       	ret

00000254 <getBit>:
}
char getBit(char c, char bitNumber) {
	return (c >> bitNumber) & 1;
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <getBit+0x8>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <getBit+0x4>
}
 260:	81 70       	andi	r24, 0x01	; 1
 262:	08 95       	ret

00000264 <sendChar>:
void sendChar(char c) {
 264:	cf 93       	push	r28
 266:	c8 2f       	mov	r28, r24
	if(getBit(c, 7) == 1){HIGH(D7);} else{LOW(D7);}
 268:	67 e0       	ldi	r22, 0x07	; 7
 26a:	f4 df       	rcall	.-24     	; 0x254 <getBit>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	31 f4       	brne	.+12     	; 0x27c <sendChar+0x18>
 270:	e2 e0       	ldi	r30, 0x02	; 2
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	80 81       	ld	r24, Z
 276:	80 62       	ori	r24, 0x20	; 32
 278:	80 83       	st	Z, r24
 27a:	05 c0       	rjmp	.+10     	; 0x286 <sendChar+0x22>
 27c:	e2 e0       	ldi	r30, 0x02	; 2
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	80 81       	ld	r24, Z
 282:	8f 7d       	andi	r24, 0xDF	; 223
 284:	80 83       	st	Z, r24
	if(getBit(c, 6) == 1){HIGH(D6);} else{LOW(D6);}
 286:	66 e0       	ldi	r22, 0x06	; 6
 288:	8c 2f       	mov	r24, r28
 28a:	e4 df       	rcall	.-56     	; 0x254 <getBit>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	31 f4       	brne	.+12     	; 0x29c <sendChar+0x38>
 290:	e2 e0       	ldi	r30, 0x02	; 2
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	80 81       	ld	r24, Z
 296:	80 64       	ori	r24, 0x40	; 64
 298:	80 83       	st	Z, r24
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <sendChar+0x42>
 29c:	e2 e0       	ldi	r30, 0x02	; 2
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 7b       	andi	r24, 0xBF	; 191
 2a4:	80 83       	st	Z, r24
	if(getBit(c, 5) == 1){HIGH(D5);} else{LOW(D5);}
 2a6:	65 e0       	ldi	r22, 0x05	; 5
 2a8:	8c 2f       	mov	r24, r28
 2aa:	d4 df       	rcall	.-88     	; 0x254 <getBit>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <sendChar+0x54>
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	80 61       	ori	r24, 0x10	; 16
 2b4:	85 b9       	out	0x05, r24	; 5
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <sendChar+0x5a>
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8f 7e       	andi	r24, 0xEF	; 239
	if(getBit(c, 4) == 1){HIGH(D4);} else{LOW(D4);}
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	8c 2f       	mov	r24, r28
 2c2:	c8 df       	rcall	.-112    	; 0x254 <getBit>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <sendChar+0x6c>
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <sendChar+0x72>
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	8f 7d       	andi	r24, 0xDF	; 223
 2d4:	85 b9       	out	0x05, r24	; 5
	HIGH(RS);
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	8f 7b       	andi	r24, 0xBF	; 191
	if(getBit(c, 3) == 1){HIGH(D7);} else{LOW(D7);}
 2e6:	85 b9       	out	0x05, r24	; 5
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	8c 2f       	mov	r24, r28
 2ec:	b3 df       	rcall	.-154    	; 0x254 <getBit>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	31 f4       	brne	.+12     	; 0x2fe <sendChar+0x9a>
 2f2:	e2 e0       	ldi	r30, 0x02	; 2
 2f4:	f1 e0       	ldi	r31, 0x01	; 1
 2f6:	80 81       	ld	r24, Z
 2f8:	80 62       	ori	r24, 0x20	; 32
 2fa:	80 83       	st	Z, r24
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <sendChar+0xa4>
 2fe:	e2 e0       	ldi	r30, 0x02	; 2
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	80 81       	ld	r24, Z
 304:	8f 7d       	andi	r24, 0xDF	; 223
	if(getBit(c, 2) == 1){HIGH(D6);} else{LOW(D6);}
 306:	80 83       	st	Z, r24
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	8c 2f       	mov	r24, r28
 30c:	a3 df       	rcall	.-186    	; 0x254 <getBit>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	31 f4       	brne	.+12     	; 0x31e <sendChar+0xba>
 312:	e2 e0       	ldi	r30, 0x02	; 2
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
 31c:	05 c0       	rjmp	.+10     	; 0x328 <sendChar+0xc4>
 31e:	e2 e0       	ldi	r30, 0x02	; 2
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	80 81       	ld	r24, Z
 324:	8f 7b       	andi	r24, 0xBF	; 191
	if(getBit(c, 1) == 1){HIGH(D5);} else{LOW(D5);}
 326:	80 83       	st	Z, r24
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	8c 2f       	mov	r24, r28
 32c:	93 df       	rcall	.-218    	; 0x254 <getBit>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	21 f4       	brne	.+8      	; 0x33a <sendChar+0xd6>
 332:	85 b1       	in	r24, 0x05	; 5
 334:	80 61       	ori	r24, 0x10	; 16
 336:	85 b9       	out	0x05, r24	; 5
 338:	03 c0       	rjmp	.+6      	; 0x340 <sendChar+0xdc>
 33a:	85 b1       	in	r24, 0x05	; 5
 33c:	8f 7e       	andi	r24, 0xEF	; 239
	if(getBit(c, 0) == 1){HIGH(D4);} else{LOW(D4);}
 33e:	85 b9       	out	0x05, r24	; 5
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	8c 2f       	mov	r24, r28
 344:	87 df       	rcall	.-242    	; 0x254 <getBit>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	21 f4       	brne	.+8      	; 0x352 <sendChar+0xee>
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	80 62       	ori	r24, 0x20	; 32
 34e:	85 b9       	out	0x05, r24	; 5
 350:	03 c0       	rjmp	.+6      	; 0x358 <sendChar+0xf4>
 352:	85 b1       	in	r24, 0x05	; 5
 354:	8f 7d       	andi	r24, 0xDF	; 223
 356:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	80 64       	ori	r24, 0x40	; 64
	LOW(E);
 35c:	85 b9       	out	0x05, r24	; 5
 35e:	85 b1       	in	r24, 0x05	; 5
 360:	8f 7b       	andi	r24, 0xBF	; 191
	delay_microsegundos(40);
 362:	85 b9       	out	0x05, r24	; 5
 364:	88 e2       	ldi	r24, 0x28	; 40
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	a2 d2       	rcall	.+1348   	; 0x8ae <delay_microsegundos>
}
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <setDdRamAddress>:

void setDdRamAddress(char address) {
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
	LOW(RS);
 372:	85 b1       	in	r24, 0x05	; 5
 374:	8f 77       	andi	r24, 0x7F	; 127
 376:	85 b9       	out	0x05, r24	; 5
	HIGH(D7);
 378:	e2 e0       	ldi	r30, 0x02	; 2
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	80 81       	ld	r24, Z
 37e:	80 62       	ori	r24, 0x20	; 32
 380:	80 83       	st	Z, r24
	if(getBit(address, 6) == 1){HIGH(D6);} else{LOW(D6);}
 382:	66 e0       	ldi	r22, 0x06	; 6
 384:	8c 2f       	mov	r24, r28
 386:	66 df       	rcall	.-308    	; 0x254 <getBit>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	31 f4       	brne	.+12     	; 0x398 <setDdRamAddress+0x2a>
 38c:	e2 e0       	ldi	r30, 0x02	; 2
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	80 81       	ld	r24, Z
 392:	80 64       	ori	r24, 0x40	; 64
 394:	80 83       	st	Z, r24
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <setDdRamAddress+0x34>
 398:	e2 e0       	ldi	r30, 0x02	; 2
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	80 81       	ld	r24, Z
 39e:	8f 7b       	andi	r24, 0xBF	; 191
 3a0:	80 83       	st	Z, r24
	if(getBit(address, 5) == 1){HIGH(D5);} else{LOW(D5);}
 3a2:	65 e0       	ldi	r22, 0x05	; 5
 3a4:	8c 2f       	mov	r24, r28
 3a6:	56 df       	rcall	.-340    	; 0x254 <getBit>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <setDdRamAddress+0x46>
 3ac:	85 b1       	in	r24, 0x05	; 5
 3ae:	80 61       	ori	r24, 0x10	; 16
 3b0:	85 b9       	out	0x05, r24	; 5
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <setDdRamAddress+0x4c>
 3b4:	85 b1       	in	r24, 0x05	; 5
 3b6:	8f 7e       	andi	r24, 0xEF	; 239
 3b8:	85 b9       	out	0x05, r24	; 5
	if(getBit(address, 4) == 1){HIGH(D4);} else{LOW(D4);}
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	8c 2f       	mov	r24, r28
 3be:	4a df       	rcall	.-364    	; 0x254 <getBit>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	21 f4       	brne	.+8      	; 0x3cc <setDdRamAddress+0x5e>
 3c4:	85 b1       	in	r24, 0x05	; 5
 3c6:	80 62       	ori	r24, 0x20	; 32
 3c8:	85 b9       	out	0x05, r24	; 5
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <setDdRamAddress+0x64>
 3cc:	85 b1       	in	r24, 0x05	; 5
 3ce:	8f 7d       	andi	r24, 0xDF	; 223
 3d0:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 3d2:	85 b1       	in	r24, 0x05	; 5
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	85 b9       	out	0x05, r24	; 5
	LOW(E);
 3d8:	85 b1       	in	r24, 0x05	; 5
 3da:	8f 7b       	andi	r24, 0xBF	; 191
	if(getBit(address, 3) == 1){HIGH(D7);} else{LOW(D7);}
 3dc:	85 b9       	out	0x05, r24	; 5
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	8c 2f       	mov	r24, r28
 3e2:	38 df       	rcall	.-400    	; 0x254 <getBit>
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <setDdRamAddress+0x86>
 3e8:	e2 e0       	ldi	r30, 0x02	; 2
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	80 81       	ld	r24, Z
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	80 83       	st	Z, r24
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <setDdRamAddress+0x90>
 3f4:	e2 e0       	ldi	r30, 0x02	; 2
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	80 81       	ld	r24, Z
 3fa:	8f 7d       	andi	r24, 0xDF	; 223
	if(getBit(address, 2) == 1){HIGH(D6);} else{LOW(D6);}
 3fc:	80 83       	st	Z, r24
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	8c 2f       	mov	r24, r28
 402:	28 df       	rcall	.-432    	; 0x254 <getBit>
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	31 f4       	brne	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 408:	e2 e0       	ldi	r30, 0x02	; 2
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	80 81       	ld	r24, Z
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	80 83       	st	Z, r24
 412:	05 c0       	rjmp	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	e2 e0       	ldi	r30, 0x02	; 2
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	80 81       	ld	r24, Z
 41a:	8f 7b       	andi	r24, 0xBF	; 191
	if(getBit(address, 1) == 1){HIGH(D5);} else{LOW(D5);}
 41c:	80 83       	st	Z, r24
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	8c 2f       	mov	r24, r28
 422:	18 df       	rcall	.-464    	; 0x254 <getBit>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	21 f4       	brne	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 428:	85 b1       	in	r24, 0x05	; 5
 42a:	80 61       	ori	r24, 0x10	; 16
 42c:	85 b9       	out	0x05, r24	; 5
 42e:	03 c0       	rjmp	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 430:	85 b1       	in	r24, 0x05	; 5
 432:	8f 7e       	andi	r24, 0xEF	; 239
	if(getBit(address, 0) == 1){HIGH(D4);} else{LOW(D4);}
 434:	85 b9       	out	0x05, r24	; 5
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	8c 2f       	mov	r24, r28
 43a:	0c df       	rcall	.-488    	; 0x254 <getBit>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	21 f4       	brne	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 440:	85 b1       	in	r24, 0x05	; 5
 442:	80 62       	ori	r24, 0x20	; 32
 444:	85 b9       	out	0x05, r24	; 5
 446:	03 c0       	rjmp	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 448:	85 b1       	in	r24, 0x05	; 5
 44a:	8f 7d       	andi	r24, 0xDF	; 223
 44c:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	80 64       	ori	r24, 0x40	; 64
	LOW(E);
 452:	85 b9       	out	0x05, r24	; 5
 454:	85 b1       	in	r24, 0x05	; 5
 456:	8f 7b       	andi	r24, 0xBF	; 191
	delay_microsegundos(40);
 458:	85 b9       	out	0x05, r24	; 5
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	27 d2       	rcall	.+1102   	; 0x8ae <delay_microsegundos>
}
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <sendString_setAdress>:

void sendString_setAdress(char* str, char linha, char coluna) {
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	8c 01       	movw	r16, r24
	int index = 0;
	char endereco = 0;
	
	if(linha == 2){
 46e:	62 30       	cpi	r22, 0x02	; 2
 470:	11 f0       	breq	.+4      	; 0x476 <sendString_setAdress+0x12>
	delay_microsegundos(40);
}

void sendString_setAdress(char* str, char linha, char coluna) {
	int index = 0;
	char endereco = 0;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	01 c0       	rjmp	.+2      	; 0x478 <sendString_setAdress+0x14>
	
	if(linha == 2){
		endereco += 64;
 476:	80 e4       	ldi	r24, 0x40	; 64
	}
	endereco += coluna - 1;
 478:	48 0f       	add	r20, r24
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	84 0f       	add	r24, r20
	if((endereco >= 0 && endereco <= 0x0F) || (endereco >= 0x40 && endereco <= 0x4F)){
 47e:	80 31       	cpi	r24, 0x10	; 16
 480:	18 f0       	brcs	.+6      	; 0x488 <sendString_setAdress+0x24>
 482:	41 54       	subi	r20, 0x41	; 65
 484:	40 31       	cpi	r20, 0x10	; 16
 486:	08 f4       	brcc	.+2      	; 0x48a <sendString_setAdress+0x26>
		setDdRamAddress(endereco);
 488:	72 df       	rcall	.-284    	; 0x36e <setDdRamAddress>
void sendString_setAdress(char* str, char linha, char coluna) {
	int index = 0;
	char endereco = 0;
	
	if(linha == 2){
		endereco += 64;
 48a:	c0 e0       	ldi	r28, 0x00	; 0
 48c:	d0 e0       	ldi	r29, 0x00	; 0
	endereco += coluna - 1;
	if((endereco >= 0 && endereco <= 0x0F) || (endereco >= 0x40 && endereco <= 0x4F)){
		setDdRamAddress(endereco);
	}
	while (str[index] != 0) {
		sendChar(str[index]);
 48e:	02 c0       	rjmp	.+4      	; 0x494 <sendString_setAdress+0x30>
 490:	e9 de       	rcall	.-558    	; 0x264 <sendChar>
		index++;
 492:	21 96       	adiw	r28, 0x01	; 1
	}
	endereco += coluna - 1;
	if((endereco >= 0 && endereco <= 0x0F) || (endereco >= 0x40 && endereco <= 0x4F)){
		setDdRamAddress(endereco);
	}
	while (str[index] != 0) {
 494:	f8 01       	movw	r30, r16
 496:	ec 0f       	add	r30, r28
 498:	fd 1f       	adc	r31, r29
 49a:	80 81       	ld	r24, Z
 49c:	81 11       	cpse	r24, r1
 49e:	f8 cf       	rjmp	.-16     	; 0x490 <sendString_setAdress+0x2c>
		sendChar(str[index]);
		index++;
	}
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	08 95       	ret

000004aa <sendString>:

void sendString(char* str) {
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	8c 01       	movw	r16, r24
	int index = 0;
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[index] != 0) {
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <sendString+0x14>
		sendChar(str[index]);
 4ba:	d4 de       	rcall	.-600    	; 0x264 <sendChar>
		index++;
 4bc:	21 96       	adiw	r28, 0x01	; 1
	}
}

void sendString(char* str) {
	int index = 0;
	while (str[index] != 0) {
 4be:	f8 01       	movw	r30, r16
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	80 81       	ld	r24, Z
 4c6:	81 11       	cpse	r24, r1
 4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <sendString+0x10>
		sendChar(str[index]);
		index++;
	}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <main>:
#include "lcd.h"

#include <avr/io.h>

int main(void)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	c9 56       	subi	r28, 0x69	; 105
 4de:	d1 09       	sbc	r29, r1
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61

		// Display como output
		// Linhas como outputs e colunas como inputs
		OUTPUT(D4);
 4ea:	84 b1       	in	r24, 0x04	; 4
 4ec:	80 62       	ori	r24, 0x20	; 32
 4ee:	84 b9       	out	0x04, r24	; 4
		OUTPUT(D5);
 4f0:	84 b1       	in	r24, 0x04	; 4
 4f2:	80 61       	ori	r24, 0x10	; 16
 4f4:	84 b9       	out	0x04, r24	; 4
		OUTPUT(D6);
 4f6:	e1 e0       	ldi	r30, 0x01	; 1
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	80 81       	ld	r24, Z
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	80 83       	st	Z, r24
		OUTPUT(D7);
 500:	80 81       	ld	r24, Z
 502:	80 62       	ori	r24, 0x20	; 32
 504:	80 83       	st	Z, r24
		OUTPUT(E);
 506:	84 b1       	in	r24, 0x04	; 4
 508:	80 64       	ori	r24, 0x40	; 64
 50a:	84 b9       	out	0x04, r24	; 4
		OUTPUT(RS);
 50c:	84 b1       	in	r24, 0x04	; 4
 50e:	80 68       	ori	r24, 0x80	; 128
 510:	84 b9       	out	0x04, r24	; 4
		
		OUTPUT(LINHA1);
 512:	80 b3       	in	r24, 0x10	; 16
 514:	81 60       	ori	r24, 0x01	; 1
 516:	80 bb       	out	0x10, r24	; 16
		OUTPUT(LINHA2);
 518:	80 b3       	in	r24, 0x10	; 16
 51a:	82 60       	ori	r24, 0x02	; 2
 51c:	80 bb       	out	0x10, r24	; 16
		OUTPUT(LINHA3);
 51e:	80 b3       	in	r24, 0x10	; 16
 520:	84 60       	ori	r24, 0x04	; 4
 522:	80 bb       	out	0x10, r24	; 16
		OUTPUT(LINHA4);
 524:	80 b3       	in	r24, 0x10	; 16
 526:	88 60       	ori	r24, 0x08	; 8
 528:	80 bb       	out	0x10, r24	; 16
		INPUT(COLUNA1);
 52a:	80 b3       	in	r24, 0x10	; 16
 52c:	8f 7e       	andi	r24, 0xEF	; 239
 52e:	80 bb       	out	0x10, r24	; 16
		INPUT(COLUNA2);
 530:	80 b3       	in	r24, 0x10	; 16
 532:	8f 7d       	andi	r24, 0xDF	; 223
 534:	80 bb       	out	0x10, r24	; 16
		INPUT(COLUNA3);
 536:	80 b3       	in	r24, 0x10	; 16
 538:	8f 7b       	andi	r24, 0xBF	; 191
 53a:	80 bb       	out	0x10, r24	; 16
		INPUT(COLUNA4);
 53c:	80 b3       	in	r24, 0x10	; 16
 53e:	8f 77       	andi	r24, 0x7F	; 127
 540:	80 bb       	out	0x10, r24	; 16
		
		
		// Garante que todas as linhas comecem em nível lógico alto
		HIGH(LINHA1);
 542:	81 b3       	in	r24, 0x11	; 17
 544:	81 60       	ori	r24, 0x01	; 1
 546:	81 bb       	out	0x11, r24	; 17
		HIGH(LINHA2);
 548:	81 b3       	in	r24, 0x11	; 17
 54a:	82 60       	ori	r24, 0x02	; 2
 54c:	81 bb       	out	0x11, r24	; 17
		HIGH(LINHA3);
 54e:	81 b3       	in	r24, 0x11	; 17
 550:	84 60       	ori	r24, 0x04	; 4
 552:	81 bb       	out	0x11, r24	; 17
		HIGH(LINHA4);
 554:	81 b3       	in	r24, 0x11	; 17
 556:	88 60       	ori	r24, 0x08	; 8
 558:	81 bb       	out	0x11, r24	; 17

	functionSet();
 55a:	d7 dd       	rcall	.-1106   	; 0x10a <functionSet>
	entryModeSet(1, 0);
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	05 de       	rcall	.-1014   	; 0x16c <entryModeSet>
	displayOnOffControl(1, 1, 1);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	81 e0       	ldi	r24, 0x01	; 1

	timeControlConfig();
 568:	37 de       	rcall	.-914    	; 0x1d8 <displayOnOffControl>
 56a:	f9 d1       	rcall	.+1010   	; 0x95e <timeControlConfig>
	initSerialConfig();
 56c:	1a d1       	rcall	.+564    	; 0x7a2 <initSerialConfig>
 56e:	fe 01       	movw	r30, r28
	char voto_presidente[5] = {0};
 570:	31 96       	adiw	r30, 0x01	; 1
 572:	85 e0       	ldi	r24, 0x05	; 5
 574:	df 01       	movw	r26, r30
 576:	1d 92       	st	X+, r1
 578:	8a 95       	dec	r24
 57a:	e9 f7       	brne	.-6      	; 0x576 <main+0xa2>
 57c:	35 96       	adiw	r30, 0x05	; 5
	char resposta[100] = {0};
 57e:	84 e6       	ldi	r24, 0x64	; 100
 580:	df 01       	movw	r26, r30
 582:	1d 92       	st	X+, r1
 584:	8a 95       	dec	r24
 586:	e9 f7       	brne	.-6      	; 0x582 <main+0xae>
 588:	85 e5       	ldi	r24, 0x55	; 85
    /* Replace with your application code */
    while (1){
	    voto_presidente[0] = 'U';
 58a:	89 83       	std	Y+1, r24	; 0x01
 58c:	80 e5       	ldi	r24, 0x50	; 80
		voto_presidente[1] = 'P';
 58e:	8a 83       	std	Y+2, r24	; 0x02
		voto_presidente[2] = '\0';
 590:	1b 82       	std	Y+3, r1	; 0x03
		sendString(voto_presidente);
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
		voto_presidente[2] = 2;
 596:	89 df       	rcall	.-238    	; 0x4aa <sendString>
		voto_presidente[3] = get_tecla();
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	8b 83       	std	Y+3, r24	; 0x03
		sendChar(voto_presidente[3]);
 59c:	8a d0       	rcall	.+276    	; 0x6b2 <get_tecla>
 59e:	8c 83       	std	Y+4, r24	; 0x04
		voto_presidente[4] = get_tecla();
 5a0:	61 de       	rcall	.-830    	; 0x264 <sendChar>
 5a2:	87 d0       	rcall	.+270    	; 0x6b2 <get_tecla>
		sendChar(voto_presidente[4]);
 5a4:	8d 83       	std	Y+5, r24	; 0x05
 5a6:	5e de       	rcall	.-836    	; 0x264 <sendChar>

		do{
			sendSerialMessage(voto_presidente);
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	65 d1       	rcall	.+714    	; 0x878 <sendSerialMessage>
 5ae:	ce 01       	movw	r24, r28
			getSerialMessage(resposta);
 5b0:	06 96       	adiw	r24, 0x06	; 6
 5b2:	0f d1       	rcall	.+542    	; 0x7d2 <getSerialMessage>
 5b4:	8e 81       	ldd	r24, Y+6	; 0x06
		}while(resposta[0] == 'M' && resposta[1] == 'P');
 5b6:	8d 34       	cpi	r24, 0x4D	; 77
 5b8:	19 f4       	brne	.+6      	; 0x5c0 <main+0xec>
 5ba:	8f 81       	ldd	r24, Y+7	; 0x07
 5bc:	80 35       	cpi	r24, 0x50	; 80
 5be:	a1 f3       	breq	.-24     	; 0x5a8 <main+0xd4>
 5c0:	41 e0       	ldi	r20, 0x01	; 1
		
		sendString_setAdress(&resposta[3], 2, 1);
 5c2:	62 e0       	ldi	r22, 0x02	; 2
 5c4:	ce 01       	movw	r24, r28
 5c6:	09 96       	adiw	r24, 0x09	; 9
 5c8:	4d df       	rcall	.-358    	; 0x464 <sendString_setAdress>
 5ca:	de cf       	rjmp	.-68     	; 0x588 <main+0xb4>

000005cc <debounce>:
	}
	return '\0';
}

// Realiza o debounce das teclas
unsigned char debounce(char linha, char coluna){
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	c6 2f       	mov	r28, r22
	unsigned char current_key = 0, last_key = 0, counter = 0;
	char const BOUNCE = 7;
	
	// ativa a leitura da linha indicada
	switch (linha){
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	b1 f0       	breq	.+44     	; 0x604 <debounce+0x38>
 5d8:	18 f4       	brcc	.+6      	; 0x5e0 <debounce+0x14>
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	31 f0       	breq	.+12     	; 0x5ea <debounce+0x1e>
 5de:	38 c0       	rjmp	.+112    	; 0x650 <debounce+0x84>
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	e9 f0       	breq	.+58     	; 0x61e <debounce+0x52>
 5e4:	84 30       	cpi	r24, 0x04	; 4
 5e6:	41 f1       	breq	.+80     	; 0x638 <debounce+0x6c>
 5e8:	33 c0       	rjmp	.+102    	; 0x650 <debounce+0x84>
		case 1:
		LOW(LINHA1); HIGH(LINHA2); HIGH(LINHA3); HIGH(LINHA4);
 5ea:	81 b3       	in	r24, 0x11	; 17
 5ec:	8e 7f       	andi	r24, 0xFE	; 254
 5ee:	81 bb       	out	0x11, r24	; 17
 5f0:	81 b3       	in	r24, 0x11	; 17
 5f2:	82 60       	ori	r24, 0x02	; 2
 5f4:	81 bb       	out	0x11, r24	; 17
 5f6:	81 b3       	in	r24, 0x11	; 17
 5f8:	84 60       	ori	r24, 0x04	; 4
 5fa:	81 bb       	out	0x11, r24	; 17
 5fc:	81 b3       	in	r24, 0x11	; 17
 5fe:	88 60       	ori	r24, 0x08	; 8
 600:	81 bb       	out	0x11, r24	; 17
		break;
 602:	26 c0       	rjmp	.+76     	; 0x650 <debounce+0x84>
		case 2:
		HIGH(LINHA1); LOW(LINHA2); HIGH(LINHA3); HIGH(LINHA4);
 604:	81 b3       	in	r24, 0x11	; 17
 606:	81 60       	ori	r24, 0x01	; 1
 608:	81 bb       	out	0x11, r24	; 17
 60a:	81 b3       	in	r24, 0x11	; 17
 60c:	8d 7f       	andi	r24, 0xFD	; 253
 60e:	81 bb       	out	0x11, r24	; 17
 610:	81 b3       	in	r24, 0x11	; 17
 612:	84 60       	ori	r24, 0x04	; 4
 614:	81 bb       	out	0x11, r24	; 17
 616:	81 b3       	in	r24, 0x11	; 17
 618:	88 60       	ori	r24, 0x08	; 8
 61a:	81 bb       	out	0x11, r24	; 17
		break;
 61c:	19 c0       	rjmp	.+50     	; 0x650 <debounce+0x84>
		case 3:
		HIGH(LINHA1); HIGH(LINHA2); LOW(LINHA3); HIGH(LINHA4);
 61e:	81 b3       	in	r24, 0x11	; 17
 620:	81 60       	ori	r24, 0x01	; 1
 622:	81 bb       	out	0x11, r24	; 17
 624:	81 b3       	in	r24, 0x11	; 17
 626:	82 60       	ori	r24, 0x02	; 2
 628:	81 bb       	out	0x11, r24	; 17
 62a:	81 b3       	in	r24, 0x11	; 17
 62c:	8b 7f       	andi	r24, 0xFB	; 251
 62e:	81 bb       	out	0x11, r24	; 17
 630:	81 b3       	in	r24, 0x11	; 17
 632:	88 60       	ori	r24, 0x08	; 8
 634:	81 bb       	out	0x11, r24	; 17
		break;
 636:	0c c0       	rjmp	.+24     	; 0x650 <debounce+0x84>
		case 4:
		HIGH(LINHA1); HIGH(LINHA2); HIGH(LINHA3); LOW(LINHA4);
 638:	81 b3       	in	r24, 0x11	; 17
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	81 bb       	out	0x11, r24	; 17
 63e:	81 b3       	in	r24, 0x11	; 17
 640:	82 60       	ori	r24, 0x02	; 2
 642:	81 bb       	out	0x11, r24	; 17
 644:	81 b3       	in	r24, 0x11	; 17
 646:	84 60       	ori	r24, 0x04	; 4
 648:	81 bb       	out	0x11, r24	; 17
 64a:	81 b3       	in	r24, 0x11	; 17
 64c:	87 7f       	andi	r24, 0xF7	; 247
 64e:	81 bb       	out	0x11, r24	; 17
 650:	d0 e0       	ldi	r29, 0x00	; 0
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	01 c0       	rjmp	.+2      	; 0x658 <debounce+0x8c>
 656:	18 2f       	mov	r17, r24
	}
	
	// Enquanto contador for diferente de BOUNCE, itera atÃ© estabilzar
	do{
		delay_microsegundos(1000);
 658:	88 ee       	ldi	r24, 0xE8	; 232
 65a:	93 e0       	ldi	r25, 0x03	; 3
 65c:	28 d1       	rcall	.+592    	; 0x8ae <delay_microsegundos>
		
		switch(coluna){
 65e:	c2 30       	cpi	r28, 0x02	; 2
 660:	69 f0       	breq	.+26     	; 0x67c <debounce+0xb0>
 662:	18 f4       	brcc	.+6      	; 0x66a <debounce+0x9e>
 664:	c1 30       	cpi	r28, 0x01	; 1
 666:	31 f0       	breq	.+12     	; 0x674 <debounce+0xa8>
 668:	18 c0       	rjmp	.+48     	; 0x69a <debounce+0xce>
 66a:	c3 30       	cpi	r28, 0x03	; 3
 66c:	61 f0       	breq	.+24     	; 0x686 <debounce+0xba>
 66e:	c4 30       	cpi	r28, 0x04	; 4
 670:	79 f0       	breq	.+30     	; 0x690 <debounce+0xc4>
 672:	13 c0       	rjmp	.+38     	; 0x69a <debounce+0xce>
			case 1:
			current_key = READ(COLUNA1);
 674:	8f b1       	in	r24, 0x0f	; 15
 676:	82 95       	swap	r24
 678:	81 70       	andi	r24, 0x01	; 1
			break;
 67a:	10 c0       	rjmp	.+32     	; 0x69c <debounce+0xd0>
			case 2:
			current_key = READ(COLUNA2);
 67c:	8f b1       	in	r24, 0x0f	; 15
 67e:	85 fb       	bst	r24, 5
 680:	88 27       	eor	r24, r24
 682:	80 f9       	bld	r24, 0
			break;
 684:	0b c0       	rjmp	.+22     	; 0x69c <debounce+0xd0>
			case 3:
			current_key = READ(COLUNA3);
 686:	8f b1       	in	r24, 0x0f	; 15
 688:	86 fb       	bst	r24, 6
 68a:	88 27       	eor	r24, r24
 68c:	80 f9       	bld	r24, 0
			break;
 68e:	06 c0       	rjmp	.+12     	; 0x69c <debounce+0xd0>
			case 4:
			current_key = READ(COLUNA4);
 690:	8f b1       	in	r24, 0x0f	; 15
 692:	88 1f       	adc	r24, r24
 694:	88 27       	eor	r24, r24
 696:	88 1f       	adc	r24, r24
 698:	01 c0       	rjmp	.+2      	; 0x69c <debounce+0xd0>
	
	// Enquanto contador for diferente de BOUNCE, itera atÃ© estabilzar
	do{
		delay_microsegundos(1000);
		
		switch(coluna){
 69a:	81 2f       	mov	r24, r17
			break;
			case 4:
			current_key = READ(COLUNA4);
		}
		
		if(last_key == current_key){
 69c:	18 13       	cpse	r17, r24
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <debounce+0xd8>
			counter++;
 6a0:	df 5f       	subi	r29, 0xFF	; 255
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <debounce+0xda>
			}else{
			counter = 0;
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		last_key = current_key;
	}while(counter < BOUNCE);
 6a6:	d7 30       	cpi	r29, 0x07	; 7
 6a8:	b0 f2       	brcs	.-84     	; 0x656 <debounce+0x8a>
	
	return current_key;
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	08 95       	ret

000006b2 <get_tecla>:
#include "matrix_keypad.h"
#include "timeControl.h"

char get_tecla(){
	while(1){
		if(!debounce(1, 1)){ return '1';}
 6b2:	61 e0       	ldi	r22, 0x01	; 1
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	8a df       	rcall	.-236    	; 0x5cc <debounce>
 6b8:	88 23       	and	r24, r24
 6ba:	09 f4       	brne	.+2      	; 0x6be <get_tecla+0xc>
 6bc:	54 c0       	rjmp	.+168    	; 0x766 <get_tecla+0xb4>
		if(!debounce(1, 2)){ return '2';}
 6be:	62 e0       	ldi	r22, 0x02	; 2
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	84 df       	rcall	.-248    	; 0x5cc <debounce>
 6c4:	88 23       	and	r24, r24
 6c6:	09 f4       	brne	.+2      	; 0x6ca <get_tecla+0x18>
 6c8:	50 c0       	rjmp	.+160    	; 0x76a <get_tecla+0xb8>
		if(!debounce(1, 3)){ return '3';}
 6ca:	63 e0       	ldi	r22, 0x03	; 3
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	7e df       	rcall	.-260    	; 0x5cc <debounce>
 6d0:	88 23       	and	r24, r24
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <get_tecla+0x24>
 6d4:	4c c0       	rjmp	.+152    	; 0x76e <get_tecla+0xbc>
		if(!debounce(1, 4)){ return 'A';}
 6d6:	64 e0       	ldi	r22, 0x04	; 4
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	78 df       	rcall	.-272    	; 0x5cc <debounce>
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <get_tecla+0x30>
 6e0:	48 c0       	rjmp	.+144    	; 0x772 <get_tecla+0xc0>
		if(!debounce(2, 1)){ return '4';}
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	72 df       	rcall	.-284    	; 0x5cc <debounce>
 6e8:	88 23       	and	r24, r24
 6ea:	09 f4       	brne	.+2      	; 0x6ee <get_tecla+0x3c>
 6ec:	44 c0       	rjmp	.+136    	; 0x776 <get_tecla+0xc4>
		if(!debounce(2, 2)){ return '5';}
 6ee:	62 e0       	ldi	r22, 0x02	; 2
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	6c df       	rcall	.-296    	; 0x5cc <debounce>
 6f4:	88 23       	and	r24, r24
 6f6:	09 f4       	brne	.+2      	; 0x6fa <get_tecla+0x48>
 6f8:	40 c0       	rjmp	.+128    	; 0x77a <get_tecla+0xc8>
		if(!debounce(2, 3)){ return '6';}
 6fa:	63 e0       	ldi	r22, 0x03	; 3
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	66 df       	rcall	.-308    	; 0x5cc <debounce>
 700:	88 23       	and	r24, r24
 702:	09 f4       	brne	.+2      	; 0x706 <get_tecla+0x54>
 704:	3c c0       	rjmp	.+120    	; 0x77e <get_tecla+0xcc>
		if(!debounce(2, 4)){ return 'B';}
 706:	64 e0       	ldi	r22, 0x04	; 4
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	60 df       	rcall	.-320    	; 0x5cc <debounce>
 70c:	88 23       	and	r24, r24
 70e:	09 f4       	brne	.+2      	; 0x712 <get_tecla+0x60>
 710:	38 c0       	rjmp	.+112    	; 0x782 <get_tecla+0xd0>
		if(!debounce(3, 1)){ return '7';}
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	83 e0       	ldi	r24, 0x03	; 3
 716:	5a df       	rcall	.-332    	; 0x5cc <debounce>
 718:	88 23       	and	r24, r24
 71a:	a9 f1       	breq	.+106    	; 0x786 <get_tecla+0xd4>
		if(!debounce(3, 2)){ return '8';}
 71c:	62 e0       	ldi	r22, 0x02	; 2
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	55 df       	rcall	.-342    	; 0x5cc <debounce>
 722:	88 23       	and	r24, r24
 724:	91 f1       	breq	.+100    	; 0x78a <get_tecla+0xd8>
		if(!debounce(3, 3)){ return '9';}
 726:	63 e0       	ldi	r22, 0x03	; 3
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	50 df       	rcall	.-352    	; 0x5cc <debounce>
 72c:	88 23       	and	r24, r24
 72e:	79 f1       	breq	.+94     	; 0x78e <get_tecla+0xdc>
		if(!debounce(3, 4)){ return 'C';}
 730:	64 e0       	ldi	r22, 0x04	; 4
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	4b df       	rcall	.-362    	; 0x5cc <debounce>
 736:	88 23       	and	r24, r24
 738:	61 f1       	breq	.+88     	; 0x792 <get_tecla+0xe0>
		if(!debounce(4, 1)){ return '*';}
 73a:	61 e0       	ldi	r22, 0x01	; 1
 73c:	84 e0       	ldi	r24, 0x04	; 4
 73e:	46 df       	rcall	.-372    	; 0x5cc <debounce>
 740:	88 23       	and	r24, r24
 742:	49 f1       	breq	.+82     	; 0x796 <get_tecla+0xe4>
		if(!debounce(4, 2)){ return '0';}
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	84 e0       	ldi	r24, 0x04	; 4
 748:	41 df       	rcall	.-382    	; 0x5cc <debounce>
 74a:	88 23       	and	r24, r24
 74c:	31 f1       	breq	.+76     	; 0x79a <get_tecla+0xe8>
 74e:	63 e0       	ldi	r22, 0x03	; 3
		if(!debounce(4, 3)){ return '#';}
 750:	84 e0       	ldi	r24, 0x04	; 4
 752:	3c df       	rcall	.-392    	; 0x5cc <debounce>
 754:	88 23       	and	r24, r24
 756:	19 f1       	breq	.+70     	; 0x79e <get_tecla+0xec>
 758:	64 e0       	ldi	r22, 0x04	; 4
 75a:	84 e0       	ldi	r24, 0x04	; 4
		if(!debounce(4, 4)){ return 'D';}
 75c:	37 df       	rcall	.-402    	; 0x5cc <debounce>
 75e:	81 11       	cpse	r24, r1
 760:	a8 cf       	rjmp	.-176    	; 0x6b2 <get_tecla>
 762:	84 e4       	ldi	r24, 0x44	; 68
 764:	08 95       	ret
 766:	81 e3       	ldi	r24, 0x31	; 49
 768:	08 95       	ret
 76a:	82 e3       	ldi	r24, 0x32	; 50
#include "matrix_keypad.h"
#include "timeControl.h"

char get_tecla(){
	while(1){
		if(!debounce(1, 1)){ return '1';}
 76c:	08 95       	ret
 76e:	83 e3       	ldi	r24, 0x33	; 51
		if(!debounce(1, 2)){ return '2';}
 770:	08 95       	ret
 772:	81 e4       	ldi	r24, 0x41	; 65
		if(!debounce(1, 3)){ return '3';}
 774:	08 95       	ret
 776:	84 e3       	ldi	r24, 0x34	; 52
		if(!debounce(1, 4)){ return 'A';}
 778:	08 95       	ret
 77a:	85 e3       	ldi	r24, 0x35	; 53
		if(!debounce(2, 1)){ return '4';}
 77c:	08 95       	ret
 77e:	86 e3       	ldi	r24, 0x36	; 54
		if(!debounce(2, 2)){ return '5';}
 780:	08 95       	ret
 782:	82 e4       	ldi	r24, 0x42	; 66
		if(!debounce(2, 3)){ return '6';}
 784:	08 95       	ret
 786:	87 e3       	ldi	r24, 0x37	; 55
		if(!debounce(2, 4)){ return 'B';}
 788:	08 95       	ret
 78a:	88 e3       	ldi	r24, 0x38	; 56
		if(!debounce(3, 1)){ return '7';}
 78c:	08 95       	ret
 78e:	89 e3       	ldi	r24, 0x39	; 57
		if(!debounce(3, 2)){ return '8';}
 790:	08 95       	ret
 792:	83 e4       	ldi	r24, 0x43	; 67
		if(!debounce(3, 3)){ return '9';}
 794:	08 95       	ret
 796:	8a e2       	ldi	r24, 0x2A	; 42
		if(!debounce(3, 4)){ return 'C';}
 798:	08 95       	ret
 79a:	80 e3       	ldi	r24, 0x30	; 48
		if(!debounce(4, 1)){ return '*';}
 79c:	08 95       	ret
 79e:	83 e2       	ldi	r24, 0x23	; 35
		if(!debounce(4, 2)){ return '0';}
 7a0:	08 95       	ret

000007a2 <initSerialConfig>:
#include <avr/io.h>
#include <string.h>

// habilita a transmissão serial e define a taxa de transmissão
void initSerialConfig(){
	UCSR0B = 16+8; // habilita transmissão e recepção serial
 7a2:	88 e1       	ldi	r24, 0x18	; 24
 7a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 51; // baud rate de 19200 bps
 7a8:	83 e3       	ldi	r24, 0x33	; 51
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 7b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 7b4:	08 95       	ret

000007b6 <getSerialChar>:
}

// aguarda a chegada de um caractere na comunicação serial e retorna-o
char getSerialChar(){
	while((UCSR0A & (1<<7)) == 0); // aguarda uma recepção serial
 7b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7ba:	88 23       	and	r24, r24
 7bc:	e4 f7       	brge	.-8      	; 0x7b6 <getSerialChar>
	return UDR0;
 7be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 7c2:	08 95       	ret

000007c4 <sendSerialChar>:

// envia um caractere via comunicação serial
void sendSerialChar(char character){
	UDR0 = character;
 7c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	while((UCSR0A & (1<<7)) == 0); // aguarda finalizar a transmissão serial para enviar próximo caractere
 7c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7cc:	88 23       	and	r24, r24
 7ce:	e4 f7       	brge	.-8      	; 0x7c8 <sendSerialChar+0x4>
}
 7d0:	08 95       	ret

000007d2 <getSerialMessage>:

// captura uma mensagem recebida via comunicação serial
void getSerialMessage(char* message){
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	ec 01       	movw	r28, r24
	message[0] = getSerialChar();
 7de:	eb df       	rcall	.-42     	; 0x7b6 <getSerialChar>
 7e0:	88 83       	st	Y, r24
	
	if(message[0] == 'M'){
 7e2:	8d 34       	cpi	r24, 0x4D	; 77
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <getSerialMessage+0x16>
		message[1] = getSerialChar();
 7e6:	41 c0       	rjmp	.+130    	; 0x86a <getSerialMessage+0x98>
 7e8:	e6 df       	rcall	.-52     	; 0x7b6 <getSerialChar>
 7ea:	89 83       	std	Y+1, r24	; 0x01
		if((message[1] == 'I' || message[1] == 'C' || message[1] == 'T' || message[1] == 'R')){
 7ec:	89 34       	cpi	r24, 0x49	; 73
 7ee:	31 f0       	breq	.+12     	; 0x7fc <getSerialMessage+0x2a>
 7f0:	83 34       	cpi	r24, 0x43	; 67
 7f2:	21 f0       	breq	.+8      	; 0x7fc <getSerialMessage+0x2a>
 7f4:	84 35       	cpi	r24, 0x54	; 84
 7f6:	11 f0       	breq	.+4      	; 0x7fc <getSerialMessage+0x2a>
 7f8:	82 35       	cpi	r24, 0x52	; 82
 7fa:	11 f4       	brne	.+4      	; 0x800 <getSerialMessage+0x2e>
			message[2] = '\0';
 7fc:	1a 82       	std	Y+2, r1	; 0x02
			return;
 7fe:	36 c0       	rjmp	.+108    	; 0x86c <getSerialMessage+0x9a>
		}
		if(message[1] == 'V'){
 800:	86 35       	cpi	r24, 0x56	; 86
			message[2] = getSerialChar();
 802:	51 f4       	brne	.+20     	; 0x818 <getSerialMessage+0x46>
 804:	d8 df       	rcall	.-80     	; 0x7b6 <getSerialChar>
 806:	8a 83       	std	Y+2, r24	; 0x02
			if(message[2] == 'O' || message[2] == 'I' || message[2] == 'X'){
 808:	8f 34       	cpi	r24, 0x4F	; 79
 80a:	21 f0       	breq	.+8      	; 0x814 <getSerialMessage+0x42>
 80c:	89 34       	cpi	r24, 0x49	; 73
 80e:	11 f0       	breq	.+4      	; 0x814 <getSerialMessage+0x42>
 810:	88 35       	cpi	r24, 0x58	; 88
 812:	11 f4       	brne	.+4      	; 0x818 <getSerialMessage+0x46>
				message[3] = '\0';
 814:	1b 82       	std	Y+3, r1	; 0x03
				return;
 816:	2a c0       	rjmp	.+84     	; 0x86c <getSerialMessage+0x9a>
			}
		}
		if(message[1] == 'H'){
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	88 34       	cpi	r24, 0x48	; 72
			message[2] = getSerialChar();
 81c:	59 f4       	brne	.+22     	; 0x834 <getSerialMessage+0x62>
 81e:	cb df       	rcall	.-106    	; 0x7b6 <getSerialChar>
 820:	8a 83       	std	Y+2, r24	; 0x02
			message[3] = getSerialChar();
 822:	c9 df       	rcall	.-110    	; 0x7b6 <getSerialChar>
 824:	8b 83       	std	Y+3, r24	; 0x03
 826:	9a 81       	ldd	r25, Y+2	; 0x02
			if((message[2] < 24 && message[3] < 60)){
 828:	98 31       	cpi	r25, 0x18	; 24
 82a:	20 f4       	brcc	.+8      	; 0x834 <getSerialMessage+0x62>
 82c:	8c 33       	cpi	r24, 0x3C	; 60
 82e:	10 f4       	brcc	.+4      	; 0x834 <getSerialMessage+0x62>
 830:	1c 82       	std	Y+4, r1	; 0x04
				message[4] = '\0';
 832:	1c c0       	rjmp	.+56     	; 0x86c <getSerialMessage+0x9a>
				return;
 834:	89 81       	ldd	r24, Y+1	; 0x01
			}
		}
		if((message[1] == 'N' || message[1] == 'P' || /*message[1] == 'G' ||*/ message[1] == 'S' || message[1] == 'F')){
 836:	8e 34       	cpi	r24, 0x4E	; 78
 838:	31 f0       	breq	.+12     	; 0x846 <getSerialMessage+0x74>
 83a:	80 35       	cpi	r24, 0x50	; 80
 83c:	21 f0       	breq	.+8      	; 0x846 <getSerialMessage+0x74>
 83e:	83 35       	cpi	r24, 0x53	; 83
 840:	11 f0       	breq	.+4      	; 0x846 <getSerialMessage+0x74>
 842:	86 34       	cpi	r24, 0x46	; 70
 844:	91 f4       	brne	.+36     	; 0x86a <getSerialMessage+0x98>
			message[2] = getSerialChar();
 846:	b7 df       	rcall	.-146    	; 0x7b6 <getSerialChar>
 848:	8a 83       	std	Y+2, r24	; 0x02
 84a:	f1 2c       	mov	r15, r1
			for(char i=0; i<message[2]; i++){
 84c:	0a c0       	rjmp	.+20     	; 0x862 <getSerialMessage+0x90>
 84e:	0f 2d       	mov	r16, r15
				message[3+i] = getSerialChar();
 850:	10 e0       	ldi	r17, 0x00	; 0
 852:	0d 5f       	subi	r16, 0xFD	; 253
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	0c 0f       	add	r16, r28
 858:	1d 1f       	adc	r17, r29
 85a:	ad df       	rcall	.-166    	; 0x7b6 <getSerialChar>
 85c:	f8 01       	movw	r30, r16
 85e:	80 83       	st	Z, r24
 860:	f3 94       	inc	r15
				return;
			}
		}
		if((message[1] == 'N' || message[1] == 'P' || /*message[1] == 'G' ||*/ message[1] == 'S' || message[1] == 'F')){
			message[2] = getSerialChar();
			for(char i=0; i<message[2]; i++){
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	f8 16       	cp	r15, r24
 866:	98 f3       	brcs	.-26     	; 0x84e <getSerialMessage+0x7c>
 868:	01 c0       	rjmp	.+2      	; 0x86c <getSerialMessage+0x9a>
 86a:	18 82       	st	Y, r1
				message[3+i] = getSerialChar();
			}
			return;
		}
	}
	message[0] = '\0';
 86c:	df 91       	pop	r29
	return;
}
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	08 95       	ret

00000878 <sendSerialMessage>:
 878:	0f 93       	push	r16
// envia uma mensagem via comunicação serial
void sendSerialMessage(char* message){
 87a:	1f 93       	push	r17
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	8c 01       	movw	r16, r24
	char strSize = strlen(message);
 882:	fc 01       	movw	r30, r24
 884:	01 90       	ld	r0, Z+
 886:	00 20       	and	r0, r0
 888:	e9 f7       	brne	.-6      	; 0x884 <sendSerialMessage+0xc>
 88a:	31 97       	sbiw	r30, 0x01	; 1
 88c:	de 2f       	mov	r29, r30
 88e:	d8 1b       	sub	r29, r24
	for(char i=0; i<strSize; i--){
 890:	c0 e0       	ldi	r28, 0x00	; 0
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <sendSerialMessage+0x28>
		sendSerialChar(*(message+i));
 894:	f8 01       	movw	r30, r16
 896:	ec 0f       	add	r30, r28
 898:	f1 1d       	adc	r31, r1
 89a:	80 81       	ld	r24, Z
 89c:	93 df       	rcall	.-218    	; 0x7c4 <sendSerialChar>
	return;
}
// envia uma mensagem via comunicação serial
void sendSerialMessage(char* message){
	char strSize = strlen(message);
	for(char i=0; i<strSize; i--){
 89e:	c1 50       	subi	r28, 0x01	; 1
 8a0:	cd 17       	cp	r28, r29
 8a2:	c0 f3       	brcs	.-16     	; 0x894 <sendSerialMessage+0x1c>
		sendSerialChar(*(message+i));
	}
	
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	08 95       	ret

000008ae <delay_microsegundos>:
		currentTime[MINUTES] = minutes;
		return 0;
		}else{
		return 1;
	}
}
 8ae:	14 bc       	out	0x24, r1	; 36
 8b0:	80 38       	cpi	r24, 0x80	; 128
 8b2:	91 05       	cpc	r25, r1
 8b4:	84 f4       	brge	.+32     	; 0x8d6 <delay_microsegundos+0x28>
 8b6:	22 e0       	ldi	r18, 0x02	; 2
 8b8:	25 bd       	out	0x25, r18	; 37
 8ba:	dc 01       	movw	r26, r24
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	34 e2       	ldi	r19, 0x24	; 36
 8c0:	44 ef       	ldi	r20, 0xF4	; 244
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	c4 d0       	rcall	.+392    	; 0xa4e <__mulshisi3>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	32 e1       	ldi	r19, 0x12	; 18
 8ca:	4a e7       	ldi	r20, 0x7A	; 122
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	a3 d0       	rcall	.+326    	; 0xa16 <__divmodsi4>
 8d0:	21 95       	neg	r18
 8d2:	26 bd       	out	0x26, r18	; 38
 8d4:	41 c0       	rjmp	.+130    	; 0x958 <delay_microsegundos+0xaa>
 8d6:	9c 01       	movw	r18, r24
 8d8:	20 58       	subi	r18, 0x80	; 128
 8da:	31 09       	sbc	r19, r1
 8dc:	29 36       	cpi	r18, 0x69	; 105
 8de:	33 40       	sbci	r19, 0x03	; 3
 8e0:	80 f4       	brcc	.+32     	; 0x902 <delay_microsegundos+0x54>
 8e2:	23 e0       	ldi	r18, 0x03	; 3
 8e4:	25 bd       	out	0x25, r18	; 37
 8e6:	dc 01       	movw	r26, r24
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	34 e2       	ldi	r19, 0x24	; 36
 8ec:	44 ef       	ldi	r20, 0xF4	; 244
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	ae d0       	rcall	.+348    	; 0xa4e <__mulshisi3>
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e9       	ldi	r19, 0x90	; 144
 8f6:	40 ed       	ldi	r20, 0xD0	; 208
 8f8:	53 e0       	ldi	r21, 0x03	; 3
 8fa:	8d d0       	rcall	.+282    	; 0xa16 <__divmodsi4>
 8fc:	21 95       	neg	r18
 8fe:	26 bd       	out	0x26, r18	; 38
 900:	2b c0       	rjmp	.+86     	; 0x958 <delay_microsegundos+0xaa>
 902:	9c 01       	movw	r18, r24
 904:	29 5e       	subi	r18, 0xE9	; 233
 906:	33 40       	sbci	r19, 0x03	; 3
 908:	28 3b       	cpi	r18, 0xB8	; 184
 90a:	3b 40       	sbci	r19, 0x0B	; 11
 90c:	80 f4       	brcc	.+32     	; 0x92e <delay_microsegundos+0x80>
 90e:	24 e0       	ldi	r18, 0x04	; 4
 910:	25 bd       	out	0x25, r18	; 37
 912:	dc 01       	movw	r26, r24
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	34 e2       	ldi	r19, 0x24	; 36
 918:	44 ef       	ldi	r20, 0xF4	; 244
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	98 d0       	rcall	.+304    	; 0xa4e <__mulshisi3>
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	30 e4       	ldi	r19, 0x40	; 64
 922:	42 e4       	ldi	r20, 0x42	; 66
 924:	5f e0       	ldi	r21, 0x0F	; 15
 926:	77 d0       	rcall	.+238    	; 0xa16 <__divmodsi4>
 928:	21 95       	neg	r18
 92a:	26 bd       	out	0x26, r18	; 38
 92c:	15 c0       	rjmp	.+42     	; 0x958 <delay_microsegundos+0xaa>
 92e:	9c 01       	movw	r18, r24
 930:	21 5a       	subi	r18, 0xA1	; 161
 932:	3f 40       	sbci	r19, 0x0F	; 15
 934:	2c 30       	cpi	r18, 0x0C	; 12
 936:	30 43       	sbci	r19, 0x30	; 48
 938:	78 f4       	brcc	.+30     	; 0x958 <delay_microsegundos+0xaa>
 93a:	25 e0       	ldi	r18, 0x05	; 5
 93c:	25 bd       	out	0x25, r18	; 37
 93e:	dc 01       	movw	r26, r24
 940:	20 e0       	ldi	r18, 0x00	; 0
 942:	34 e2       	ldi	r19, 0x24	; 36
 944:	44 ef       	ldi	r20, 0xF4	; 244
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	82 d0       	rcall	.+260    	; 0xa4e <__mulshisi3>
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	49 e0       	ldi	r20, 0x09	; 9
 950:	5d e3       	ldi	r21, 0x3D	; 61
 952:	61 d0       	rcall	.+194    	; 0xa16 <__divmodsi4>
 954:	21 95       	neg	r18
 956:	26 bd       	out	0x26, r18	; 38
 958:	a8 9b       	sbis	0x15, 0	; 21
 95a:	fe cf       	rjmp	.-4      	; 0x958 <delay_microsegundos+0xaa>
 95c:	08 95       	ret

0000095e <timeControlConfig>:
 95e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 962:	8c e0       	ldi	r24, 0x0C	; 12
 964:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 968:	83 e2       	ldi	r24, 0x23	; 35
 96a:	94 ef       	ldi	r25, 0xF4	; 244
 96c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 970:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 974:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 978:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 97c:	ef e6       	ldi	r30, 0x6F	; 111
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	82 60       	ori	r24, 0x02	; 2
 984:	80 83       	st	Z, r24
 986:	78 94       	sei
 988:	08 95       	ret

0000098a <incTime>:

// incrementa horário em um segundo
void incTime(){
	if(currentTime[SECONDS] == 59){
 98a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 98e:	8b 33       	cpi	r24, 0x3B	; 59
 990:	a9 f4       	brne	.+42     	; 0x9bc <incTime+0x32>
		currentTime[SECONDS] = 0;
 992:	e0 e0       	ldi	r30, 0x00	; 0
 994:	f2 e0       	ldi	r31, 0x02	; 2
 996:	12 82       	std	Z+2, r1	; 0x02
		if(currentTime[MINUTES] == 59){
 998:	81 81       	ldd	r24, Z+1	; 0x01
 99a:	8b 33       	cpi	r24, 0x3B	; 59
 99c:	59 f4       	brne	.+22     	; 0x9b4 <incTime+0x2a>
			currentTime[MINUTES] = 0;
 99e:	11 82       	std	Z+1, r1	; 0x01
			if(currentTime[HOURS] == 23){
 9a0:	80 81       	ld	r24, Z
 9a2:	87 31       	cpi	r24, 0x17	; 23
 9a4:	19 f4       	brne	.+6      	; 0x9ac <incTime+0x22>
				currentTime[HOURS] = 0;
 9a6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 9aa:	08 95       	ret
				}else{
				currentTime[HOURS]++;
 9ac:	8f 5f       	subi	r24, 0xFF	; 255
 9ae:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 9b2:	08 95       	ret
			}
			}else{
			currentTime[MINUTES]++;
 9b4:	8f 5f       	subi	r24, 0xFF	; 255
 9b6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 9ba:	08 95       	ret
		}
		}else{
		currentTime[SECONDS]++;
 9bc:	8f 5f       	subi	r24, 0xFF	; 255
 9be:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 9c2:	08 95       	ret

000009c4 <__vector_20>:
	}
}

ISR(TIMER1_OVF_vect)
{
 9c4:	1f 92       	push	r1
 9c6:	0f 92       	push	r0
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	0f 92       	push	r0
 9cc:	11 24       	eor	r1, r1
 9ce:	0b b6       	in	r0, 0x3b	; 59
 9d0:	0f 92       	push	r0
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	ef 93       	push	r30
 9e8:	ff 93       	push	r31
	incTime();
 9ea:	cf df       	rcall	.-98     	; 0x98a <incTime>
	TIFR1 = ( 1 << 1 ); // limpa flag de estouro
 9ec:	82 e0       	ldi	r24, 0x02	; 2
 9ee:	86 bb       	out	0x16, r24	; 22
 9f0:	ff 91       	pop	r31
 9f2:	ef 91       	pop	r30
 9f4:	bf 91       	pop	r27
 9f6:	af 91       	pop	r26
 9f8:	9f 91       	pop	r25
 9fa:	8f 91       	pop	r24
 9fc:	7f 91       	pop	r23
 9fe:	6f 91       	pop	r22
 a00:	5f 91       	pop	r21
 a02:	4f 91       	pop	r20
 a04:	3f 91       	pop	r19
 a06:	2f 91       	pop	r18
 a08:	0f 90       	pop	r0
 a0a:	0b be       	out	0x3b, r0	; 59
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <__divmodsi4>:
 a16:	05 2e       	mov	r0, r21
 a18:	97 fb       	bst	r25, 7
 a1a:	16 f4       	brtc	.+4      	; 0xa20 <__divmodsi4+0xa>
 a1c:	00 94       	com	r0
 a1e:	0f d0       	rcall	.+30     	; 0xa3e <__negsi2>
 a20:	57 fd       	sbrc	r21, 7
 a22:	05 d0       	rcall	.+10     	; 0xa2e <__divmodsi4_neg2>
 a24:	1a d0       	rcall	.+52     	; 0xa5a <__udivmodsi4>
 a26:	07 fc       	sbrc	r0, 7
 a28:	02 d0       	rcall	.+4      	; 0xa2e <__divmodsi4_neg2>
 a2a:	46 f4       	brtc	.+16     	; 0xa3c <__divmodsi4_exit>
 a2c:	08 c0       	rjmp	.+16     	; 0xa3e <__negsi2>

00000a2e <__divmodsi4_neg2>:
 a2e:	50 95       	com	r21
 a30:	40 95       	com	r20
 a32:	30 95       	com	r19
 a34:	21 95       	neg	r18
 a36:	3f 4f       	sbci	r19, 0xFF	; 255
 a38:	4f 4f       	sbci	r20, 0xFF	; 255
 a3a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a3c <__divmodsi4_exit>:
 a3c:	08 95       	ret

00000a3e <__negsi2>:
 a3e:	90 95       	com	r25
 a40:	80 95       	com	r24
 a42:	70 95       	com	r23
 a44:	61 95       	neg	r22
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	08 95       	ret

00000a4e <__mulshisi3>:
 a4e:	b7 ff       	sbrs	r27, 7
 a50:	26 c0       	rjmp	.+76     	; 0xa9e <__muluhisi3>

00000a52 <__mulohisi3>:
 a52:	25 d0       	rcall	.+74     	; 0xa9e <__muluhisi3>
 a54:	82 1b       	sub	r24, r18
 a56:	93 0b       	sbc	r25, r19
 a58:	08 95       	ret

00000a5a <__udivmodsi4>:
 a5a:	a1 e2       	ldi	r26, 0x21	; 33
 a5c:	1a 2e       	mov	r1, r26
 a5e:	aa 1b       	sub	r26, r26
 a60:	bb 1b       	sub	r27, r27
 a62:	fd 01       	movw	r30, r26
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__udivmodsi4_ep>

00000a66 <__udivmodsi4_loop>:
 a66:	aa 1f       	adc	r26, r26
 a68:	bb 1f       	adc	r27, r27
 a6a:	ee 1f       	adc	r30, r30
 a6c:	ff 1f       	adc	r31, r31
 a6e:	a2 17       	cp	r26, r18
 a70:	b3 07       	cpc	r27, r19
 a72:	e4 07       	cpc	r30, r20
 a74:	f5 07       	cpc	r31, r21
 a76:	20 f0       	brcs	.+8      	; 0xa80 <__udivmodsi4_ep>
 a78:	a2 1b       	sub	r26, r18
 a7a:	b3 0b       	sbc	r27, r19
 a7c:	e4 0b       	sbc	r30, r20
 a7e:	f5 0b       	sbc	r31, r21

00000a80 <__udivmodsi4_ep>:
 a80:	66 1f       	adc	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	1a 94       	dec	r1
 a8a:	69 f7       	brne	.-38     	; 0xa66 <__udivmodsi4_loop>
 a8c:	60 95       	com	r22
 a8e:	70 95       	com	r23
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	9b 01       	movw	r18, r22
 a96:	ac 01       	movw	r20, r24
 a98:	bd 01       	movw	r22, r26
 a9a:	cf 01       	movw	r24, r30
 a9c:	08 95       	ret

00000a9e <__muluhisi3>:
 a9e:	09 d0       	rcall	.+18     	; 0xab2 <__umulhisi3>
 aa0:	a5 9f       	mul	r26, r21
 aa2:	90 0d       	add	r25, r0
 aa4:	b4 9f       	mul	r27, r20
 aa6:	90 0d       	add	r25, r0
 aa8:	a4 9f       	mul	r26, r20
 aaa:	80 0d       	add	r24, r0
 aac:	91 1d       	adc	r25, r1
 aae:	11 24       	eor	r1, r1
 ab0:	08 95       	ret

00000ab2 <__umulhisi3>:
 ab2:	a2 9f       	mul	r26, r18
 ab4:	b0 01       	movw	r22, r0
 ab6:	b3 9f       	mul	r27, r19
 ab8:	c0 01       	movw	r24, r0
 aba:	a3 9f       	mul	r26, r19
 abc:	70 0d       	add	r23, r0
 abe:	81 1d       	adc	r24, r1
 ac0:	11 24       	eor	r1, r1
 ac2:	91 1d       	adc	r25, r1
 ac4:	b2 9f       	mul	r27, r18
 ac6:	70 0d       	add	r23, r0
 ac8:	81 1d       	adc	r24, r1
 aca:	11 24       	eor	r1, r1
 acc:	91 1d       	adc	r25, r1
 ace:	08 95       	ret

00000ad0 <_exit>:
 ad0:	f8 94       	cli

00000ad2 <__stop_program>:
 ad2:	ff cf       	rjmp	.-2      	; 0xad2 <__stop_program>
