
urna_eletronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f4  00800100  00001d6c  00001e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  008003f4  008003f4  000020f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035b1  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2e  00000000  00000000  000058cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000225c  00000000  00000000  000065fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00008858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a6  00000000  00000000  00008c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e6  00000000  00000000  0000963e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000ac24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
       2:	00 00       	nop
       4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c0       	rjmp	.+158    	; 0xc0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c0       	rjmp	.+154    	; 0xc0 <__bad_interrupt>
      26:	00 00       	nop
      28:	4b c0       	rjmp	.+150    	; 0xc0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_11>
      30:	47 c0       	rjmp	.+142    	; 0xc0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c0       	rjmp	.+138    	; 0xc0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c0       	rjmp	.+134    	; 0xc0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c0       	rjmp	.+130    	; 0xc0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c0       	rjmp	.+126    	; 0xc0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c0       	rjmp	.+122    	; 0xc0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c0       	rjmp	.+118    	; 0xc0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c0       	rjmp	.+114    	; 0xc0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c0       	rjmp	.+110    	; 0xc0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c0       	rjmp	.+106    	; 0xc0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c0       	rjmp	.+102    	; 0xc0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	31 c0       	rjmp	.+98     	; 0xc0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2f c0       	rjmp	.+94     	; 0xc0 <__bad_interrupt>
      62:	00 00       	nop
      64:	2d c0       	rjmp	.+90     	; 0xc0 <__bad_interrupt>
      66:	00 00       	nop
      68:	99 08       	sbc	r9, r9
      6a:	b4 08       	sbc	r11, r4
      6c:	cf 08       	sbc	r12, r15
      6e:	ea 08       	sbc	r14, r10
      70:	05 09       	sbc	r16, r5
      72:	20 09       	sbc	r18, r0
      74:	3b 09       	sbc	r19, r11
      76:	56 09       	sbc	r21, r6
      78:	d3 0b       	sbc	r29, r19
      7a:	a6 09       	sbc	r26, r6
      7c:	7e 0a       	sbc	r7, r30
      7e:	d3 0b       	sbc	r29, r19
      80:	d3 0b       	sbc	r29, r19
      82:	d3 0b       	sbc	r29, r19
      84:	9a 0a       	sbc	r9, r26
      86:	d3 0b       	sbc	r29, r19

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	13 e0       	ldi	r17, 0x03	; 3
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	ec e6       	ldi	r30, 0x6C	; 108
      9c:	fd e1       	ldi	r31, 0x1D	; 29
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a4 3f       	cpi	r26, 0xF4	; 244
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	23 e0       	ldi	r18, 0x03	; 3
      ac:	a4 ef       	ldi	r26, 0xF4	; 244
      ae:	b3 e0       	ldi	r27, 0x03	; 3
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a9 3f       	cpi	r26, 0xF9	; 249
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	87 d6       	rcall	.+3342   	; 0xdca <main>
      bc:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <_exit>

000000c0 <__bad_interrupt>:
      c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <votingEndSong>:
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
      ca:	cf 93       	push	r28
      cc:	c0 e0       	ldi	r28, 0x00	; 0
      ce:	49 c0       	rjmp	.+146    	; 0x162 <votingEndSong+0xa0>
      d0:	85 b1       	in	r24, 0x05	; 5
      d2:	80 61       	ori	r24, 0x10	; 16
      d4:	85 b9       	out	0x05, r24	; 5
      d6:	66 e7       	ldi	r22, 0x76	; 118
      d8:	71 e0       	ldi	r23, 0x01	; 1
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
      e2:	85 b1       	in	r24, 0x05	; 5
      e4:	8f 7e       	andi	r24, 0xEF	; 239
      e6:	85 b9       	out	0x05, r24	; 5
      e8:	66 e7       	ldi	r22, 0x76	; 118
      ea:	71 e0       	ldi	r23, 0x01	; 1
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
      f4:	8c ee       	ldi	r24, 0xEC	; 236
      f6:	c8 0e       	add	r12, r24
      f8:	82 e0       	ldi	r24, 0x02	; 2
      fa:	d8 1e       	adc	r13, r24
      fc:	e1 1c       	adc	r14, r1
      fe:	f1 1c       	adc	r15, r1
     100:	03 c0       	rjmp	.+6      	; 0x108 <votingEndSong+0x46>
     102:	c1 2c       	mov	r12, r1
     104:	d1 2c       	mov	r13, r1
     106:	76 01       	movw	r14, r12
     108:	80 e9       	ldi	r24, 0x90	; 144
     10a:	c8 16       	cp	r12, r24
     10c:	8f e5       	ldi	r24, 0x5F	; 95
     10e:	d8 06       	cpc	r13, r24
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	e8 06       	cpc	r14, r24
     114:	f1 04       	cpc	r15, r1
     116:	e4 f2       	brlt	.-72     	; 0xd0 <votingEndSong+0xe>
     118:	c1 2c       	mov	r12, r1
     11a:	d1 2c       	mov	r13, r1
     11c:	76 01       	movw	r14, r12
     11e:	18 c0       	rjmp	.+48     	; 0x150 <votingEndSong+0x8e>
     120:	85 b1       	in	r24, 0x05	; 5
     122:	80 61       	ori	r24, 0x10	; 16
     124:	85 b9       	out	0x05, r24	; 5
     126:	6c e5       	ldi	r22, 0x5C	; 92
     128:	71 e0       	ldi	r23, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     132:	85 b1       	in	r24, 0x05	; 5
     134:	8f 7e       	andi	r24, 0xEF	; 239
     136:	85 b9       	out	0x05, r24	; 5
     138:	6c e5       	ldi	r22, 0x5C	; 92
     13a:	71 e0       	ldi	r23, 0x01	; 1
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     144:	88 eb       	ldi	r24, 0xB8	; 184
     146:	c8 0e       	add	r12, r24
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	d8 1e       	adc	r13, r24
     14c:	e1 1c       	adc	r14, r1
     14e:	f1 1c       	adc	r15, r1
     150:	80 e9       	ldi	r24, 0x90	; 144
     152:	c8 16       	cp	r12, r24
     154:	8f e5       	ldi	r24, 0x5F	; 95
     156:	d8 06       	cpc	r13, r24
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	e8 06       	cpc	r14, r24
     15c:	f1 04       	cpc	r15, r1
     15e:	04 f3       	brlt	.-64     	; 0x120 <votingEndSong+0x5e>
     160:	cf 5f       	subi	r28, 0xFF	; 255
     162:	c5 30       	cpi	r28, 0x05	; 5
     164:	70 f2       	brcs	.-100    	; 0x102 <votingEndSong+0x40>
     166:	c1 2c       	mov	r12, r1
     168:	d1 2c       	mov	r13, r1
     16a:	76 01       	movw	r14, r12
     16c:	18 c0       	rjmp	.+48     	; 0x19e <votingEndSong+0xdc>
     16e:	85 b1       	in	r24, 0x05	; 5
     170:	80 61       	ori	r24, 0x10	; 16
     172:	85 b9       	out	0x05, r24	; 5
     174:	66 e7       	ldi	r22, 0x76	; 118
     176:	71 e0       	ldi	r23, 0x01	; 1
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     180:	85 b1       	in	r24, 0x05	; 5
     182:	8f 7e       	andi	r24, 0xEF	; 239
     184:	85 b9       	out	0x05, r24	; 5
     186:	66 e7       	ldi	r22, 0x76	; 118
     188:	71 e0       	ldi	r23, 0x01	; 1
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     192:	8c ee       	ldi	r24, 0xEC	; 236
     194:	c8 0e       	add	r12, r24
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	d8 1e       	adc	r13, r24
     19a:	e1 1c       	adc	r14, r1
     19c:	f1 1c       	adc	r15, r1
     19e:	80 ec       	ldi	r24, 0xC0	; 192
     1a0:	c8 16       	cp	r12, r24
     1a2:	84 ed       	ldi	r24, 0xD4	; 212
     1a4:	d8 06       	cpc	r13, r24
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	e8 06       	cpc	r14, r24
     1aa:	f1 04       	cpc	r15, r1
     1ac:	04 f3       	brlt	.-64     	; 0x16e <votingEndSong+0xac>
     1ae:	cf 91       	pop	r28
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <functionSet>:
     1ba:	85 b1       	in	r24, 0x05	; 5
     1bc:	87 7f       	andi	r24, 0xF7	; 247
     1be:	85 b9       	out	0x05, r24	; 5
     1c0:	85 b1       	in	r24, 0x05	; 5
     1c2:	8b 7f       	andi	r24, 0xFB	; 251
     1c4:	85 b9       	out	0x05, r24	; 5
     1c6:	85 b1       	in	r24, 0x05	; 5
     1c8:	82 60       	ori	r24, 0x02	; 2
     1ca:	85 b9       	out	0x05, r24	; 5
     1cc:	85 b1       	in	r24, 0x05	; 5
     1ce:	8e 7f       	andi	r24, 0xFE	; 254
     1d0:	85 b9       	out	0x05, r24	; 5
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 7b       	andi	r24, 0xBF	; 191
     1d6:	8b b9       	out	0x0b, r24	; 11
     1d8:	8b b1       	in	r24, 0x0b	; 11
     1da:	80 68       	ori	r24, 0x80	; 128
     1dc:	8b b9       	out	0x0b, r24	; 11
     1de:	8b b1       	in	r24, 0x0b	; 11
     1e0:	8f 77       	andi	r24, 0x7F	; 127
     1e2:	8b b9       	out	0x0b, r24	; 11
     1e4:	8b b1       	in	r24, 0x0b	; 11
     1e6:	80 68       	ori	r24, 0x80	; 128
     1e8:	8b b9       	out	0x0b, r24	; 11
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	8f 77       	andi	r24, 0x7F	; 127
     1ee:	8b b9       	out	0x0b, r24	; 11
     1f0:	68 e2       	ldi	r22, 0x28	; 40
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     1fc:	8b b1       	in	r24, 0x0b	; 11
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	8b b9       	out	0x0b, r24	; 11
     202:	8b b1       	in	r24, 0x0b	; 11
     204:	8f 77       	andi	r24, 0x7F	; 127
     206:	8b b9       	out	0x0b, r24	; 11
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	88 60       	ori	r24, 0x08	; 8
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	8b b1       	in	r24, 0x0b	; 11
     210:	80 68       	ori	r24, 0x80	; 128
     212:	8b b9       	out	0x0b, r24	; 11
     214:	8b b1       	in	r24, 0x0b	; 11
     216:	8f 77       	andi	r24, 0x7F	; 127
     218:	8b b9       	out	0x0b, r24	; 11
     21a:	68 e2       	ldi	r22, 0x28	; 40
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <delay_us>
     226:	08 95       	ret

00000228 <entryModeSet>:
     228:	9b b1       	in	r25, 0x0b	; 11
     22a:	9f 7b       	andi	r25, 0xBF	; 191
     22c:	9b b9       	out	0x0b, r25	; 11
     22e:	95 b1       	in	r25, 0x05	; 5
     230:	97 7f       	andi	r25, 0xF7	; 247
     232:	95 b9       	out	0x05, r25	; 5
     234:	95 b1       	in	r25, 0x05	; 5
     236:	9b 7f       	andi	r25, 0xFB	; 251
     238:	95 b9       	out	0x05, r25	; 5
     23a:	95 b1       	in	r25, 0x05	; 5
     23c:	9d 7f       	andi	r25, 0xFD	; 253
     23e:	95 b9       	out	0x05, r25	; 5
     240:	95 b1       	in	r25, 0x05	; 5
     242:	9e 7f       	andi	r25, 0xFE	; 254
     244:	95 b9       	out	0x05, r25	; 5
     246:	9b b1       	in	r25, 0x0b	; 11
     248:	90 68       	ori	r25, 0x80	; 128
     24a:	9b b9       	out	0x0b, r25	; 11
     24c:	9b b1       	in	r25, 0x0b	; 11
     24e:	9f 77       	andi	r25, 0x7F	; 127
     250:	9b b9       	out	0x0b, r25	; 11
     252:	95 b1       	in	r25, 0x05	; 5
     254:	94 60       	ori	r25, 0x04	; 4
     256:	95 b9       	out	0x05, r25	; 5
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	21 f4       	brne	.+8      	; 0x264 <entryModeSet+0x3c>
     25c:	85 b1       	in	r24, 0x05	; 5
     25e:	82 60       	ori	r24, 0x02	; 2
     260:	85 b9       	out	0x05, r24	; 5
     262:	03 c0       	rjmp	.+6      	; 0x26a <entryModeSet+0x42>
     264:	85 b1       	in	r24, 0x05	; 5
     266:	8d 7f       	andi	r24, 0xFD	; 253
     268:	85 b9       	out	0x05, r24	; 5
     26a:	61 30       	cpi	r22, 0x01	; 1
     26c:	21 f4       	brne	.+8      	; 0x276 <entryModeSet+0x4e>
     26e:	85 b1       	in	r24, 0x05	; 5
     270:	81 60       	ori	r24, 0x01	; 1
     272:	85 b9       	out	0x05, r24	; 5
     274:	03 c0       	rjmp	.+6      	; 0x27c <entryModeSet+0x54>
     276:	85 b1       	in	r24, 0x05	; 5
     278:	8e 7f       	andi	r24, 0xFE	; 254
     27a:	85 b9       	out	0x05, r24	; 5
     27c:	8b b1       	in	r24, 0x0b	; 11
     27e:	80 68       	ori	r24, 0x80	; 128
     280:	8b b9       	out	0x0b, r24	; 11
     282:	8b b1       	in	r24, 0x0b	; 11
     284:	8f 77       	andi	r24, 0x7F	; 127
     286:	8b b9       	out	0x0b, r24	; 11
     288:	68 e2       	ldi	r22, 0x28	; 40
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <delay_us>
     294:	08 95       	ret

00000296 <displayOnOffControl>:
     296:	95 b1       	in	r25, 0x05	; 5
     298:	97 7f       	andi	r25, 0xF7	; 247
     29a:	95 b9       	out	0x05, r25	; 5
     29c:	95 b1       	in	r25, 0x05	; 5
     29e:	9b 7f       	andi	r25, 0xFB	; 251
     2a0:	95 b9       	out	0x05, r25	; 5
     2a2:	95 b1       	in	r25, 0x05	; 5
     2a4:	9d 7f       	andi	r25, 0xFD	; 253
     2a6:	95 b9       	out	0x05, r25	; 5
     2a8:	95 b1       	in	r25, 0x05	; 5
     2aa:	9e 7f       	andi	r25, 0xFE	; 254
     2ac:	95 b9       	out	0x05, r25	; 5
     2ae:	9b b1       	in	r25, 0x0b	; 11
     2b0:	90 68       	ori	r25, 0x80	; 128
     2b2:	9b b9       	out	0x0b, r25	; 11
     2b4:	9b b1       	in	r25, 0x0b	; 11
     2b6:	9f 77       	andi	r25, 0x7F	; 127
     2b8:	9b b9       	out	0x0b, r25	; 11
     2ba:	95 b1       	in	r25, 0x05	; 5
     2bc:	98 60       	ori	r25, 0x08	; 8
     2be:	95 b9       	out	0x05, r25	; 5
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	21 f4       	brne	.+8      	; 0x2cc <displayOnOffControl+0x36>
     2c4:	85 b1       	in	r24, 0x05	; 5
     2c6:	84 60       	ori	r24, 0x04	; 4
     2c8:	85 b9       	out	0x05, r24	; 5
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <displayOnOffControl+0x3c>
     2cc:	85 b1       	in	r24, 0x05	; 5
     2ce:	8b 7f       	andi	r24, 0xFB	; 251
     2d0:	85 b9       	out	0x05, r24	; 5
     2d2:	61 30       	cpi	r22, 0x01	; 1
     2d4:	21 f4       	brne	.+8      	; 0x2de <displayOnOffControl+0x48>
     2d6:	85 b1       	in	r24, 0x05	; 5
     2d8:	82 60       	ori	r24, 0x02	; 2
     2da:	85 b9       	out	0x05, r24	; 5
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <displayOnOffControl+0x4e>
     2de:	85 b1       	in	r24, 0x05	; 5
     2e0:	8d 7f       	andi	r24, 0xFD	; 253
     2e2:	85 b9       	out	0x05, r24	; 5
     2e4:	41 30       	cpi	r20, 0x01	; 1
     2e6:	21 f4       	brne	.+8      	; 0x2f0 <displayOnOffControl+0x5a>
     2e8:	85 b1       	in	r24, 0x05	; 5
     2ea:	81 60       	ori	r24, 0x01	; 1
     2ec:	85 b9       	out	0x05, r24	; 5
     2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <displayOnOffControl+0x60>
     2f0:	85 b1       	in	r24, 0x05	; 5
     2f2:	8e 7f       	andi	r24, 0xFE	; 254
     2f4:	85 b9       	out	0x05, r24	; 5
     2f6:	8b b1       	in	r24, 0x0b	; 11
     2f8:	80 68       	ori	r24, 0x80	; 128
     2fa:	8b b9       	out	0x0b, r24	; 11
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	8f 77       	andi	r24, 0x7F	; 127
     300:	8b b9       	out	0x0b, r24	; 11
     302:	68 e2       	ldi	r22, 0x28	; 40
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <delay_us>
     30e:	08 95       	ret

00000310 <getBit>:
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <getBit+0x8>
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	6a 95       	dec	r22
     31a:	e2 f7       	brpl	.-8      	; 0x314 <getBit+0x4>
     31c:	81 70       	andi	r24, 0x01	; 1
     31e:	08 95       	ret

00000320 <sendChar>:
     320:	cf 93       	push	r28
     322:	c8 2f       	mov	r28, r24
     324:	67 e0       	ldi	r22, 0x07	; 7
     326:	f4 df       	rcall	.-24     	; 0x310 <getBit>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	21 f4       	brne	.+8      	; 0x334 <sendChar+0x14>
     32c:	85 b1       	in	r24, 0x05	; 5
     32e:	88 60       	ori	r24, 0x08	; 8
     330:	85 b9       	out	0x05, r24	; 5
     332:	03 c0       	rjmp	.+6      	; 0x33a <sendChar+0x1a>
     334:	85 b1       	in	r24, 0x05	; 5
     336:	87 7f       	andi	r24, 0xF7	; 247
     338:	85 b9       	out	0x05, r24	; 5
     33a:	66 e0       	ldi	r22, 0x06	; 6
     33c:	8c 2f       	mov	r24, r28
     33e:	e8 df       	rcall	.-48     	; 0x310 <getBit>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	21 f4       	brne	.+8      	; 0x34c <sendChar+0x2c>
     344:	85 b1       	in	r24, 0x05	; 5
     346:	84 60       	ori	r24, 0x04	; 4
     348:	85 b9       	out	0x05, r24	; 5
     34a:	03 c0       	rjmp	.+6      	; 0x352 <sendChar+0x32>
     34c:	85 b1       	in	r24, 0x05	; 5
     34e:	8b 7f       	andi	r24, 0xFB	; 251
     350:	85 b9       	out	0x05, r24	; 5
     352:	65 e0       	ldi	r22, 0x05	; 5
     354:	8c 2f       	mov	r24, r28
     356:	dc df       	rcall	.-72     	; 0x310 <getBit>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	21 f4       	brne	.+8      	; 0x364 <sendChar+0x44>
     35c:	85 b1       	in	r24, 0x05	; 5
     35e:	82 60       	ori	r24, 0x02	; 2
     360:	85 b9       	out	0x05, r24	; 5
     362:	03 c0       	rjmp	.+6      	; 0x36a <sendChar+0x4a>
     364:	85 b1       	in	r24, 0x05	; 5
     366:	8d 7f       	andi	r24, 0xFD	; 253
     368:	85 b9       	out	0x05, r24	; 5
     36a:	64 e0       	ldi	r22, 0x04	; 4
     36c:	8c 2f       	mov	r24, r28
     36e:	d0 df       	rcall	.-96     	; 0x310 <getBit>
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	21 f4       	brne	.+8      	; 0x37c <sendChar+0x5c>
     374:	85 b1       	in	r24, 0x05	; 5
     376:	81 60       	ori	r24, 0x01	; 1
     378:	85 b9       	out	0x05, r24	; 5
     37a:	03 c0       	rjmp	.+6      	; 0x382 <sendChar+0x62>
     37c:	85 b1       	in	r24, 0x05	; 5
     37e:	8e 7f       	andi	r24, 0xFE	; 254
     380:	85 b9       	out	0x05, r24	; 5
     382:	8b b1       	in	r24, 0x0b	; 11
     384:	80 64       	ori	r24, 0x40	; 64
     386:	8b b9       	out	0x0b, r24	; 11
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	80 68       	ori	r24, 0x80	; 128
     38c:	8b b9       	out	0x0b, r24	; 11
     38e:	8b b1       	in	r24, 0x0b	; 11
     390:	8f 77       	andi	r24, 0x7F	; 127
     392:	8b b9       	out	0x0b, r24	; 11
     394:	63 e0       	ldi	r22, 0x03	; 3
     396:	8c 2f       	mov	r24, r28
     398:	bb df       	rcall	.-138    	; 0x310 <getBit>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	21 f4       	brne	.+8      	; 0x3a6 <sendChar+0x86>
     39e:	85 b1       	in	r24, 0x05	; 5
     3a0:	88 60       	ori	r24, 0x08	; 8
     3a2:	85 b9       	out	0x05, r24	; 5
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <sendChar+0x8c>
     3a6:	85 b1       	in	r24, 0x05	; 5
     3a8:	87 7f       	andi	r24, 0xF7	; 247
     3aa:	85 b9       	out	0x05, r24	; 5
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	8c 2f       	mov	r24, r28
     3b0:	af df       	rcall	.-162    	; 0x310 <getBit>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	21 f4       	brne	.+8      	; 0x3be <sendChar+0x9e>
     3b6:	85 b1       	in	r24, 0x05	; 5
     3b8:	84 60       	ori	r24, 0x04	; 4
     3ba:	85 b9       	out	0x05, r24	; 5
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <sendChar+0xa4>
     3be:	85 b1       	in	r24, 0x05	; 5
     3c0:	8b 7f       	andi	r24, 0xFB	; 251
     3c2:	85 b9       	out	0x05, r24	; 5
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	8c 2f       	mov	r24, r28
     3c8:	a3 df       	rcall	.-186    	; 0x310 <getBit>
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <sendChar+0xb6>
     3ce:	85 b1       	in	r24, 0x05	; 5
     3d0:	82 60       	ori	r24, 0x02	; 2
     3d2:	85 b9       	out	0x05, r24	; 5
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <sendChar+0xbc>
     3d6:	85 b1       	in	r24, 0x05	; 5
     3d8:	8d 7f       	andi	r24, 0xFD	; 253
     3da:	85 b9       	out	0x05, r24	; 5
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	8c 2f       	mov	r24, r28
     3e0:	97 df       	rcall	.-210    	; 0x310 <getBit>
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	21 f4       	brne	.+8      	; 0x3ee <sendChar+0xce>
     3e6:	85 b1       	in	r24, 0x05	; 5
     3e8:	81 60       	ori	r24, 0x01	; 1
     3ea:	85 b9       	out	0x05, r24	; 5
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <sendChar+0xd4>
     3ee:	85 b1       	in	r24, 0x05	; 5
     3f0:	8e 7f       	andi	r24, 0xFE	; 254
     3f2:	85 b9       	out	0x05, r24	; 5
     3f4:	8b b1       	in	r24, 0x0b	; 11
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	8b b9       	out	0x0b, r24	; 11
     3fa:	8b b1       	in	r24, 0x0b	; 11
     3fc:	8f 77       	andi	r24, 0x7F	; 127
     3fe:	8b b9       	out	0x0b, r24	; 11
     400:	68 e2       	ldi	r22, 0x28	; 40
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <setDdRamAddress>:
     410:	cf 93       	push	r28
     412:	c8 2f       	mov	r28, r24
     414:	8b b1       	in	r24, 0x0b	; 11
     416:	8f 7b       	andi	r24, 0xBF	; 191
     418:	8b b9       	out	0x0b, r24	; 11
     41a:	85 b1       	in	r24, 0x05	; 5
     41c:	88 60       	ori	r24, 0x08	; 8
     41e:	85 b9       	out	0x05, r24	; 5
     420:	66 e0       	ldi	r22, 0x06	; 6
     422:	8c 2f       	mov	r24, r28
     424:	75 df       	rcall	.-278    	; 0x310 <getBit>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	21 f4       	brne	.+8      	; 0x432 <setDdRamAddress+0x22>
     42a:	85 b1       	in	r24, 0x05	; 5
     42c:	84 60       	ori	r24, 0x04	; 4
     42e:	85 b9       	out	0x05, r24	; 5
     430:	03 c0       	rjmp	.+6      	; 0x438 <setDdRamAddress+0x28>
     432:	85 b1       	in	r24, 0x05	; 5
     434:	8b 7f       	andi	r24, 0xFB	; 251
     436:	85 b9       	out	0x05, r24	; 5
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	8c 2f       	mov	r24, r28
     43c:	69 df       	rcall	.-302    	; 0x310 <getBit>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	21 f4       	brne	.+8      	; 0x44a <setDdRamAddress+0x3a>
     442:	85 b1       	in	r24, 0x05	; 5
     444:	82 60       	ori	r24, 0x02	; 2
     446:	85 b9       	out	0x05, r24	; 5
     448:	03 c0       	rjmp	.+6      	; 0x450 <setDdRamAddress+0x40>
     44a:	85 b1       	in	r24, 0x05	; 5
     44c:	8d 7f       	andi	r24, 0xFD	; 253
     44e:	85 b9       	out	0x05, r24	; 5
     450:	64 e0       	ldi	r22, 0x04	; 4
     452:	8c 2f       	mov	r24, r28
     454:	5d df       	rcall	.-326    	; 0x310 <getBit>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	21 f4       	brne	.+8      	; 0x462 <setDdRamAddress+0x52>
     45a:	85 b1       	in	r24, 0x05	; 5
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	85 b9       	out	0x05, r24	; 5
     460:	03 c0       	rjmp	.+6      	; 0x468 <setDdRamAddress+0x58>
     462:	85 b1       	in	r24, 0x05	; 5
     464:	8e 7f       	andi	r24, 0xFE	; 254
     466:	85 b9       	out	0x05, r24	; 5
     468:	8b b1       	in	r24, 0x0b	; 11
     46a:	80 68       	ori	r24, 0x80	; 128
     46c:	8b b9       	out	0x0b, r24	; 11
     46e:	8b b1       	in	r24, 0x0b	; 11
     470:	8f 77       	andi	r24, 0x7F	; 127
     472:	8b b9       	out	0x0b, r24	; 11
     474:	63 e0       	ldi	r22, 0x03	; 3
     476:	8c 2f       	mov	r24, r28
     478:	4b df       	rcall	.-362    	; 0x310 <getBit>
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	21 f4       	brne	.+8      	; 0x486 <setDdRamAddress+0x76>
     47e:	85 b1       	in	r24, 0x05	; 5
     480:	88 60       	ori	r24, 0x08	; 8
     482:	85 b9       	out	0x05, r24	; 5
     484:	03 c0       	rjmp	.+6      	; 0x48c <setDdRamAddress+0x7c>
     486:	85 b1       	in	r24, 0x05	; 5
     488:	87 7f       	andi	r24, 0xF7	; 247
     48a:	85 b9       	out	0x05, r24	; 5
     48c:	62 e0       	ldi	r22, 0x02	; 2
     48e:	8c 2f       	mov	r24, r28
     490:	3f df       	rcall	.-386    	; 0x310 <getBit>
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	21 f4       	brne	.+8      	; 0x49e <setDdRamAddress+0x8e>
     496:	85 b1       	in	r24, 0x05	; 5
     498:	84 60       	ori	r24, 0x04	; 4
     49a:	85 b9       	out	0x05, r24	; 5
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <setDdRamAddress+0x94>
     49e:	85 b1       	in	r24, 0x05	; 5
     4a0:	8b 7f       	andi	r24, 0xFB	; 251
     4a2:	85 b9       	out	0x05, r24	; 5
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	8c 2f       	mov	r24, r28
     4a8:	33 df       	rcall	.-410    	; 0x310 <getBit>
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <setDdRamAddress+0xa6>
     4ae:	85 b1       	in	r24, 0x05	; 5
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	85 b9       	out	0x05, r24	; 5
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <setDdRamAddress+0xac>
     4b6:	85 b1       	in	r24, 0x05	; 5
     4b8:	8d 7f       	andi	r24, 0xFD	; 253
     4ba:	85 b9       	out	0x05, r24	; 5
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	8c 2f       	mov	r24, r28
     4c0:	27 df       	rcall	.-434    	; 0x310 <getBit>
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	21 f4       	brne	.+8      	; 0x4ce <setDdRamAddress+0xbe>
     4c6:	85 b1       	in	r24, 0x05	; 5
     4c8:	81 60       	ori	r24, 0x01	; 1
     4ca:	85 b9       	out	0x05, r24	; 5
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <setDdRamAddress+0xc4>
     4ce:	85 b1       	in	r24, 0x05	; 5
     4d0:	8e 7f       	andi	r24, 0xFE	; 254
     4d2:	85 b9       	out	0x05, r24	; 5
     4d4:	8b b1       	in	r24, 0x0b	; 11
     4d6:	80 68       	ori	r24, 0x80	; 128
     4d8:	8b b9       	out	0x0b, r24	; 11
     4da:	8b b1       	in	r24, 0x0b	; 11
     4dc:	8f 77       	andi	r24, 0x7F	; 127
     4de:	8b b9       	out	0x0b, r24	; 11
     4e0:	68 e2       	ldi	r22, 0x28	; 40
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <setCgRamAddress>:
     4f0:	cf 93       	push	r28
     4f2:	c8 2f       	mov	r28, r24
     4f4:	8b b1       	in	r24, 0x0b	; 11
     4f6:	8f 7b       	andi	r24, 0xBF	; 191
     4f8:	8b b9       	out	0x0b, r24	; 11
     4fa:	85 b1       	in	r24, 0x05	; 5
     4fc:	87 7f       	andi	r24, 0xF7	; 247
     4fe:	85 b9       	out	0x05, r24	; 5
     500:	85 b1       	in	r24, 0x05	; 5
     502:	84 60       	ori	r24, 0x04	; 4
     504:	85 b9       	out	0x05, r24	; 5
     506:	65 e0       	ldi	r22, 0x05	; 5
     508:	8c 2f       	mov	r24, r28
     50a:	02 df       	rcall	.-508    	; 0x310 <getBit>
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	21 f4       	brne	.+8      	; 0x518 <setCgRamAddress+0x28>
     510:	85 b1       	in	r24, 0x05	; 5
     512:	82 60       	ori	r24, 0x02	; 2
     514:	85 b9       	out	0x05, r24	; 5
     516:	03 c0       	rjmp	.+6      	; 0x51e <setCgRamAddress+0x2e>
     518:	85 b1       	in	r24, 0x05	; 5
     51a:	8d 7f       	andi	r24, 0xFD	; 253
     51c:	85 b9       	out	0x05, r24	; 5
     51e:	64 e0       	ldi	r22, 0x04	; 4
     520:	8c 2f       	mov	r24, r28
     522:	f6 de       	rcall	.-532    	; 0x310 <getBit>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	21 f4       	brne	.+8      	; 0x530 <setCgRamAddress+0x40>
     528:	85 b1       	in	r24, 0x05	; 5
     52a:	81 60       	ori	r24, 0x01	; 1
     52c:	85 b9       	out	0x05, r24	; 5
     52e:	03 c0       	rjmp	.+6      	; 0x536 <setCgRamAddress+0x46>
     530:	85 b1       	in	r24, 0x05	; 5
     532:	8e 7f       	andi	r24, 0xFE	; 254
     534:	85 b9       	out	0x05, r24	; 5
     536:	8b b1       	in	r24, 0x0b	; 11
     538:	80 68       	ori	r24, 0x80	; 128
     53a:	8b b9       	out	0x0b, r24	; 11
     53c:	8b b1       	in	r24, 0x0b	; 11
     53e:	8f 77       	andi	r24, 0x7F	; 127
     540:	8b b9       	out	0x0b, r24	; 11
     542:	63 e0       	ldi	r22, 0x03	; 3
     544:	8c 2f       	mov	r24, r28
     546:	e4 de       	rcall	.-568    	; 0x310 <getBit>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	21 f4       	brne	.+8      	; 0x554 <setCgRamAddress+0x64>
     54c:	85 b1       	in	r24, 0x05	; 5
     54e:	88 60       	ori	r24, 0x08	; 8
     550:	85 b9       	out	0x05, r24	; 5
     552:	03 c0       	rjmp	.+6      	; 0x55a <setCgRamAddress+0x6a>
     554:	85 b1       	in	r24, 0x05	; 5
     556:	87 7f       	andi	r24, 0xF7	; 247
     558:	85 b9       	out	0x05, r24	; 5
     55a:	62 e0       	ldi	r22, 0x02	; 2
     55c:	8c 2f       	mov	r24, r28
     55e:	d8 de       	rcall	.-592    	; 0x310 <getBit>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	21 f4       	brne	.+8      	; 0x56c <setCgRamAddress+0x7c>
     564:	85 b1       	in	r24, 0x05	; 5
     566:	84 60       	ori	r24, 0x04	; 4
     568:	85 b9       	out	0x05, r24	; 5
     56a:	03 c0       	rjmp	.+6      	; 0x572 <setCgRamAddress+0x82>
     56c:	85 b1       	in	r24, 0x05	; 5
     56e:	8b 7f       	andi	r24, 0xFB	; 251
     570:	85 b9       	out	0x05, r24	; 5
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	8c 2f       	mov	r24, r28
     576:	cc de       	rcall	.-616    	; 0x310 <getBit>
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	21 f4       	brne	.+8      	; 0x584 <setCgRamAddress+0x94>
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	85 b9       	out	0x05, r24	; 5
     582:	03 c0       	rjmp	.+6      	; 0x58a <setCgRamAddress+0x9a>
     584:	85 b1       	in	r24, 0x05	; 5
     586:	8d 7f       	andi	r24, 0xFD	; 253
     588:	85 b9       	out	0x05, r24	; 5
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	8c 2f       	mov	r24, r28
     58e:	c0 de       	rcall	.-640    	; 0x310 <getBit>
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	21 f4       	brne	.+8      	; 0x59c <setCgRamAddress+0xac>
     594:	85 b1       	in	r24, 0x05	; 5
     596:	81 60       	ori	r24, 0x01	; 1
     598:	85 b9       	out	0x05, r24	; 5
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <setCgRamAddress+0xb2>
     59c:	85 b1       	in	r24, 0x05	; 5
     59e:	8e 7f       	andi	r24, 0xFE	; 254
     5a0:	85 b9       	out	0x05, r24	; 5
     5a2:	8b b1       	in	r24, 0x0b	; 11
     5a4:	80 68       	ori	r24, 0x80	; 128
     5a6:	8b b9       	out	0x0b, r24	; 11
     5a8:	8b b1       	in	r24, 0x0b	; 11
     5aa:	8f 77       	andi	r24, 0x7F	; 127
     5ac:	8b b9       	out	0x0b, r24	; 11
     5ae:	68 e2       	ldi	r22, 0x28	; 40
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <delay_us>
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <sendString_setAdress>:
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
     5c8:	62 30       	cpi	r22, 0x02	; 2
     5ca:	11 f0       	breq	.+4      	; 0x5d0 <sendString_setAdress+0x12>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <sendString_setAdress+0x14>
     5d0:	80 e4       	ldi	r24, 0x40	; 64
     5d2:	48 0f       	add	r20, r24
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	84 0f       	add	r24, r20
     5d8:	80 31       	cpi	r24, 0x10	; 16
     5da:	18 f0       	brcs	.+6      	; 0x5e2 <sendString_setAdress+0x24>
     5dc:	41 54       	subi	r20, 0x41	; 65
     5de:	40 31       	cpi	r20, 0x10	; 16
     5e0:	08 f4       	brcc	.+2      	; 0x5e4 <sendString_setAdress+0x26>
     5e2:	16 df       	rcall	.-468    	; 0x410 <setDdRamAddress>
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <sendString_setAdress+0x30>
     5ea:	9a de       	rcall	.-716    	; 0x320 <sendChar>
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	f8 01       	movw	r30, r16
     5f0:	ec 0f       	add	r30, r28
     5f2:	fd 1f       	adc	r31, r29
     5f4:	80 81       	ld	r24, Z
     5f6:	81 11       	cpse	r24, r1
     5f8:	f8 cf       	rjmp	.-16     	; 0x5ea <sendString_setAdress+0x2c>
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <sendString>:
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	8c 01       	movw	r16, r24
     60e:	c0 e0       	ldi	r28, 0x00	; 0
     610:	d0 e0       	ldi	r29, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <sendString+0x14>
     614:	85 de       	rcall	.-758    	; 0x320 <sendChar>
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	f8 01       	movw	r30, r16
     61a:	ec 0f       	add	r30, r28
     61c:	fd 1f       	adc	r31, r29
     61e:	80 81       	ld	r24, Z
     620:	81 11       	cpse	r24, r1
     622:	f8 cf       	rjmp	.-16     	; 0x614 <sendString+0x10>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <storage_special_characters>:
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	68 97       	sbiw	r28, 0x18	; 24
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	e0 e0       	ldi	r30, 0x00	; 0
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	de 01       	movw	r26, r28
     64e:	11 96       	adiw	r26, 0x01	; 1
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	8a 95       	dec	r24
     656:	e1 f7       	brne	.-8      	; 0x650 <storage_special_characters+0x22>
     658:	88 e0       	ldi	r24, 0x08	; 8
     65a:	e8 e0       	ldi	r30, 0x08	; 8
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	de 01       	movw	r26, r28
     660:	19 96       	adiw	r26, 0x09	; 9
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	8a 95       	dec	r24
     668:	e1 f7       	brne	.-8      	; 0x662 <storage_special_characters+0x34>
     66a:	88 e0       	ldi	r24, 0x08	; 8
     66c:	e0 e1       	ldi	r30, 0x10	; 16
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	de 01       	movw	r26, r28
     672:	51 96       	adiw	r26, 0x11	; 17
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	8a 95       	dec	r24
     67a:	e1 f7       	brne	.-8      	; 0x674 <storage_special_characters+0x46>
     67c:	80 e4       	ldi	r24, 0x40	; 64
     67e:	38 df       	rcall	.-400    	; 0x4f0 <setCgRamAddress>
     680:	00 e0       	ldi	r16, 0x00	; 0
     682:	10 e0       	ldi	r17, 0x00	; 0
     684:	0a c0       	rjmp	.+20     	; 0x69a <storage_special_characters+0x6c>
     686:	e1 e0       	ldi	r30, 0x01	; 1
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ec 0f       	add	r30, r28
     68c:	fd 1f       	adc	r31, r29
     68e:	e0 0f       	add	r30, r16
     690:	f1 1f       	adc	r31, r17
     692:	80 81       	ld	r24, Z
     694:	45 de       	rcall	.-886    	; 0x320 <sendChar>
     696:	0f 5f       	subi	r16, 0xFF	; 255
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	08 30       	cpi	r16, 0x08	; 8
     69c:	11 05       	cpc	r17, r1
     69e:	9c f3       	brlt	.-26     	; 0x686 <storage_special_characters+0x58>
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	0a c0       	rjmp	.+20     	; 0x6ba <storage_special_characters+0x8c>
     6a6:	e9 e0       	ldi	r30, 0x09	; 9
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	e0 0f       	add	r30, r16
     6b0:	f1 1f       	adc	r31, r17
     6b2:	80 81       	ld	r24, Z
     6b4:	35 de       	rcall	.-918    	; 0x320 <sendChar>
     6b6:	0f 5f       	subi	r16, 0xFF	; 255
     6b8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ba:	08 30       	cpi	r16, 0x08	; 8
     6bc:	11 05       	cpc	r17, r1
     6be:	9c f3       	brlt	.-26     	; 0x6a6 <storage_special_characters+0x78>
     6c0:	00 e0       	ldi	r16, 0x00	; 0
     6c2:	10 e0       	ldi	r17, 0x00	; 0
     6c4:	0a c0       	rjmp	.+20     	; 0x6da <storage_special_characters+0xac>
     6c6:	e1 e1       	ldi	r30, 0x11	; 17
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ec 0f       	add	r30, r28
     6cc:	fd 1f       	adc	r31, r29
     6ce:	e0 0f       	add	r30, r16
     6d0:	f1 1f       	adc	r31, r17
     6d2:	80 81       	ld	r24, Z
     6d4:	25 de       	rcall	.-950    	; 0x320 <sendChar>
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	08 30       	cpi	r16, 0x08	; 8
     6dc:	11 05       	cpc	r17, r1
     6de:	9c f3       	brlt	.-26     	; 0x6c6 <storage_special_characters+0x98>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	96 de       	rcall	.-724    	; 0x410 <setDdRamAddress>
     6e4:	68 96       	adiw	r28, 0x18	; 24
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	08 95       	ret

000006fa <getCharacter_AB>:
void strCpy(char* str1, char* str2){
	char i;
	for(i = 0; i < sizeof(str1); i++){
		str1[i] = str2[2];
	}
}
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <getCharacter_AB+0x10>
     6fe:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <get_tecla>
     702:	9f eb       	ldi	r25, 0xBF	; 191
     704:	98 0f       	add	r25, r24
     706:	92 30       	cpi	r25, 0x02	; 2
     708:	20 f0       	brcs	.+8      	; 0x712 <getCharacter_AB+0x18>
     70a:	81 54       	subi	r24, 0x41	; 65
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	b8 f7       	brcc	.-18     	; 0x6fe <getCharacter_AB+0x4>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	08 95       	ret

00000714 <getCharacter_B>:
     714:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <get_tecla>
     718:	82 34       	cpi	r24, 0x42	; 66
     71a:	e1 f7       	brne	.-8      	; 0x714 <getCharacter_B>
     71c:	08 95       	ret

0000071e <valida_eleitor>:
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	ac 97       	sbiw	r28, 0x2c	; 44
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	ac 01       	movw	r20, r24
     738:	8b 01       	movw	r16, r22
     73a:	fe 01       	movw	r30, r28
     73c:	31 96       	adiw	r30, 0x01	; 1
     73e:	88 e0       	ldi	r24, 0x08	; 8
     740:	df 01       	movw	r26, r30
     742:	1d 92       	st	X+, r1
     744:	8a 95       	dec	r24
     746:	e9 f7       	brne	.-6      	; 0x742 <valida_eleitor+0x24>
     748:	85 e5       	ldi	r24, 0x55	; 85
     74a:	89 83       	std	Y+1, r24	; 0x01
     74c:	8e e4       	ldi	r24, 0x4E	; 78
     74e:	8a 83       	std	Y+2, r24	; 0x02
     750:	85 e0       	ldi	r24, 0x05	; 5
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	80 e1       	ldi	r24, 0x10	; 16
     756:	e4 e2       	ldi	r30, 0x24	; 36
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	de 01       	movw	r26, r28
     75c:	19 96       	adiw	r26, 0x09	; 9
     75e:	01 90       	ld	r0, Z+
     760:	0d 92       	st	X+, r0
     762:	8a 95       	dec	r24
     764:	e1 f7       	brne	.-8      	; 0x75e <valida_eleitor+0x40>
     766:	fe 01       	movw	r30, r28
     768:	79 96       	adiw	r30, 0x19	; 25
     76a:	84 e1       	ldi	r24, 0x14	; 20
     76c:	df 01       	movw	r26, r30
     76e:	1d 92       	st	X+, r1
     770:	8a 95       	dec	r24
     772:	e9 f7       	brne	.-6      	; 0x76e <valida_eleitor+0x50>
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	10 c0       	rjmp	.+32     	; 0x798 <valida_eleitor+0x7a>
     778:	29 2f       	mov	r18, r25
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	f9 01       	movw	r30, r18
     77e:	33 96       	adiw	r30, 0x03	; 3
     780:	da 01       	movw	r26, r20
     782:	a2 0f       	add	r26, r18
     784:	b3 1f       	adc	r27, r19
     786:	2c 91       	ld	r18, X
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	6c 0f       	add	r22, r28
     78e:	7d 1f       	adc	r23, r29
     790:	e6 0f       	add	r30, r22
     792:	f7 1f       	adc	r31, r23
     794:	20 83       	st	Z, r18
     796:	9f 5f       	subi	r25, 0xFF	; 255
     798:	95 30       	cpi	r25, 0x05	; 5
     79a:	70 f3       	brcs	.-36     	; 0x778 <valida_eleitor+0x5a>
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <sendSerialMessage>
     7a4:	ce 01       	movw	r24, r28
     7a6:	49 96       	adiw	r24, 0x19	; 25
     7a8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <getSerialMessage>
     7ac:	89 8d       	ldd	r24, Y+25	; 0x19
     7ae:	8d 34       	cpi	r24, 0x4D	; 77
     7b0:	31 f5       	brne	.+76     	; 0x7fe <valida_eleitor+0xe0>
     7b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7b4:	8e 34       	cpi	r24, 0x4E	; 78
     7b6:	29 f5       	brne	.+74     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	19 c0       	rjmp	.+50     	; 0x7f0 <valida_eleitor+0xd2>
     7be:	82 2f       	mov	r24, r18
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	d8 01       	movw	r26, r16
     7c4:	a8 0f       	add	r26, r24
     7c6:	b9 1f       	adc	r27, r25
     7c8:	fc 01       	movw	r30, r24
     7ca:	33 96       	adiw	r30, 0x03	; 3
     7cc:	69 e1       	ldi	r22, 0x19	; 25
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	6c 0f       	add	r22, r28
     7d2:	7d 1f       	adc	r23, r29
     7d4:	e6 0f       	add	r30, r22
     7d6:	f7 1f       	adc	r31, r23
     7d8:	30 81       	ld	r19, Z
     7da:	3c 93       	st	X, r19
     7dc:	e9 e0       	ldi	r30, 0x09	; 9
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ec 0f       	add	r30, r28
     7e2:	fd 1f       	adc	r31, r29
     7e4:	e8 0f       	add	r30, r24
     7e6:	f9 1f       	adc	r31, r25
     7e8:	80 81       	ld	r24, Z
     7ea:	38 13       	cpse	r19, r24
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	2f 5f       	subi	r18, 0xFF	; 255
     7f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7f2:	28 17       	cp	r18, r24
     7f4:	20 f3       	brcs	.-56     	; 0x7be <valida_eleitor+0xa0>
     7f6:	44 23       	and	r20, r20
     7f8:	31 f0       	breq	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	03 c0       	rjmp	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	01 c0       	rjmp	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	ac 96       	adiw	r28, 0x2c	; 44
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <print_erroComunicacao>:
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	84 e3       	ldi	r24, 0x34	; 52
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	cb de       	rcall	.-618    	; 0x5be <sendString_setAdress>
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	85 e4       	ldi	r24, 0x45	; 69
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	c6 ce       	rjmp	.-628    	; 0x5be <sendString_setAdress>
     832:	08 95       	ret

00000834 <print_optionsVotacao>:
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	84 e5       	ldi	r24, 0x54	; 84
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	c0 de       	rcall	.-640    	; 0x5be <sendString_setAdress>
     83e:	82 e4       	ldi	r24, 0x42	; 66
     840:	e7 dd       	rcall	.-1074   	; 0x410 <setDdRamAddress>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	6d dd       	rcall	.-1318   	; 0x320 <sendChar>
     846:	8e e4       	ldi	r24, 0x4E	; 78
     848:	e3 dd       	rcall	.-1082   	; 0x410 <setDdRamAddress>
     84a:	8f e7       	ldi	r24, 0x7F	; 127
     84c:	69 cd       	rjmp	.-1326   	; 0x320 <sendChar>
     84e:	08 95       	ret

00000850 <cleanString>:

void cleanString(char* string){
     850:	9c 01       	movw	r18, r24
	char i;
	for(i = 0; i < sizeof(string); i++){
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	05 c0       	rjmp	.+10     	; 0x860 <cleanString+0x10>
		string[i] = 0;
     856:	f9 01       	movw	r30, r18
     858:	e9 0f       	add	r30, r25
     85a:	f1 1d       	adc	r31, r1
     85c:	10 82       	st	Z, r1
	}
}

void cleanString(char* string){
	char i;
	for(i = 0; i < sizeof(string); i++){
     85e:	9f 5f       	subi	r25, 0xFF	; 255
     860:	92 30       	cpi	r25, 0x02	; 2
     862:	c8 f3       	brcs	.-14     	; 0x856 <cleanString+0x6>
		string[i] = 0;
	}
     864:	08 95       	ret

00000866 <votacao>:
}

// Processo de votacao ------------------------------------------------------------------------------------------------------------
// ATRIBUIR NOMES E VALORES PARA A STRUCT RELATÓRIO, ATUALIZAR VOTOS E NUMERO DE VOTOS
// IMPLEMENTAR SAÍDA POR TIMEOUT
char votacao(RELATORIO* relatorio){
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	c3 57       	subi	r28, 0x73	; 115
     876:	d1 09       	sbc	r29, r1
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
	char depFederal_numero[5] = {0,0,0,0,0};
     882:	fe 01       	movw	r30, r28
     884:	31 96       	adiw	r30, 0x01	; 1
     886:	85 e0       	ldi	r24, 0x05	; 5
     888:	df 01       	movw	r26, r30
     88a:	1d 92       	st	X+, r1
     88c:	8a 95       	dec	r24
     88e:	e9 f7       	brne	.-6      	; 0x88a <votacao+0x24>
	char depFederal_nome[17] = {0};
     890:	81 e1       	ldi	r24, 0x11	; 17
     892:	35 96       	adiw	r30, 0x05	; 5
     894:	df 01       	movw	r26, r30
     896:	68 2f       	mov	r22, r24
     898:	1d 92       	st	X+, r1
     89a:	6a 95       	dec	r22
     89c:	e9 f7       	brne	.-6      	; 0x898 <votacao+0x32>
	char senador_numero[3] = {0,0,0};
     89e:	1f 8a       	std	Y+23, r1	; 0x17
     8a0:	18 8e       	std	Y+24, r1	; 0x18
     8a2:	19 8e       	std	Y+25, r1	; 0x19
	char senador_nome[17] = {0};
     8a4:	74 96       	adiw	r30, 0x14	; 20
     8a6:	df 01       	movw	r26, r30
     8a8:	68 2f       	mov	r22, r24
     8aa:	1d 92       	st	X+, r1
     8ac:	6a 95       	dec	r22
     8ae:	e9 f7       	brne	.-6      	; 0x8aa <votacao+0x44>
	char presidente_numero[3]  = {0,0,'\0'};
     8b0:	1b a6       	std	Y+43, r1	; 0x2b
     8b2:	1c a6       	std	Y+44, r1	; 0x2c
     8b4:	1d a6       	std	Y+45, r1	; 0x2d
	char presidente_nome[17] = {0};
     8b6:	74 96       	adiw	r30, 0x14	; 20
     8b8:	df 01       	movw	r26, r30
     8ba:	1d 92       	st	X+, r1
     8bc:	8a 95       	dec	r24
     8be:	e9 f7       	brne	.-6      	; 0x8ba <votacao+0x54>
	char tecla = 0;
	char input_caracters_counter = 0;
	
	// Início do processo de votação
	sendSerialChar('U'); sendSerialChar('I'); 
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <sendSerialChar>
     8c6:	89 e4       	ldi	r24, 0x49	; 73
     8c8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <sendSerialChar>
	char response[50] = {0};
     8cc:	ce 01       	movw	r24, r28
     8ce:	cf 96       	adiw	r24, 0x3f	; 63
     8d0:	22 e3       	ldi	r18, 0x32	; 50
     8d2:	fc 01       	movw	r30, r24
     8d4:	11 92       	st	Z+, r1
     8d6:	2a 95       	dec	r18
     8d8:	e9 f7       	brne	.-6      	; 0x8d4 <votacao+0x6e>
	getSerialMessage(response);
     8da:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <getSerialMessage>
	
	if(response[0] != 'M' || response[1] != 'I'){
     8de:	8f ad       	ldd	r24, Y+63	; 0x3f
     8e0:	8d 34       	cpi	r24, 0x4D	; 77
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <votacao+0x80>
     8e4:	5a c2       	rjmp	.+1204   	; 0xd9a <__stack+0x49b>
     8e6:	21 96       	adiw	r28, 0x01	; 1
     8e8:	8f ad       	ldd	r24, Y+63	; 0x3f
     8ea:	21 97       	sbiw	r28, 0x01	; 1
     8ec:	89 34       	cpi	r24, 0x49	; 73
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <votacao+0x8c>
     8f0:	56 c2       	rjmp	.+1196   	; 0xd9e <__stack+0x49f>
		return ERRO_COMUNICACAO;
	}
	
	// Votação Dep. Federal:
	sendString_setAdress("Dep Federal:    ", 1, 1);
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	85 e6       	ldi	r24, 0x65	; 101
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	61 de       	rcall	.-830    	; 0x5be <sendString_setAdress>
	print_optionsVotacao();
     8fc:	9b df       	rcall	.-202    	; 0x834 <print_optionsVotacao>
     8fe:	ce 01       	movw	r24, r28
	input_caracters_counter = 0;
	cleanString(response);
     900:	cf 96       	adiw	r24, 0x3f	; 63
     902:	a6 df       	rcall	.-180    	; 0x850 <cleanString>
	}
	
	// Votação Dep. Federal:
	sendString_setAdress("Dep Federal:    ", 1, 1);
	print_optionsVotacao();
	input_caracters_counter = 0;
     904:	00 e0       	ldi	r16, 0x00	; 0
	cleanString(response);
	do{
		tecla = get_tecla();
     906:	e8 d7       	rcall	.+4048   	; 0x18d8 <get_tecla>
     908:	18 2f       	mov	r17, r24
     90a:	8f eb       	ldi	r24, 0xBF	; 191
		// Se a tecla for A, ou B, vota
		if(tecla == 'A' || tecla == 'B'){
     90c:	81 0f       	add	r24, r17
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	08 f0       	brcs	.+2      	; 0x914 <__stack+0x15>
     912:	8e c0       	rjmp	.+284    	; 0xa30 <__stack+0x131>
     914:	11 34       	cpi	r17, 0x41	; 65
			// Se não votou em branco
			if(tecla == 'A'){
     916:	69 f4       	brne	.+26     	; 0x932 <__stack+0x33>
     918:	03 30       	cpi	r16, 0x03	; 3
				// Se o usuário digitou 1 ou 3 caracteres, voto nulo
				if(input_caracters_counter == 3 || input_caracters_counter == 1 || input_caracters_counter == 0){
     91a:	21 f0       	breq	.+8      	; 0x924 <__stack+0x25>
     91c:	01 30       	cpi	r16, 0x01	; 1
     91e:	11 f0       	breq	.+4      	; 0x924 <__stack+0x25>
     920:	01 11       	cpse	r16, r1
     922:	0f c0       	rjmp	.+30     	; 0x942 <__stack+0x43>
     924:	89 e3       	ldi	r24, 0x39	; 57
					input_caracters_counter = 2;
					depFederal_numero[0] = '9';
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	8a 83       	std	Y+2, r24	; 0x02
					depFederal_numero[1] = '9';
     92a:	1b 82       	std	Y+3, r1	; 0x03
					depFederal_numero[2] = 0;
     92c:	1c 82       	std	Y+4, r1	; 0x04
					depFederal_numero[3] = 0;
     92e:	02 e0       	ldi	r16, 0x02	; 2
		if(tecla == 'A' || tecla == 'B'){
			// Se não votou em branco
			if(tecla == 'A'){
				// Se o usuário digitou 1 ou 3 caracteres, voto nulo
				if(input_caracters_counter == 3 || input_caracters_counter == 1 || input_caracters_counter == 0){
					input_caracters_counter = 2;
     930:	08 c0       	rjmp	.+16     	; 0x942 <__stack+0x43>
     932:	12 34       	cpi	r17, 0x42	; 66
					depFederal_numero[2] = 0;
					depFederal_numero[3] = 0;
				}
			}
			// Se votou em branco
			else if(tecla == 'B'){ 
     934:	31 f4       	brne	.+12     	; 0x942 <__stack+0x43>
     936:	80 e3       	ldi	r24, 0x30	; 48
				input_caracters_counter = 2;
				depFederal_numero[0] = '0';
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	8a 83       	std	Y+2, r24	; 0x02
				depFederal_numero[1] = '0';
     93c:	1b 82       	std	Y+3, r1	; 0x03
				depFederal_numero[2] = 0;
     93e:	1c 82       	std	Y+4, r1	; 0x04
				depFederal_numero[3] = 0;
     940:	02 e0       	ldi	r16, 0x02	; 2
					depFederal_numero[3] = 0;
				}
			}
			// Se votou em branco
			else if(tecla == 'B'){ 
				input_caracters_counter = 2;
     942:	85 e5       	ldi	r24, 0x55	; 85
				depFederal_numero[3] = 0;
			}

			char depFederal_numero_bkp[3];
			// Realiza comunicação serial
			sendSerialChar('U'); sendSerialChar('F');
     944:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <sendSerialChar>
     948:	86 e4       	ldi	r24, 0x46	; 70
     94a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <sendSerialChar>
     94e:	80 2f       	mov	r24, r16
			sendSerialChar(input_caracters_counter);
     950:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <sendSerialChar>
     954:	02 30       	cpi	r16, 0x02	; 2
			if(input_caracters_counter == 2){
     956:	89 f4       	brne	.+34     	; 0x97a <__stack+0x7b>
     958:	89 81       	ldd	r24, Y+1	; 0x01
				depFederal_numero_bkp[0] = depFederal_numero[0];
     95a:	e2 96       	adiw	r28, 0x32	; 50
     95c:	8f af       	std	Y+63, r24	; 0x3f
     95e:	e2 97       	sbiw	r28, 0x32	; 50
     960:	8a 81       	ldd	r24, Y+2	; 0x02
				depFederal_numero_bkp[1] = depFederal_numero[1];
     962:	e3 96       	adiw	r28, 0x33	; 51
     964:	8f af       	std	Y+63, r24	; 0x3f
     966:	e3 97       	sbiw	r28, 0x33	; 51
     968:	e4 96       	adiw	r28, 0x34	; 52
				depFederal_numero_bkp[2] = 0;
     96a:	1f ae       	std	Y+63, r1	; 0x3f
     96c:	e4 97       	sbiw	r28, 0x34	; 52
     96e:	ce 01       	movw	r24, r28
				sendSerialMessage(depFederal_numero_bkp);
     970:	8f 58       	subi	r24, 0x8F	; 143
     972:	9f 4f       	sbci	r25, 0xFF	; 255
     974:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <sendSerialMessage>
     978:	04 c0       	rjmp	.+8      	; 0x982 <__stack+0x83>
     97a:	ce 01       	movw	r24, r28
			}else {
				sendSerialMessage(depFederal_numero);
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <sendSerialMessage>
     982:	ce 01       	movw	r24, r28
			}
			getSerialMessage(response);
     984:	cf 96       	adiw	r24, 0x3f	; 63
     986:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <getSerialMessage>
     98a:	8f ad       	ldd	r24, Y+63	; 0x3f
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'F'){
     98c:	8d 34       	cpi	r24, 0x4D	; 77
     98e:	29 f4       	brne	.+10     	; 0x99a <__stack+0x9b>
     990:	21 96       	adiw	r28, 0x01	; 1
     992:	8f ad       	ldd	r24, Y+63	; 0x3f
     994:	21 97       	sbiw	r28, 0x01	; 1
     996:	86 34       	cpi	r24, 0x46	; 70
     998:	11 f0       	breq	.+4      	; 0x99e <__stack+0x9f>
     99a:	8f ef       	ldi	r24, 0xFF	; 255
				return ERRO_COMUNICACAO;
     99c:	09 c2       	rjmp	.+1042   	; 0xdb0 <__stack+0x4b1>
     99e:	de 01       	movw	r26, r28
			}
			
			// Obtém nome do candidato através da reposta serial
			char i, a = strlen(response);
     9a0:	df 96       	adiw	r26, 0x3f	; 63
     9a2:	fd 01       	movw	r30, r26
     9a4:	01 90       	ld	r0, Z+
     9a6:	00 20       	and	r0, r0
     9a8:	e9 f7       	brne	.-6      	; 0x9a4 <__stack+0xa5>
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	4e 2f       	mov	r20, r30
     9ae:	4a 1b       	sub	r20, r26
     9b0:	20 e0       	ldi	r18, 0x00	; 0
			for(i = 0; i < a; i++){
     9b2:	13 c0       	rjmp	.+38     	; 0x9da <__stack+0xdb>
     9b4:	82 2f       	mov	r24, r18
				depFederal_nome[i] = response[3 + i];
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	fc 01       	movw	r30, r24
     9ba:	33 96       	adiw	r30, 0x03	; 3
     9bc:	6f e3       	ldi	r22, 0x3F	; 63
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	6c 0f       	add	r22, r28
     9c2:	7d 1f       	adc	r23, r29
     9c4:	e6 0f       	add	r30, r22
     9c6:	f7 1f       	adc	r31, r23
     9c8:	30 81       	ld	r19, Z
     9ca:	e6 e0       	ldi	r30, 0x06	; 6
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ec 0f       	add	r30, r28
     9d0:	fd 1f       	adc	r31, r29
     9d2:	e8 0f       	add	r30, r24
     9d4:	f9 1f       	adc	r31, r25
     9d6:	30 83       	st	Z, r19
     9d8:	2f 5f       	subi	r18, 0xFF	; 255
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			char i, a = strlen(response);
			for(i = 0; i < a; i++){
     9da:	24 17       	cp	r18, r20
     9dc:	58 f3       	brcs	.-42     	; 0x9b4 <__stack+0xb5>
     9de:	41 e0       	ldi	r20, 0x01	; 1
				depFederal_nome[i] = response[3 + i];
			}
			
			// Pede cofirmação do usuário
			sendString_setAdress("                ", 1, 1);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	86 e7       	ldi	r24, 0x76	; 118
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	eb dd       	rcall	.-1066   	; 0x5be <sendString_setAdress>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
			sendString_setAdress(depFederal_nome, 1, 1);
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	ce 01       	movw	r24, r28
     9ee:	06 96       	adiw	r24, 0x06	; 6
     9f0:	e6 dd       	rcall	.-1076   	; 0x5be <sendString_setAdress>
     9f2:	41 e0       	ldi	r20, 0x01	; 1
			sendString_setAdress("Confirma?  ", 2, 1);
     9f4:	62 e0       	ldi	r22, 0x02	; 2
     9f6:	87 e8       	ldi	r24, 0x87	; 135
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	e1 dd       	rcall	.-1086   	; 0x5be <sendString_setAdress>
			sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 dc       	rcall	.-1760   	; 0x320 <sendChar>
     a00:	83 e9       	ldi	r24, 0x93	; 147
     a02:	91 e0       	ldi	r25, 0x01	; 1
			sendChar(RETURN_CHARACTER); sendChar('B');
     a04:	ff dd       	rcall	.-1026   	; 0x604 <sendString>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	8b dc       	rcall	.-1770   	; 0x320 <sendChar>
     a0a:	82 e4       	ldi	r24, 0x42	; 66
     a0c:	89 dc       	rcall	.-1774   	; 0x320 <sendChar>
			tecla = getCharacter_AB();
     a0e:	75 de       	rcall	.-790    	; 0x6fa <getCharacter_AB>
     a10:	18 2f       	mov	r17, r24
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
     a12:	82 34       	cpi	r24, 0x42	; 66
     a14:	09 f0       	breq	.+2      	; 0xa18 <__stack+0x119>
				input_caracters_counter = 0;
				tecla = 0;
				sendString_setAdress("Dep Federal:    ", 1, 1);
     a16:	3c c0       	rjmp	.+120    	; 0xa90 <__stack+0x191>
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	85 e6       	ldi	r24, 0x65	; 101
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	ce dd       	rcall	.-1124   	; 0x5be <sendString_setAdress>
				print_optionsVotacao();
     a22:	08 df       	rcall	.-496    	; 0x834 <print_optionsVotacao>
     a24:	ce 01       	movw	r24, r28
				cleanString(response);
     a26:	cf 96       	adiw	r24, 0x3f	; 63
     a28:	13 df       	rcall	.-474    	; 0x850 <cleanString>
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
			sendChar(RETURN_CHARACTER); sendChar('B');
			tecla = getCharacter_AB();
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
				input_caracters_counter = 0;
     a2e:	30 c0       	rjmp	.+96     	; 0xa90 <__stack+0x191>
				tecla = 0;
     a30:	13 34       	cpi	r17, 0x43	; 67
     a32:	99 f4       	brne	.+38     	; 0xa5a <__stack+0x15b>
				cleanString(response);
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
     a34:	00 23       	and	r16, r16
     a36:	89 f0       	breq	.+34     	; 0xa5a <__stack+0x15b>
     a38:	ff 24       	eor	r15, r15
			input_caracters_counter--;
     a3a:	fa 94       	dec	r15
     a3c:	f0 0e       	add	r15, r16
			depFederal_numero[input_caracters_counter] = 0;
     a3e:	e1 e0       	ldi	r30, 0x01	; 1
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ec 0f       	add	r30, r28
     a44:	fd 1f       	adc	r31, r29
     a46:	ef 0d       	add	r30, r15
     a48:	f1 1d       	adc	r31, r1
     a4a:	10 82       	st	Z, r1
			setDdRamAddress(12 + input_caracters_counter);
     a4c:	8b e0       	ldi	r24, 0x0B	; 11
     a4e:	80 0f       	add	r24, r16
     a50:	df dc       	rcall	.-1602   	; 0x410 <setDdRamAddress>
     a52:	80 e2       	ldi	r24, 0x20	; 32
			sendChar(' ');
     a54:	65 dc       	rcall	.-1846   	; 0x320 <sendChar>
     a56:	0f 2d       	mov	r16, r15
     a58:	1b c0       	rjmp	.+54     	; 0xa90 <__stack+0x191>
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
			input_caracters_counter--;
     a5a:	13 32       	cpi	r17, 0x23	; 35
			depFederal_numero[input_caracters_counter] = 0;
			setDdRamAddress(12 + input_caracters_counter);
			sendChar(' ');
     a5c:	c9 f0       	breq	.+50     	; 0xa90 <__stack+0x191>
		}
		// Se foi um caractere numérico, o insere
		else if(tecla != '#' && tecla != '*' && tecla != 'D' && tecla != 'B' && tecla != 'C' && tecla != 'A' && input_caracters_counter < 4){
     a5e:	1a 32       	cpi	r17, 0x2A	; 42
     a60:	b9 f0       	breq	.+46     	; 0xa90 <__stack+0x191>
     a62:	14 34       	cpi	r17, 0x44	; 68
     a64:	a9 f0       	breq	.+42     	; 0xa90 <__stack+0x191>
     a66:	12 34       	cpi	r17, 0x42	; 66
     a68:	99 f0       	breq	.+38     	; 0xa90 <__stack+0x191>
     a6a:	13 34       	cpi	r17, 0x43	; 67
     a6c:	89 f0       	breq	.+34     	; 0xa90 <__stack+0x191>
     a6e:	11 34       	cpi	r17, 0x41	; 65
     a70:	79 f0       	breq	.+30     	; 0xa90 <__stack+0x191>
     a72:	04 30       	cpi	r16, 0x04	; 4
     a74:	68 f4       	brcc	.+26     	; 0xa90 <__stack+0x191>
			setDdRamAddress(12 + input_caracters_counter);
     a76:	8c e0       	ldi	r24, 0x0C	; 12
     a78:	80 0f       	add	r24, r16
     a7a:	ca dc       	rcall	.-1644   	; 0x410 <setDdRamAddress>
     a7c:	e1 e0       	ldi	r30, 0x01	; 1
			depFederal_numero[input_caracters_counter] = tecla;
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	ec 0f       	add	r30, r28
     a82:	fd 1f       	adc	r31, r29
     a84:	e0 0f       	add	r30, r16
     a86:	f1 1d       	adc	r31, r1
			input_caracters_counter++;
			sendChar(tecla);
     a88:	10 83       	st	Z, r17
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	81 2f       	mov	r24, r17
		}
	} while(tecla != 'A' && tecla != 'B');
     a8e:	48 dc       	rcall	.-1904   	; 0x320 <sendChar>
     a90:	11 54       	subi	r17, 0x41	; 65
     a92:	12 30       	cpi	r17, 0x02	; 2
     a94:	08 f0       	brcs	.+2      	; 0xa98 <__stack+0x199>
	
	
	// Votação senador
	sendString_setAdress("Senador:        ", 1, 1);
     a96:	37 cf       	rjmp	.-402    	; 0x906 <__stack+0x7>
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	86 e9       	ldi	r24, 0x96	; 150
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	8e dd       	rcall	.-1252   	; 0x5be <sendString_setAdress>
	print_optionsVotacao();
     aa2:	c8 de       	rcall	.-624    	; 0x834 <print_optionsVotacao>
     aa4:	ce 01       	movw	r24, r28
	input_caracters_counter = 0;
	cleanString(response);
     aa6:	cf 96       	adiw	r24, 0x3f	; 63
     aa8:	d3 de       	rcall	.-602    	; 0x850 <cleanString>
     aaa:	00 e0       	ldi	r16, 0x00	; 0
     aac:	15 d7       	rcall	.+3626   	; 0x18d8 <get_tecla>
	
	
	// Votação senador
	sendString_setAdress("Senador:        ", 1, 1);
	print_optionsVotacao();
	input_caracters_counter = 0;
     aae:	18 2f       	mov	r17, r24
	cleanString(response);
	do{
		tecla = get_tecla();
     ab0:	8f eb       	ldi	r24, 0xBF	; 191
     ab2:	81 0f       	add	r24, r17
		
		if(tecla == 'A' || tecla == 'B'){
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	08 f0       	brcs	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	6e c0       	rjmp	.+220    	; 0xb96 <__stack+0x297>
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
     aba:	11 34       	cpi	r17, 0x41	; 65
     abc:	39 f4       	brne	.+14     	; 0xacc <__stack+0x1cd>
     abe:	02 30       	cpi	r16, 0x02	; 2
				input_caracters_counter = 2;
				senador_numero[0] = '9';
     ac0:	28 f4       	brcc	.+10     	; 0xacc <__stack+0x1cd>
				senador_numero[1] = '9';
     ac2:	89 e3       	ldi	r24, 0x39	; 57
		tecla = get_tecla();
		
		if(tecla == 'A' || tecla == 'B'){
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
				input_caracters_counter = 2;
     ac4:	8f 8b       	std	Y+23, r24	; 0x17
				senador_numero[0] = '9';
				senador_numero[1] = '9';
     ac6:	88 8f       	std	Y+24, r24	; 0x18
			}
			else if(tecla == 'B'){
     ac8:	02 e0       	ldi	r16, 0x02	; 2
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <__stack+0x1d9>
				input_caracters_counter = 2;
				senador_numero[0] = '0';
     acc:	12 34       	cpi	r17, 0x42	; 66
     ace:	21 f4       	brne	.+8      	; 0xad8 <__stack+0x1d9>
				senador_numero[1] = '0';
     ad0:	80 e3       	ldi	r24, 0x30	; 48
				input_caracters_counter = 2;
				senador_numero[0] = '9';
				senador_numero[1] = '9';
			}
			else if(tecla == 'B'){
				input_caracters_counter = 2;
     ad2:	8f 8b       	std	Y+23, r24	; 0x17
				senador_numero[0] = '0';
				senador_numero[1] = '0';
			}
			
			// Realiza comunicação serial
			sendSerialChar('U'); sendSerialChar('S');
     ad4:	88 8f       	std	Y+24, r24	; 0x18
     ad6:	02 e0       	ldi	r16, 0x02	; 2
     ad8:	85 e5       	ldi	r24, 0x55	; 85
     ada:	87 d7       	rcall	.+3854   	; 0x19ea <sendSerialChar>
     adc:	83 e5       	ldi	r24, 0x53	; 83
     ade:	85 d7       	rcall	.+3850   	; 0x19ea <sendSerialChar>
			sendSerialChar(input_caracters_counter);
     ae0:	80 2f       	mov	r24, r16
     ae2:	83 d7       	rcall	.+3846   	; 0x19ea <sendSerialChar>
     ae4:	ce 01       	movw	r24, r28
			sendSerialMessage(senador_numero);
     ae6:	47 96       	adiw	r24, 0x17	; 23
     ae8:	dc d7       	rcall	.+4024   	; 0x1aa2 <sendSerialMessage>
     aea:	ce 01       	movw	r24, r28
     aec:	cf 96       	adiw	r24, 0x3f	; 63
			getSerialMessage(response);
     aee:	84 d7       	rcall	.+3848   	; 0x19f8 <getSerialMessage>
     af0:	8f ad       	ldd	r24, Y+63	; 0x3f
     af2:	8d 34       	cpi	r24, 0x4D	; 77
     af4:	09 f0       	breq	.+2      	; 0xaf8 <__stack+0x1f9>
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'S'){
     af6:	55 c1       	rjmp	.+682    	; 0xda2 <__stack+0x4a3>
     af8:	21 96       	adiw	r28, 0x01	; 1
     afa:	8f ad       	ldd	r24, Y+63	; 0x3f
     afc:	21 97       	sbiw	r28, 0x01	; 1
     afe:	83 35       	cpi	r24, 0x53	; 83
     b00:	09 f0       	breq	.+2      	; 0xb04 <__stack+0x205>
     b02:	51 c1       	rjmp	.+674    	; 0xda6 <__stack+0x4a7>
     b04:	de 01       	movw	r26, r28
     b06:	df 96       	adiw	r26, 0x3f	; 63
     b08:	fd 01       	movw	r30, r26
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			char i, a = strlen(response);
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <__stack+0x20b>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	4e 2f       	mov	r20, r30
     b14:	4a 1b       	sub	r20, r26
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	13 c0       	rjmp	.+38     	; 0xb40 <__stack+0x241>
     b1a:	82 2f       	mov	r24, r18
			for(i = 0; i < a; i++){
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
				senador_nome[i] = response[3 + i];
     b20:	33 96       	adiw	r30, 0x03	; 3
     b22:	af e3       	ldi	r26, 0x3F	; 63
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	ac 0f       	add	r26, r28
     b28:	bd 1f       	adc	r27, r29
     b2a:	ea 0f       	add	r30, r26
     b2c:	fb 1f       	adc	r31, r27
     b2e:	30 81       	ld	r19, Z
     b30:	ea e1       	ldi	r30, 0x1A	; 26
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	ec 0f       	add	r30, r28
     b36:	fd 1f       	adc	r31, r29
     b38:	e8 0f       	add	r30, r24
     b3a:	f9 1f       	adc	r31, r25
     b3c:	30 83       	st	Z, r19
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			char i, a = strlen(response);
			for(i = 0; i < a; i++){
     b3e:	2f 5f       	subi	r18, 0xFF	; 255
				senador_nome[i] = response[3 + i];
			}
			
			// Pede cofirmação do usuário
			sendString_setAdress("                ", 1, 1);
     b40:	24 17       	cp	r18, r20
     b42:	58 f3       	brcs	.-42     	; 0xb1a <__stack+0x21b>
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	61 e0       	ldi	r22, 0x01	; 1
			sendString_setAdress(senador_nome, 1, 1);
     b48:	86 e7       	ldi	r24, 0x76	; 118
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	38 dd       	rcall	.-1424   	; 0x5be <sendString_setAdress>
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	61 e0       	ldi	r22, 0x01	; 1
			sendString_setAdress("Confirma?  ", 2, 1);
     b52:	ce 01       	movw	r24, r28
     b54:	4a 96       	adiw	r24, 0x1a	; 26
     b56:	33 dd       	rcall	.-1434   	; 0x5be <sendString_setAdress>
     b58:	41 e0       	ldi	r20, 0x01	; 1
			sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	87 e8       	ldi	r24, 0x87	; 135
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	2e dd       	rcall	.-1444   	; 0x5be <sendString_setAdress>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	dd db       	rcall	.-2118   	; 0x320 <sendChar>
     b66:	83 e9       	ldi	r24, 0x93	; 147
			sendChar(RETURN_CHARACTER); sendChar('B');
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	4c dd       	rcall	.-1384   	; 0x604 <sendString>
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	d8 db       	rcall	.-2128   	; 0x320 <sendChar>
     b70:	82 e4       	ldi	r24, 0x42	; 66
     b72:	d6 db       	rcall	.-2132   	; 0x320 <sendChar>
			tecla = getCharacter_AB();
     b74:	c2 dd       	rcall	.-1148   	; 0x6fa <getCharacter_AB>
     b76:	18 2f       	mov	r17, r24
     b78:	82 34       	cpi	r24, 0x42	; 66
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
     b7a:	09 f0       	breq	.+2      	; 0xb7e <__stack+0x27f>
     b7c:	3c c0       	rjmp	.+120    	; 0xbf6 <__stack+0x2f7>
				input_caracters_counter = 0;
				tecla = 0;
				sendString_setAdress("Senador:        ", 1, 1);
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	86 e9       	ldi	r24, 0x96	; 150
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	1b dd       	rcall	.-1482   	; 0x5be <sendString_setAdress>
				print_optionsVotacao();
     b88:	55 de       	rcall	.-854    	; 0x834 <print_optionsVotacao>
     b8a:	ce 01       	movw	r24, r28
				cleanString(response);
     b8c:	cf 96       	adiw	r24, 0x3f	; 63
     b8e:	60 de       	rcall	.-832    	; 0x850 <cleanString>
     b90:	00 e0       	ldi	r16, 0x00	; 0
     b92:	10 e0       	ldi	r17, 0x00	; 0
			sendChar(RETURN_CHARACTER); sendChar('B');
			tecla = getCharacter_AB();
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
				input_caracters_counter = 0;
     b94:	30 c0       	rjmp	.+96     	; 0xbf6 <__stack+0x2f7>
				tecla = 0;
     b96:	13 34       	cpi	r17, 0x43	; 67
     b98:	99 f4       	brne	.+38     	; 0xbc0 <__stack+0x2c1>
				cleanString(response);
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
     b9a:	00 23       	and	r16, r16
     b9c:	89 f0       	breq	.+34     	; 0xbc0 <__stack+0x2c1>
     b9e:	ff 24       	eor	r15, r15
     ba0:	fa 94       	dec	r15
			input_caracters_counter--;
     ba2:	f0 0e       	add	r15, r16
     ba4:	e7 e1       	ldi	r30, 0x17	; 23
			senador_numero[input_caracters_counter] = 0;
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	ef 0d       	add	r30, r15
     bae:	f1 1d       	adc	r31, r1
     bb0:	10 82       	st	Z, r1
     bb2:	87 e0       	ldi	r24, 0x07	; 7
			setDdRamAddress(8 + input_caracters_counter);
     bb4:	80 0f       	add	r24, r16
     bb6:	2c dc       	rcall	.-1960   	; 0x410 <setDdRamAddress>
     bb8:	80 e2       	ldi	r24, 0x20	; 32
			sendChar(' ');
     bba:	b2 db       	rcall	.-2204   	; 0x320 <sendChar>
     bbc:	0f 2d       	mov	r16, r15
     bbe:	1b c0       	rjmp	.+54     	; 0xbf6 <__stack+0x2f7>
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
			input_caracters_counter--;
     bc0:	13 32       	cpi	r17, 0x23	; 35
			senador_numero[input_caracters_counter] = 0;
			setDdRamAddress(8 + input_caracters_counter);
			sendChar(' ');
     bc2:	c9 f0       	breq	.+50     	; 0xbf6 <__stack+0x2f7>
		}
		// Se foi um caractere numérico, o insere
		else if(tecla != '#' && tecla != '*' && tecla != 'D' && tecla != 'B' && tecla != 'C' && tecla != 'A' && input_caracters_counter < 2){
     bc4:	1a 32       	cpi	r17, 0x2A	; 42
     bc6:	b9 f0       	breq	.+46     	; 0xbf6 <__stack+0x2f7>
     bc8:	14 34       	cpi	r17, 0x44	; 68
     bca:	a9 f0       	breq	.+42     	; 0xbf6 <__stack+0x2f7>
     bcc:	12 34       	cpi	r17, 0x42	; 66
     bce:	99 f0       	breq	.+38     	; 0xbf6 <__stack+0x2f7>
     bd0:	13 34       	cpi	r17, 0x43	; 67
     bd2:	89 f0       	breq	.+34     	; 0xbf6 <__stack+0x2f7>
     bd4:	11 34       	cpi	r17, 0x41	; 65
     bd6:	79 f0       	breq	.+30     	; 0xbf6 <__stack+0x2f7>
     bd8:	02 30       	cpi	r16, 0x02	; 2
			setDdRamAddress(8 + input_caracters_counter);
     bda:	68 f4       	brcc	.+26     	; 0xbf6 <__stack+0x2f7>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	80 0f       	add	r24, r16
     be0:	17 dc       	rcall	.-2002   	; 0x410 <setDdRamAddress>
			senador_numero[input_caracters_counter] = tecla;
     be2:	e7 e1       	ldi	r30, 0x17	; 23
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ec 0f       	add	r30, r28
     be8:	fd 1f       	adc	r31, r29
     bea:	e0 0f       	add	r30, r16
     bec:	f1 1d       	adc	r31, r1
     bee:	10 83       	st	Z, r17
			input_caracters_counter++;
     bf0:	0f 5f       	subi	r16, 0xFF	; 255
			sendChar(tecla);
     bf2:	81 2f       	mov	r24, r17
     bf4:	95 db       	rcall	.-2262   	; 0x320 <sendChar>
     bf6:	11 54       	subi	r17, 0x41	; 65
		}
		
		
	} while(tecla != 'A' && tecla != 'B');
     bf8:	12 30       	cpi	r17, 0x02	; 2
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <__stack+0x2ff>
	
	// Votação para presidente
	sendString_setAdress("Presidente:     ", 1, 1);
     bfc:	57 cf       	rjmp	.-338    	; 0xaac <__stack+0x1ad>
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	87 ea       	ldi	r24, 0xA7	; 167
     c04:	91 e0       	ldi	r25, 0x01	; 1
	print_optionsVotacao();
     c06:	db dc       	rcall	.-1610   	; 0x5be <sendString_setAdress>
	input_caracters_counter = 0;
	cleanString(response);
     c08:	15 de       	rcall	.-982    	; 0x834 <print_optionsVotacao>
     c0a:	ce 01       	movw	r24, r28
     c0c:	cf 96       	adiw	r24, 0x3f	; 63
     c0e:	20 de       	rcall	.-960    	; 0x850 <cleanString>
	} while(tecla != 'A' && tecla != 'B');
	
	// Votação para presidente
	sendString_setAdress("Presidente:     ", 1, 1);
	print_optionsVotacao();
	input_caracters_counter = 0;
     c10:	00 e0       	ldi	r16, 0x00	; 0
	cleanString(response);
	
	do{
		tecla = get_tecla();
     c12:	62 d6       	rcall	.+3268   	; 0x18d8 <get_tecla>
     c14:	18 2f       	mov	r17, r24
     c16:	8f eb       	ldi	r24, 0xBF	; 191
		if(tecla == 'A' || tecla == 'B'){
     c18:	81 0f       	add	r24, r17
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <__stack+0x321>
     c1e:	6e c0       	rjmp	.+220    	; 0xcfc <__stack+0x3fd>
     c20:	11 34       	cpi	r17, 0x41	; 65
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
     c22:	39 f4       	brne	.+14     	; 0xc32 <__stack+0x333>
     c24:	02 30       	cpi	r16, 0x02	; 2
     c26:	28 f4       	brcc	.+10     	; 0xc32 <__stack+0x333>
     c28:	89 e3       	ldi	r24, 0x39	; 57
				input_caracters_counter = 2;
				presidente_numero[0] = '9';
     c2a:	8b a7       	std	Y+43, r24	; 0x2b
     c2c:	8c a7       	std	Y+44, r24	; 0x2c
				presidente_numero[1] = '9';
     c2e:	02 e0       	ldi	r16, 0x02	; 2
	do{
		tecla = get_tecla();
		if(tecla == 'A' || tecla == 'B'){
			// Se não votou em branco, e o voto é inválido
			if(tecla == 'A' && (input_caracters_counter == 0 || input_caracters_counter == 1)){
				input_caracters_counter = 2;
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <__stack+0x33f>
				presidente_numero[0] = '9';
				presidente_numero[1] = '9';
     c32:	12 34       	cpi	r17, 0x42	; 66
			}
			else if(tecla == 'B'){
     c34:	21 f4       	brne	.+8      	; 0xc3e <__stack+0x33f>
     c36:	80 e3       	ldi	r24, 0x30	; 48
				input_caracters_counter = 2;
				presidente_numero[0] = '0';
     c38:	8b a7       	std	Y+43, r24	; 0x2b
     c3a:	8c a7       	std	Y+44, r24	; 0x2c
				presidente_numero[1] = '0';
     c3c:	02 e0       	ldi	r16, 0x02	; 2
				input_caracters_counter = 2;
				presidente_numero[0] = '9';
				presidente_numero[1] = '9';
			}
			else if(tecla == 'B'){
				input_caracters_counter = 2;
     c3e:	85 e5       	ldi	r24, 0x55	; 85
				presidente_numero[1] = '0';
			}
			
			// Realiza comunicação serial
			
			sendSerialChar('U'); sendSerialChar('P');
     c40:	d4 d6       	rcall	.+3496   	; 0x19ea <sendSerialChar>
     c42:	80 e5       	ldi	r24, 0x50	; 80
     c44:	d2 d6       	rcall	.+3492   	; 0x19ea <sendSerialChar>
     c46:	80 2f       	mov	r24, r16
     c48:	d0 d6       	rcall	.+3488   	; 0x19ea <sendSerialChar>
     c4a:	ce 01       	movw	r24, r28
			sendSerialChar(input_caracters_counter);
     c4c:	8b 96       	adiw	r24, 0x2b	; 43
     c4e:	29 d7       	rcall	.+3666   	; 0x1aa2 <sendSerialMessage>
     c50:	ce 01       	movw	r24, r28
			sendSerialMessage(presidente_numero);
     c52:	cf 96       	adiw	r24, 0x3f	; 63
     c54:	d1 d6       	rcall	.+3490   	; 0x19f8 <getSerialMessage>
     c56:	8f ad       	ldd	r24, Y+63	; 0x3f
     c58:	8d 34       	cpi	r24, 0x4D	; 77
			getSerialMessage(response);
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__stack+0x35f>
     c5c:	a6 c0       	rjmp	.+332    	; 0xdaa <__stack+0x4ab>
     c5e:	21 96       	adiw	r28, 0x01	; 1
     c60:	8f ad       	ldd	r24, Y+63	; 0x3f
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'P'){
     c62:	21 97       	sbiw	r28, 0x01	; 1
     c64:	80 35       	cpi	r24, 0x50	; 80
     c66:	09 f0       	breq	.+2      	; 0xc6a <__stack+0x36b>
     c68:	a2 c0       	rjmp	.+324    	; 0xdae <__stack+0x4af>
     c6a:	de 01       	movw	r26, r28
     c6c:	df 96       	adiw	r26, 0x3f	; 63
     c6e:	fd 01       	movw	r30, r26
     c70:	01 90       	ld	r0, Z+
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			char i, a = strlen(response);
     c72:	00 20       	and	r0, r0
     c74:	e9 f7       	brne	.-6      	; 0xc70 <__stack+0x371>
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	4e 2f       	mov	r20, r30
     c7a:	4a 1b       	sub	r20, r26
     c7c:	20 e0       	ldi	r18, 0x00	; 0
			for(i = 0; i < a; i++){
     c7e:	13 c0       	rjmp	.+38     	; 0xca6 <__stack+0x3a7>
				presidente_nome[i] = response[3 + i];
     c80:	82 2f       	mov	r24, r18
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	33 96       	adiw	r30, 0x03	; 3
     c88:	6f e3       	ldi	r22, 0x3F	; 63
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	6c 0f       	add	r22, r28
     c8e:	7d 1f       	adc	r23, r29
     c90:	e6 0f       	add	r30, r22
     c92:	f7 1f       	adc	r31, r23
     c94:	30 81       	ld	r19, Z
     c96:	ee e2       	ldi	r30, 0x2E	; 46
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ec 0f       	add	r30, r28
				return ERRO_COMUNICACAO;
			}
			
			// Obtém nome do candidato através da reposta serial
			char i, a = strlen(response);
			for(i = 0; i < a; i++){
     c9c:	fd 1f       	adc	r31, r29
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
				presidente_nome[i] = response[3 + i];
			}
			
			// Pede cofirmação do usuário
			sendString_setAdress("                ", 1, 1);
     ca2:	30 83       	st	Z, r19
     ca4:	2f 5f       	subi	r18, 0xFF	; 255
     ca6:	24 17       	cp	r18, r20
     ca8:	58 f3       	brcs	.-42     	; 0xc80 <__stack+0x381>
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	61 e0       	ldi	r22, 0x01	; 1
			sendString_setAdress(presidente_nome, 1, 1);
     cae:	86 e7       	ldi	r24, 0x76	; 118
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	85 dc       	rcall	.-1782   	; 0x5be <sendString_setAdress>
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	ce 01       	movw	r24, r28
			sendString_setAdress("Confirma?  ", 2, 1);
     cba:	8e 96       	adiw	r24, 0x2e	; 46
     cbc:	80 dc       	rcall	.-1792   	; 0x5be <sendString_setAdress>
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	62 e0       	ldi	r22, 0x02	; 2
			sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
     cc2:	87 e8       	ldi	r24, 0x87	; 135
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	7b dc       	rcall	.-1802   	; 0x5be <sendString_setAdress>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	2a db       	rcall	.-2476   	; 0x320 <sendChar>
     ccc:	83 e9       	ldi	r24, 0x93	; 147
     cce:	91 e0       	ldi	r25, 0x01	; 1
			sendChar(RETURN_CHARACTER); sendChar('B');
     cd0:	99 dc       	rcall	.-1742   	; 0x604 <sendString>
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	25 db       	rcall	.-2486   	; 0x320 <sendChar>
     cd6:	82 e4       	ldi	r24, 0x42	; 66
     cd8:	23 db       	rcall	.-2490   	; 0x320 <sendChar>
     cda:	0f dd       	rcall	.-1506   	; 0x6fa <getCharacter_AB>
			tecla = getCharacter_AB();
     cdc:	18 2f       	mov	r17, r24
     cde:	82 34       	cpi	r24, 0x42	; 66
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
     ce0:	09 f0       	breq	.+2      	; 0xce4 <__stack+0x3e5>
     ce2:	3c c0       	rjmp	.+120    	; 0xd5c <__stack+0x45d>
     ce4:	41 e0       	ldi	r20, 0x01	; 1
				input_caracters_counter = 0;
				tecla = 0;
				sendString_setAdress("Presidente:     ", 1, 1);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	87 ea       	ldi	r24, 0xA7	; 167
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	68 dc       	rcall	.-1840   	; 0x5be <sendString_setAdress>
     cee:	a2 dd       	rcall	.-1212   	; 0x834 <print_optionsVotacao>
     cf0:	ce 01       	movw	r24, r28
				print_optionsVotacao();
     cf2:	cf 96       	adiw	r24, 0x3f	; 63
				cleanString(response);
     cf4:	ad dd       	rcall	.-1190   	; 0x850 <cleanString>
     cf6:	00 e0       	ldi	r16, 0x00	; 0
     cf8:	10 e0       	ldi	r17, 0x00	; 0
     cfa:	30 c0       	rjmp	.+96     	; 0xd5c <__stack+0x45d>
			sendChar(RETURN_CHARACTER); sendChar('B');
			tecla = getCharacter_AB();
			
			// Se usuário não confirmar, volta a tela anterior para votar novamente
			if(tecla == 'B'){
				input_caracters_counter = 0;
     cfc:	13 34       	cpi	r17, 0x43	; 67
				tecla = 0;
     cfe:	99 f4       	brne	.+38     	; 0xd26 <__stack+0x427>
				cleanString(response);
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
     d00:	00 23       	and	r16, r16
     d02:	89 f0       	breq	.+34     	; 0xd26 <__stack+0x427>
			input_caracters_counter--;
     d04:	ff 24       	eor	r15, r15
     d06:	fa 94       	dec	r15
			presidente_numero[input_caracters_counter] = 0;
     d08:	f0 0e       	add	r15, r16
     d0a:	eb e2       	ldi	r30, 0x2B	; 43
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	ec 0f       	add	r30, r28
     d10:	fd 1f       	adc	r31, r29
     d12:	ef 0d       	add	r30, r15
     d14:	f1 1d       	adc	r31, r1
			setDdRamAddress(11 + input_caracters_counter);
     d16:	10 82       	st	Z, r1
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	80 0f       	add	r24, r16
			sendChar(' ');
     d1c:	79 db       	rcall	.-2318   	; 0x410 <setDdRamAddress>
     d1e:	80 e2       	ldi	r24, 0x20	; 32
			}
			
		}
		// Se a tecla foi C, corrige caractere
		else if(tecla == 'C' && input_caracters_counter > 0){
			input_caracters_counter--;
     d20:	ff da       	rcall	.-2562   	; 0x320 <sendChar>
			presidente_numero[input_caracters_counter] = 0;
			setDdRamAddress(11 + input_caracters_counter);
			sendChar(' ');
     d22:	0f 2d       	mov	r16, r15
		}
		// Se foi um caractere numérico, o insere
		else if(tecla != '#' && tecla != '*' && tecla != 'D' && tecla != 'B' && tecla != 'C' && tecla != 'A' && input_caracters_counter < 2){
     d24:	1b c0       	rjmp	.+54     	; 0xd5c <__stack+0x45d>
     d26:	13 32       	cpi	r17, 0x23	; 35
     d28:	c9 f0       	breq	.+50     	; 0xd5c <__stack+0x45d>
     d2a:	1a 32       	cpi	r17, 0x2A	; 42
     d2c:	b9 f0       	breq	.+46     	; 0xd5c <__stack+0x45d>
     d2e:	14 34       	cpi	r17, 0x44	; 68
     d30:	a9 f0       	breq	.+42     	; 0xd5c <__stack+0x45d>
     d32:	12 34       	cpi	r17, 0x42	; 66
     d34:	99 f0       	breq	.+38     	; 0xd5c <__stack+0x45d>
     d36:	13 34       	cpi	r17, 0x43	; 67
     d38:	89 f0       	breq	.+34     	; 0xd5c <__stack+0x45d>
     d3a:	11 34       	cpi	r17, 0x41	; 65
     d3c:	79 f0       	breq	.+30     	; 0xd5c <__stack+0x45d>
     d3e:	02 30       	cpi	r16, 0x02	; 2
			setDdRamAddress(11 + input_caracters_counter);
     d40:	68 f4       	brcc	.+26     	; 0xd5c <__stack+0x45d>
     d42:	8b e0       	ldi	r24, 0x0B	; 11
     d44:	80 0f       	add	r24, r16
     d46:	64 db       	rcall	.-2360   	; 0x410 <setDdRamAddress>
			presidente_numero[input_caracters_counter] = tecla;
     d48:	eb e2       	ldi	r30, 0x2B	; 43
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ec 0f       	add	r30, r28
     d4e:	fd 1f       	adc	r31, r29
     d50:	e0 0f       	add	r30, r16
     d52:	f1 1d       	adc	r31, r1
     d54:	10 83       	st	Z, r17
			input_caracters_counter++;
     d56:	0f 5f       	subi	r16, 0xFF	; 255
			sendChar(tecla);
     d58:	81 2f       	mov	r24, r17
     d5a:	e2 da       	rcall	.-2620   	; 0x320 <sendChar>
     d5c:	11 54       	subi	r17, 0x41	; 65
		}		
	}while(tecla != 'A' && tecla != 'B');
     d5e:	12 30       	cpi	r17, 0x02	; 2
     d60:	08 f0       	brcs	.+2      	; 0xd64 <__stack+0x465>
     d62:	57 cf       	rjmp	.-338    	; 0xc12 <__stack+0x313>
     d64:	ce 01       	movw	r24, r28
	
	// Fim do processo de votação
	cleanString(response);
     d66:	cf 96       	adiw	r24, 0x3f	; 63
     d68:	73 dd       	rcall	.-1306   	; 0x850 <cleanString>
     d6a:	85 e5       	ldi	r24, 0x55	; 85
     d6c:	3e d6       	rcall	.+3196   	; 0x19ea <sendSerialChar>
	sendSerialChar('U'); sendSerialChar('C');
     d6e:	83 e4       	ldi	r24, 0x43	; 67
     d70:	3c d6       	rcall	.+3192   	; 0x19ea <sendSerialChar>
     d72:	ce 01       	movw	r24, r28
     d74:	cf 96       	adiw	r24, 0x3f	; 63
     d76:	40 d6       	rcall	.+3200   	; 0x19f8 <getSerialMessage>
     d78:	8f ad       	ldd	r24, Y+63	; 0x3f
	getSerialMessage(response);
     d7a:	8d 34       	cpi	r24, 0x4D	; 77
     d7c:	29 f4       	brne	.+10     	; 0xd88 <__stack+0x489>
     d7e:	21 96       	adiw	r28, 0x01	; 1
     d80:	8f ad       	ldd	r24, Y+63	; 0x3f
	
	if(response[0] != 'M' || response[1] != 'C'){
     d82:	21 97       	sbiw	r28, 0x01	; 1
     d84:	83 34       	cpi	r24, 0x43	; 67
     d86:	11 f0       	breq	.+4      	; 0xd8c <__stack+0x48d>
     d88:	4a dd       	rcall	.-1388   	; 0x81e <print_erroComunicacao>
     d8a:	ff cf       	rjmp	.-2      	; 0xd8a <__stack+0x48b>
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	88 eb       	ldi	r24, 0xB8	; 184
		print_erroComunicacao();
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	14 dc       	rcall	.-2008   	; 0x5be <sendString_setAdress>
     d96:	82 e0       	ldi	r24, 0x02	; 2
		while(1);
		return ERRO_COMUNICACAO;
	}
	sendString_setAdress("        fim     ", 1, 1);
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <__stack+0x4b1>
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <__stack+0x4b1>
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <__stack+0x4b1>
     da2:	8f ef       	ldi	r24, 0xFF	; 255
	return VOTACAO_CONCLUIDA;
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__stack+0x4b1>
     da6:	8f ef       	ldi	r24, 0xFF	; 255
	sendSerialChar('U'); sendSerialChar('I'); 
	char response[50] = {0};
	getSerialMessage(response);
	
	if(response[0] != 'M' || response[1] != 'I'){
		return ERRO_COMUNICACAO;
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <__stack+0x4b1>
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <__stack+0x4b1>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
			sendSerialMessage(senador_numero);
			getSerialMessage(response);
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'S'){
				return ERRO_COMUNICACAO;
     db0:	cd 58       	subi	r28, 0x8D	; 141
     db2:	df 4f       	sbci	r29, 0xFF	; 255
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
			sendSerialMessage(presidente_numero);
			getSerialMessage(response);
			
			// Verifica se houve erro na comunicação serial
			if(response[0] != 'M' || response[1] != 'P'){
				return ERRO_COMUNICACAO;
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
		while(1);
		return ERRO_COMUNICACAO;
	}
	sendString_setAdress("        fim     ", 1, 1);
	return VOTACAO_CONCLUIDA;
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	08 95       	ret

00000dca <main>:
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	c5 5d       	subi	r28, 0xD5	; 213
     dd4:	d2 40       	sbci	r29, 0x02	; 2
     dd6:	0f b6       	in	r0, 0x3f	; 63
void print_erroComunicacao();
void print_optionsVotacao();
void strCpy(char*, char*);
void cleanString(char*);

int main(void){
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
	
	// Display como outputs
	OUTPUT(D4);
     de0:	84 b1       	in	r24, 0x04	; 4
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D5);
     de6:	84 b1       	in	r24, 0x04	; 4
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D6);
     dec:	84 b1       	in	r24, 0x04	; 4
     dee:	84 60       	ori	r24, 0x04	; 4
     df0:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D7);
     df2:	84 b1       	in	r24, 0x04	; 4
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	84 b9       	out	0x04, r24	; 4
	OUTPUT(E);
     df8:	8a b1       	in	r24, 0x0a	; 10
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(RS);
     dfe:	8a b1       	in	r24, 0x0a	; 10
     e00:	80 64       	ori	r24, 0x40	; 64
     e02:	8a b9       	out	0x0a, r24	; 10
	
	// Linhas como outputs e colunas como inputs
	OUTPUT(LINHA1);
     e04:	8a b1       	in	r24, 0x0a	; 10
     e06:	80 62       	ori	r24, 0x20	; 32
     e08:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA2);
     e0a:	8a b1       	in	r24, 0x0a	; 10
     e0c:	80 61       	ori	r24, 0x10	; 16
     e0e:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA3);
     e10:	8a b1       	in	r24, 0x0a	; 10
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA4);
     e16:	8a b1       	in	r24, 0x0a	; 10
     e18:	84 60       	ori	r24, 0x04	; 4
     e1a:	8a b9       	out	0x0a, r24	; 10
	INPUT(COLUNA1);
     e1c:	87 b1       	in	r24, 0x07	; 7
     e1e:	8e 7f       	andi	r24, 0xFE	; 254
     e20:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA2);
     e22:	87 b1       	in	r24, 0x07	; 7
     e24:	8d 7f       	andi	r24, 0xFD	; 253
     e26:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA3);
     e28:	87 b1       	in	r24, 0x07	; 7
     e2a:	8b 7f       	andi	r24, 0xFB	; 251
     e2c:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA4);
     e2e:	87 b1       	in	r24, 0x07	; 7
     e30:	87 7f       	andi	r24, 0xF7	; 247
     e32:	87 b9       	out	0x07, r24	; 7
	
	// Buzzer e LED como outputs
	OUTPUT(BUZZER);
     e34:	84 b1       	in	r24, 0x04	; 4
     e36:	80 61       	ori	r24, 0x10	; 16
     e38:	84 b9       	out	0x04, r24	; 4
	OUTPUT(LED);
     e3a:	84 b1       	in	r24, 0x04	; 4
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	84 b9       	out	0x04, r24	; 4
	
	// Garante que todas as linhas comecem em nível lógico alto
	HIGH(LINHA1);
     e40:	8b b1       	in	r24, 0x0b	; 11
     e42:	80 62       	ori	r24, 0x20	; 32
     e44:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA2);
     e46:	8b b1       	in	r24, 0x0b	; 11
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA3);
     e4c:	8b b1       	in	r24, 0x0b	; 11
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA4);
     e52:	8b b1       	in	r24, 0x0b	; 11
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	8b b9       	out	0x0b, r24	; 11
	HIGH(COLUNA1);
     e58:	88 b1       	in	r24, 0x08	; 8
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA2);
     e5e:	88 b1       	in	r24, 0x08	; 8
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA3);
     e64:	88 b1       	in	r24, 0x08	; 8
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA4);
     e6a:	88 b1       	in	r24, 0x08	; 8
     e6c:	88 60       	ori	r24, 0x08	; 8
     e6e:	88 b9       	out	0x08, r24	; 8
	
	// Garante que o buzzer e o LED comecem desligados
	LOW(BUZZER);
     e70:	85 b1       	in	r24, 0x05	; 5
     e72:	8f 7e       	andi	r24, 0xEF	; 239
     e74:	85 b9       	out	0x05, r24	; 5
	LOW(LED);
     e76:	85 b1       	in	r24, 0x05	; 5
     e78:	8f 7d       	andi	r24, 0xDF	; 223
     e7a:	85 b9       	out	0x05, r24	; 5
	
	// Inicialização do display
	functionSet();
     e7c:	9e d9       	rcall	.-3268   	; 0x1ba <functionSet>
	entryModeSet(1, 0);
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	d2 d9       	rcall	.-3164   	; 0x228 <entryModeSet>
	displayOnOffControl(1, 0, 0);
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
	storage_special_characters();
     e8a:	05 da       	rcall	.-3062   	; 0x296 <displayOnOffControl>
     e8c:	d0 db       	rcall	.-2144   	; 0x62e <storage_special_characters>
	
	// Configurações de timer e serial
	timeControlConfig();
     e8e:	6a d6       	rcall	.+3284   	; 0x1b64 <timeControlConfig>
     e90:	9b d5       	rcall	.+2870   	; 0x19c8 <initSerialConfig>
	initSerialConfig();
     e92:	fe 01       	movw	r30, r28
     e94:	ef 55       	subi	r30, 0x5F	; 95
	ELEITOR eleitor[33];				// Dados dos eleitores, considerando, por absurdo, que todos justifiquem
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = BLOQUEADA;		// Estado da urna
	char menu_operacional_index = 1;	// Índice do menu_operacional
	char option_menu_operacional = 1;	// Opção slecionada do menu_operacional
	char numero_eleitor[5] = {0};		// Guarda número do eleitor
     e96:	fd 4f       	sbci	r31, 0xFD	; 253
     e98:	85 e0       	ldi	r24, 0x05	; 5
     e9a:	df 01       	movw	r26, r30
     e9c:	98 2f       	mov	r25, r24
     e9e:	1d 92       	st	X+, r1
     ea0:	9a 95       	dec	r25
     ea2:	e9 f7       	brne	.-6      	; 0xe9e <main+0xd4>
     ea4:	35 96       	adiw	r30, 0x05	; 5
     ea6:	91 e1       	ldi	r25, 0x11	; 17
	char nome_eleitor[17] = {0};		// Guarda nome do eleitor (max 16 caracteres + \0)
     ea8:	df 01       	movw	r26, r30
     eaa:	1d 92       	st	X+, r1
     eac:	9a 95       	dec	r25
     eae:	e9 f7       	brne	.-6      	; 0xeaa <main+0xe0>
     eb0:	71 96       	adiw	r30, 0x11	; 17
     eb2:	df 01       	movw	r26, r30
	char guarda_senha_mesario[5] = {0};
     eb4:	98 2f       	mov	r25, r24
     eb6:	1d 92       	st	X+, r1
     eb8:	9a 95       	dec	r25
     eba:	e9 f7       	brne	.-6      	; 0xeb6 <main+0xec>
     ebc:	35 96       	adiw	r30, 0x05	; 5
     ebe:	df 01       	movw	r26, r30
	char guarda_login_mesario[5] = {0};
     ec0:	1d 92       	st	X+, r1
     ec2:	8a 95       	dec	r24
     ec4:	e9 f7       	brne	.-6      	; 0xec0 <main+0xf6>
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	e8 e1       	ldi	r30, 0x18	; 24
	const char login_mesario[5] = "01237";
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	de 01       	movw	r26, r28
     ece:	af 53       	subi	r26, 0x3F	; 63
     ed0:	bd 4f       	sbci	r27, 0xFD	; 253
     ed2:	01 90       	ld	r0, Z+
     ed4:	0d 92       	st	X+, r0
     ed6:	8a 95       	dec	r24
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <main+0x108>
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	ee e1       	ldi	r30, 0x1E	; 30
	const char senha_inicial[5] = "12378";
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	de 01       	movw	r26, r28
     ee2:	aa 53       	subi	r26, 0x3A	; 58
     ee4:	bd 4f       	sbci	r27, 0xFD	; 253
     ee6:	01 90       	ld	r0, Z+
     ee8:	0d 92       	st	X+, r0
     eea:	8a 95       	dec	r24
     eec:	e1 f7       	brne	.-8      	; 0xee6 <main+0x11c>
     eee:	ff 24       	eor	r15, r15
     ef0:	f3 94       	inc	r15
	RELATORIO relatorio_votacao;		// Relatorio da votacao
	ELEITOR eleitor[33];				// Dados dos eleitores, considerando, por absurdo, que todos justifiquem
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = BLOQUEADA;		// Estado da urna
	char menu_operacional_index = 1;	// Índice do menu_operacional
	char option_menu_operacional = 1;	// Opção slecionada do menu_operacional
     ef2:	ee 24       	eor	r14, r14
     ef4:	e3 94       	inc	r14

	RELATORIO relatorio_votacao;		// Relatorio da votacao
	ELEITOR eleitor[33];				// Dados dos eleitores, considerando, por absurdo, que todos justifiquem
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = BLOQUEADA;		// Estado da urna
	char menu_operacional_index = 1;	// Índice do menu_operacional
     ef6:	b1 e0       	ldi	r27, 0x01	; 1
     ef8:	cb 52       	subi	r28, 0x2B	; 43
	initSerialConfig();

	RELATORIO relatorio_votacao;		// Relatorio da votacao
	ELEITOR eleitor[33];				// Dados dos eleitores, considerando, por absurdo, que todos justifiquem
	char tecla = 0;						// Guarda tecla pressionada
	char urna_estado = BLOQUEADA;		// Estado da urna
     efa:	dd 4f       	sbci	r29, 0xFD	; 253
     efc:	b8 83       	st	Y, r27
     efe:	c5 5d       	subi	r28, 0xD5	; 213
     f00:	d2 40       	sbci	r29, 0x02	; 2
     f02:	03 c1       	rjmp	.+518    	; 0x110a <main+0x340>
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	e8 16       	cp	r14, r24
	
	while (1){
		
		while(urna_estado == BLOQUEADA){

			switch(menu_operacional_index){
     f08:	e9 f0       	breq	.+58     	; 0xf44 <main+0x17a>
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	e9 16       	cp	r14, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <main+0x148>
     f10:	68 c0       	rjmp	.+208    	; 0xfe2 <main+0x218>
     f12:	a1 e0       	ldi	r26, 0x01	; 1
     f14:	ea 12       	cpse	r14, r26
     f16:	f9 c0       	rjmp	.+498    	; 0x110a <main+0x340>
     f18:	41 e0       	ldi	r20, 0x01	; 1
				case 1:
					sendString_setAdress("      Urna      ", 1, 1);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	89 ec       	ldi	r24, 0xC9	; 201
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	4e db       	rcall	.-2404   	; 0x5be <sendString_setAdress>
     f22:	41 e0       	ldi	r20, 0x01	; 1
					sendString_setAdress("   Bloqueada  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
     f24:	62 e0       	ldi	r22, 0x02	; 2
     f26:	8a ed       	ldi	r24, 0xDA	; 218
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	49 db       	rcall	.-2414   	; 0x5be <sendString_setAdress>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	f8 d9       	rcall	.-3088   	; 0x320 <sendChar>
     f30:	81 e4       	ldi	r24, 0x41	; 65
     f32:	f6 d9       	rcall	.-3092   	; 0x320 <sendChar>
     f34:	e2 db       	rcall	.-2108   	; 0x6fa <getCharacter_AB>
     f36:	81 34       	cpi	r24, 0x41	; 65
					tecla = getCharacter_AB();
     f38:	09 f0       	breq	.+2      	; 0xf3c <main+0x172>
     f3a:	e7 c0       	rjmp	.+462    	; 0x110a <main+0x340>
					// se a tecla apertada for A, espera o login do mesário
					if(tecla == 'A') {menu_operacional_index = 2; /*break;*/}
     f3c:	68 94       	set
     f3e:	ee 24       	eor	r14, r14
     f40:	e1 f8       	bld	r14, 1
     f42:	e3 c0       	rjmp	.+454    	; 0x110a <main+0x340>
     f44:	41 e0       	ldi	r20, 0x01	; 1
					else {menu_operacional_index = 1; /*break;*/}
					break;
				// login do mesário
				case 2:
					input_caracters_counter = 0;
					sendString_setAdress("Login adm:      ", 1, 1);
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	89 ee       	ldi	r24, 0xE9	; 233
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	38 db       	rcall	.-2448   	; 0x5be <sendString_setAdress>
					sendString_setAdress("A:    B:    C:  ", 2, 1);
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	8a ef       	ldi	r24, 0xFA	; 250
     f54:	91 e0       	ldi	r25, 0x01	; 1
					setDdRamAddress(0x40 + 2);
     f56:	33 db       	rcall	.-2458   	; 0x5be <sendString_setAdress>
     f58:	82 e4       	ldi	r24, 0x42	; 66
					sendChar(RIGHT_OPTION_CHARACTER);
     f5a:	5a da       	rcall	.-2892   	; 0x410 <setDdRamAddress>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	e0 d9       	rcall	.-3136   	; 0x320 <sendChar>
					setDdRamAddress(0x40 + 8);
     f60:	88 e4       	ldi	r24, 0x48	; 72
     f62:	56 da       	rcall	.-2900   	; 0x410 <setDdRamAddress>
     f64:	82 e0       	ldi	r24, 0x02	; 2
					sendChar(RETURN_CHARACTER);
     f66:	dc d9       	rcall	.-3144   	; 0x320 <sendChar>
     f68:	8e e4       	ldi	r24, 0x4E	; 78
     f6a:	52 da       	rcall	.-2908   	; 0x410 <setDdRamAddress>
					setDdRamAddress(0x40 + 14);
     f6c:	8f e7       	ldi	r24, 0x7F	; 127
     f6e:	d8 d9       	rcall	.-3152   	; 0x320 <sendChar>
     f70:	88 e0       	ldi	r24, 0x08	; 8
					sendChar(LEFT_ARROW_CHARACTER);
     f72:	4e da       	rcall	.-2916   	; 0x410 <setDdRamAddress>
     f74:	00 e0       	ldi	r16, 0x00	; 0
					setDdRamAddress(8);
     f76:	b0 d4       	rcall	.+2400   	; 0x18d8 <get_tecla>
     f78:	18 2f       	mov	r17, r24
					if(tecla == 'A') {menu_operacional_index = 2; /*break;*/}
					else {menu_operacional_index = 1; /*break;*/}
					break;
				// login do mesário
				case 2:
					input_caracters_counter = 0;
     f7a:	81 34       	cpi	r24, 0x41	; 65
					setDdRamAddress(8);

					// char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
     f7c:	11 f4       	brne	.+4      	; 0xf82 <main+0x1b8>
     f7e:	05 30       	cpi	r16, 0x05	; 5
     f80:	29 f1       	breq	.+74     	; 0xfcc <main+0x202>
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5) {menu_operacional_index = 3;}
     f82:	12 34       	cpi	r17, 0x42	; 66
     f84:	41 f1       	breq	.+80     	; 0xfd6 <main+0x20c>
     f86:	13 34       	cpi	r17, 0x43	; 67
     f88:	49 f4       	brne	.+18     	; 0xf9c <main+0x1d2>
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_operacional_index = 1;}
     f8a:	1f ef       	ldi	r17, 0xFF	; 255
     f8c:	10 0f       	add	r17, r16
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
     f8e:	89 e0       	ldi	r24, 0x09	; 9
     f90:	80 0f       	add	r24, r16
							input_caracters_counter--;
     f92:	3e da       	rcall	.-2948   	; 0x410 <setDdRamAddress>
							setDdRamAddress(10 + input_caracters_counter);
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	c4 d9       	rcall	.-3192   	; 0x320 <sendChar>
     f98:	01 2f       	mov	r16, r17
							sendChar(' ');
     f9a:	1f c0       	rjmp	.+62     	; 0xfda <main+0x210>
     f9c:	05 30       	cpi	r16, 0x05	; 5
     f9e:	e8 f4       	brcc	.+58     	; 0xfda <main+0x210>
						if(tecla == 'A' && input_caracters_counter == 5) {menu_operacional_index = 3;}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_operacional_index = 1;}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
							input_caracters_counter--;
     fa0:	1a 32       	cpi	r17, 0x2A	; 42
     fa2:	d9 f0       	breq	.+54     	; 0xfda <main+0x210>
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(' ');
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
     fa4:	14 34       	cpi	r17, 0x44	; 68
     fa6:	c9 f0       	breq	.+50     	; 0xfda <main+0x210>
     fa8:	13 32       	cpi	r17, 0x23	; 35
     faa:	b9 f0       	breq	.+46     	; 0xfda <main+0x210>
     fac:	11 34       	cpi	r17, 0x41	; 65
     fae:	a9 f0       	breq	.+42     	; 0xfda <main+0x210>
     fb0:	8a e0       	ldi	r24, 0x0A	; 10
     fb2:	80 0f       	add	r24, r16
     fb4:	2d da       	rcall	.-2982   	; 0x410 <setDdRamAddress>
     fb6:	81 2f       	mov	r24, r17
							setDdRamAddress(10 + input_caracters_counter);
     fb8:	b3 d9       	rcall	.-3226   	; 0x320 <sendChar>
     fba:	ec eb       	ldi	r30, 0xBC	; 188
     fbc:	f2 e0       	ldi	r31, 0x02	; 2
     fbe:	ec 0f       	add	r30, r28
							sendChar(tecla);
     fc0:	fd 1f       	adc	r31, r29
     fc2:	e0 0f       	add	r30, r16
							guarda_login_mesario[input_caracters_counter] = tecla;
     fc4:	f1 1d       	adc	r31, r1
     fc6:	10 83       	st	Z, r17
     fc8:	0f 5f       	subi	r16, 0xFF	; 255
     fca:	07 c0       	rjmp	.+14     	; 0xfda <main+0x210>
     fcc:	0f 2e       	mov	r0, r31
     fce:	f3 e0       	ldi	r31, 0x03	; 3
							input_caracters_counter++;
     fd0:	ef 2e       	mov	r14, r31
					// char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5) {menu_operacional_index = 3;}
     fd2:	f0 2d       	mov	r31, r0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <main+0x210>
     fd6:	ee 24       	eor	r14, r14
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_operacional_index = 1;}
     fd8:	e3 94       	inc	r14
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(tecla);
							guarda_login_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(menu_operacional_index == 2);
     fda:	b2 e0       	ldi	r27, 0x02	; 2
     fdc:	eb 16       	cp	r14, r27
					break;
				// senha do mesário
				case 3:
					input_caracters_counter = 0;
					sendString_setAdress("Senha adm:      ", 1, 1);
     fde:	59 f2       	breq	.-106    	; 0xf76 <main+0x1ac>
     fe0:	94 c0       	rjmp	.+296    	; 0x110a <main+0x340>
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	8b e0       	ldi	r24, 0x0B	; 11
					sendString_setAdress("A:    B:    C:  ", 2, 1);
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	e9 da       	rcall	.-2606   	; 0x5be <sendString_setAdress>
     fec:	41 e0       	ldi	r20, 0x01	; 1
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	8a ef       	ldi	r24, 0xFA	; 250
     ff2:	91 e0       	ldi	r25, 0x01	; 1
					setDdRamAddress(0x40 + 2);
     ff4:	e4 da       	rcall	.-2616   	; 0x5be <sendString_setAdress>
     ff6:	82 e4       	ldi	r24, 0x42	; 66
     ff8:	0b da       	rcall	.-3050   	; 0x410 <setDdRamAddress>
					sendChar(RIGHT_OPTION_CHARACTER);
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	91 d9       	rcall	.-3294   	; 0x320 <sendChar>
     ffe:	88 e4       	ldi	r24, 0x48	; 72
					setDdRamAddress(0x40 + 8);
    1000:	07 da       	rcall	.-3058   	; 0x410 <setDdRamAddress>
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	8d d9       	rcall	.-3302   	; 0x320 <sendChar>
					sendChar(RETURN_CHARACTER);
    1006:	8e e4       	ldi	r24, 0x4E	; 78
    1008:	03 da       	rcall	.-3066   	; 0x410 <setDdRamAddress>
    100a:	8f e7       	ldi	r24, 0x7F	; 127
					setDdRamAddress(0x40 + 14);
    100c:	89 d9       	rcall	.-3310   	; 0x320 <sendChar>
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	ff d9       	rcall	.-3074   	; 0x410 <setDdRamAddress>
					sendChar(LEFT_ARROW_CHARACTER);
    1012:	00 e0       	ldi	r16, 0x00	; 0
    1014:	61 d4       	rcall	.+2242   	; 0x18d8 <get_tecla>
    1016:	18 2f       	mov	r17, r24
					setDdRamAddress(8);
    1018:	81 34       	cpi	r24, 0x41	; 65
    101a:	09 f0       	breq	.+2      	; 0x101e <main+0x254>
    101c:	42 c0       	rjmp	.+132    	; 0x10a2 <main+0x2d8>
						}
					} while(menu_operacional_index == 2);
					break;
				// senha do mesário
				case 3:
					input_caracters_counter = 0;
    101e:	05 30       	cpi	r16, 0x05	; 5
					setDdRamAddress(8);
					
					char i, a;
					do{
						// a = 0;
						tecla = get_tecla();
    1020:	09 f0       	breq	.+2      	; 0x1024 <main+0x25a>
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <main+0x2d8>
    1024:	25 c0       	rjmp	.+74     	; 0x1070 <main+0x2a6>
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5){
    1026:	82 2f       	mov	r24, r18
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	ec eb       	ldi	r30, 0xBC	; 188
    102c:	f2 e0       	ldi	r31, 0x02	; 2
    102e:	ec 0f       	add	r30, r28
    1030:	fd 1f       	adc	r31, r29
    1032:	e8 0f       	add	r30, r24
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
    1034:	f9 1f       	adc	r31, r25
    1036:	50 81       	ld	r21, Z
    1038:	e1 ec       	ldi	r30, 0xC1	; 193
    103a:	f2 e0       	ldi	r31, 0x02	; 2
    103c:	ec 0f       	add	r30, r28
    103e:	fd 1f       	adc	r31, r29
    1040:	e8 0f       	add	r30, r24
    1042:	f9 1f       	adc	r31, r25
    1044:	40 81       	ld	r20, Z
    1046:	54 13       	cpse	r21, r20
    1048:	11 c0       	rjmp	.+34     	; 0x106c <main+0x2a2>
    104a:	e7 eb       	ldi	r30, 0xB7	; 183
    104c:	f2 e0       	ldi	r31, 0x02	; 2
    104e:	ec 0f       	add	r30, r28
    1050:	fd 1f       	adc	r31, r29
    1052:	e8 0f       	add	r30, r24
    1054:	f9 1f       	adc	r31, r25
    1056:	40 81       	ld	r20, Z
    1058:	e6 ec       	ldi	r30, 0xC6	; 198
    105a:	f2 e0       	ldi	r31, 0x02	; 2
    105c:	ec 0f       	add	r30, r28
    105e:	fd 1f       	adc	r31, r29
    1060:	e8 0f       	add	r30, r24
    1062:	f9 1f       	adc	r31, r25
    1064:	80 81       	ld	r24, Z
    1066:	48 13       	cpse	r20, r24
    1068:	01 c0       	rjmp	.+2      	; 0x106c <main+0x2a2>
    106a:	3f 5f       	subi	r19, 0xFF	; 255
    106c:	2f 5f       	subi	r18, 0xFF	; 255
								{a++;}
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <main+0x2aa>
						// a = 0;
						tecla = get_tecla();
						// se tecla A e login com 5 dígitos, prossegue para senha
						if(tecla == 'A' && input_caracters_counter == 5){
							a = 0;
							for(i = 0; i < 5; i++){
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	25 30       	cpi	r18, 0x05	; 5
    1076:	b8 f2       	brcs	.-82     	; 0x1026 <main+0x25c>
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_operacional_index = 1;
							if(a == 5) {urna_estado = OPERACIONAL; /*break;*/}
    1078:	35 30       	cpi	r19, 0x05	; 5
    107a:	09 f4       	brne	.+2      	; 0x107e <main+0x2b4>
    107c:	37 c0       	rjmp	.+110    	; 0x10ec <main+0x322>
							else{
								sendString_setAdress("     Mesario    ", 1, 1);
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	8c e1       	ldi	r24, 0x1C	; 28
    1084:	92 e0       	ldi	r25, 0x02	; 2
    1086:	9b da       	rcall	.-2762   	; 0x5be <sendString_setAdress>
    1088:	41 e0       	ldi	r20, 0x01	; 1
								sendString_setAdress("    invalido  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    108a:	62 e0       	ldi	r22, 0x02	; 2
    108c:	8d e2       	ldi	r24, 0x2D	; 45
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	96 da       	rcall	.-2772   	; 0x5be <sendString_setAdress>
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	45 d9       	rcall	.-3446   	; 0x320 <sendChar>
    1096:	82 e4       	ldi	r24, 0x42	; 66
    1098:	43 d9       	rcall	.-3450   	; 0x320 <sendChar>
    109a:	3c db       	rcall	.-2440   	; 0x714 <getCharacter_B>
    109c:	ee 24       	eor	r14, r14
								tecla = getCharacter_B();
    109e:	e3 94       	inc	r14
    10a0:	30 c0       	rjmp	.+96     	; 0x1102 <main+0x338>
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_operacional_index = 1;
    10a2:	12 34       	cpi	r17, 0x42	; 66
    10a4:	61 f1       	breq	.+88     	; 0x10fe <main+0x334>
    10a6:	13 34       	cpi	r17, 0x43	; 67
								tecla = getCharacter_B();
							}
							
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_operacional_index = 1;}
    10a8:	49 f4       	brne	.+18     	; 0x10bc <main+0x2f2>
    10aa:	1f ef       	ldi	r17, 0xFF	; 255
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    10ac:	10 0f       	add	r17, r16
    10ae:	89 e0       	ldi	r24, 0x09	; 9
							input_caracters_counter--;
    10b0:	80 0f       	add	r24, r16
    10b2:	ae d9       	rcall	.-3236   	; 0x410 <setDdRamAddress>
							setDdRamAddress(10 + input_caracters_counter);
    10b4:	80 e2       	ldi	r24, 0x20	; 32
    10b6:	34 d9       	rcall	.-3480   	; 0x320 <sendChar>
    10b8:	01 2f       	mov	r16, r17
    10ba:	23 c0       	rjmp	.+70     	; 0x1102 <main+0x338>
							sendChar(' ');
    10bc:	05 30       	cpi	r16, 0x05	; 5
    10be:	08 f5       	brcc	.+66     	; 0x1102 <main+0x338>
    10c0:	1a 32       	cpi	r17, 0x2A	; 42
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_operacional_index = 1;}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
							input_caracters_counter--;
    10c2:	f9 f0       	breq	.+62     	; 0x1102 <main+0x338>
    10c4:	14 34       	cpi	r17, 0x44	; 68
							setDdRamAddress(10 + input_caracters_counter);
							sendChar(' ');
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    10c6:	e9 f0       	breq	.+58     	; 0x1102 <main+0x338>
    10c8:	13 32       	cpi	r17, 0x23	; 35
    10ca:	d9 f0       	breq	.+54     	; 0x1102 <main+0x338>
    10cc:	11 34       	cpi	r17, 0x41	; 65
    10ce:	c9 f0       	breq	.+50     	; 0x1102 <main+0x338>
    10d0:	8a e0       	ldi	r24, 0x0A	; 10
    10d2:	80 0f       	add	r24, r16
    10d4:	9d d9       	rcall	.-3270   	; 0x410 <setDdRamAddress>
    10d6:	8a e2       	ldi	r24, 0x2A	; 42
    10d8:	23 d9       	rcall	.-3514   	; 0x320 <sendChar>
							setDdRamAddress(10 + input_caracters_counter);
    10da:	e7 eb       	ldi	r30, 0xB7	; 183
    10dc:	f2 e0       	ldi	r31, 0x02	; 2
    10de:	ec 0f       	add	r30, r28
    10e0:	fd 1f       	adc	r31, r29
							sendChar('*');
    10e2:	e0 0f       	add	r30, r16
    10e4:	f1 1d       	adc	r31, r1
							guarda_senha_mesario[input_caracters_counter] = tecla;
    10e6:	10 83       	st	Z, r17
    10e8:	0f 5f       	subi	r16, 0xFF	; 255
    10ea:	0b c0       	rjmp	.+22     	; 0x1102 <main+0x338>
    10ec:	ee 24       	eor	r14, r14
    10ee:	e3 94       	inc	r14
    10f0:	82 e0       	ldi	r24, 0x02	; 2
							input_caracters_counter++;
    10f2:	cb 52       	subi	r28, 0x2B	; 43
							a = 0;
							for(i = 0; i < 5; i++){
								if(guarda_login_mesario[i] == login_mesario[i] && guarda_senha_mesario[i] == senha_inicial[i])
								{a++;}
							}
							menu_operacional_index = 1;
    10f4:	dd 4f       	sbci	r29, 0xFD	; 253
    10f6:	88 83       	st	Y, r24
							if(a == 5) {urna_estado = OPERACIONAL; /*break;*/}
    10f8:	c5 5d       	subi	r28, 0xD5	; 213
    10fa:	d2 40       	sbci	r29, 0x02	; 2
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <main+0x338>
    10fe:	ee 24       	eor	r14, r14
    1100:	e3 94       	inc	r14
								tecla = getCharacter_B();
							}
							
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B') {menu_operacional_index = 1;}
    1102:	93 e0       	ldi	r25, 0x03	; 3
							setDdRamAddress(10 + input_caracters_counter);
							sendChar('*');
							guarda_senha_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(menu_operacional_index == 3);
    1104:	e9 16       	cp	r14, r25
    1106:	09 f4       	brne	.+2      	; 0x110a <main+0x340>
    1108:	85 cf       	rjmp	.-246    	; 0x1014 <main+0x24a>
    110a:	cb 52       	subi	r28, 0x2B	; 43
	const char senha_inicial[5] = "12378";
	unsigned char input_caracters_counter = 0;	// Contador de daracteres inseridos pelo usuário
	
	while (1){
		
		while(urna_estado == BLOQUEADA){
    110c:	dd 4f       	sbci	r29, 0xFD	; 253
    110e:	a8 81       	ld	r26, Y
    1110:	c5 5d       	subi	r28, 0xD5	; 213
    1112:	d2 40       	sbci	r29, 0x02	; 2
    1114:	a1 30       	cpi	r26, 0x01	; 1
    1116:	09 f0       	breq	.+2      	; 0x111a <main+0x350>
    1118:	46 c3       	rjmp	.+1676   	; 0x17a6 <main+0x9dc>
    111a:	f4 ce       	rjmp	.-536    	; 0xf04 <main+0x13a>
		}
		
		while(urna_estado == OPERACIONAL){
			
			// Menu do sistema
			switch(menu_operacional_index){
    111c:	8e 2d       	mov	r24, r14
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	e8 30       	cpi	r30, 0x08	; 8
    1126:	f1 05       	cpc	r31, r1
    1128:	08 f0       	brcs	.+2      	; 0x112c <main+0x362>
    112a:	05 c1       	rjmp	.+522    	; 0x1336 <main+0x56c>
    112c:	ec 5c       	subi	r30, 0xCC	; 204
				case 1:
					sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	f3 c5       	rjmp	.+3046   	; 0x1d18 <__tablejump2__>
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	8c e3       	ldi	r24, 0x3C	; 60
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	41 da       	rcall	.-2942   	; 0x5be <sendString_setAdress>
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	f0 d8       	rcall	.-3616   	; 0x320 <sendChar>
    1140:	81 e4       	ldi	r24, 0x41	; 65
    1142:	ee d8       	rcall	.-3620   	; 0x320 <sendChar>
					sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	62 e0       	ldi	r22, 0x02	; 2
    1148:	8b e4       	ldi	r24, 0x4B	; 75
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	38 da       	rcall	.-2960   	; 0x5be <sendString_setAdress>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	e7 d8       	rcall	.-3634   	; 0x320 <sendChar>
    1152:	82 e4       	ldi	r24, 0x42	; 66
    1154:	e5 d8       	rcall	.-3638   	; 0x320 <sendChar>
					tecla = getCharacter_AB();
    1156:	d1 da       	rcall	.-2654   	; 0x6fa <getCharacter_AB>
					if(tecla == 'B'){ menu_operacional_index++;}
    1158:	82 34       	cpi	r24, 0x42	; 66
    115a:	11 f4       	brne	.+4      	; 0x1160 <main+0x396>
    115c:	e3 94       	inc	r14
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_operacional_index = 0;}
    115e:	eb c0       	rjmp	.+470    	; 0x1336 <main+0x56c>
    1160:	81 34       	cpi	r24, 0x41	; 65
    1162:	09 f0       	breq	.+2      	; 0x1166 <main+0x39c>
    1164:	e8 c0       	rjmp	.+464    	; 0x1336 <main+0x56c>
					break;
				case 2:
					sendString_setAdress("2.    Novo    ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1166:	ba c0       	rjmp	.+372    	; 0x12dc <main+0x512>
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	8a e5       	ldi	r24, 0x5A	; 90
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	26 da       	rcall	.-2996   	; 0x5be <sendString_setAdress>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	d5 d8       	rcall	.-3670   	; 0x320 <sendChar>
    1176:	81 e4       	ldi	r24, 0x41	; 65
    1178:	d3 d8       	rcall	.-3674   	; 0x320 <sendChar>
					sendString_setAdress("     Eleitor  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	89 e6       	ldi	r24, 0x69	; 105
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	1d da       	rcall	.-3014   	; 0x5be <sendString_setAdress>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	cc d8       	rcall	.-3688   	; 0x320 <sendChar>
    1188:	82 e4       	ldi	r24, 0x42	; 66
					tecla = getCharacter_AB();
    118a:	ca d8       	rcall	.-3692   	; 0x320 <sendChar>
    118c:	b6 da       	rcall	.-2708   	; 0x6fa <getCharacter_AB>
					if(tecla == 'B'){ menu_operacional_index++;}
    118e:	82 34       	cpi	r24, 0x42	; 66
    1190:	11 f4       	brne	.+4      	; 0x1196 <main+0x3cc>
    1192:	e3 94       	inc	r14
    1194:	d0 c0       	rjmp	.+416    	; 0x1336 <main+0x56c>
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ELEITOR; menu_operacional_index = 0;}
    1196:	81 34       	cpi	r24, 0x41	; 65
    1198:	09 f0       	breq	.+2      	; 0x119c <main+0x3d2>
    119a:	cd c0       	rjmp	.+410    	; 0x1336 <main+0x56c>
					break;
				case 3:
					sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    119c:	a3 c0       	rjmp	.+326    	; 0x12e4 <main+0x51a>
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	88 e7       	ldi	r24, 0x78	; 120
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	0b da       	rcall	.-3050   	; 0x5be <sendString_setAdress>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	ba d8       	rcall	.-3724   	; 0x320 <sendChar>
    11ac:	81 e4       	ldi	r24, 0x41	; 65
					sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    11ae:	b8 d8       	rcall	.-3728   	; 0x320 <sendChar>
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	62 e0       	ldi	r22, 0x02	; 2
    11b4:	87 e8       	ldi	r24, 0x87	; 135
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	02 da       	rcall	.-3068   	; 0x5be <sendString_setAdress>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	b1 d8       	rcall	.-3742   	; 0x320 <sendChar>
    11be:	82 e4       	ldi	r24, 0x42	; 66
    11c0:	af d8       	rcall	.-3746   	; 0x320 <sendChar>
					tecla = getCharacter_AB();
    11c2:	9b da       	rcall	.-2762   	; 0x6fa <getCharacter_AB>
    11c4:	82 34       	cpi	r24, 0x42	; 66
					if(tecla == 'B') { menu_operacional_index++;}
    11c6:	11 f4       	brne	.+4      	; 0x11cc <main+0x402>
    11c8:	e3 94       	inc	r14
					else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_operacional_index = 0;}
    11ca:	b5 c0       	rjmp	.+362    	; 0x1336 <main+0x56c>
    11cc:	81 34       	cpi	r24, 0x41	; 65
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <main+0x408>
					break;
				case 4:
					sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    11d0:	b2 c0       	rjmp	.+356    	; 0x1336 <main+0x56c>
    11d2:	8d c0       	rjmp	.+282    	; 0x12ee <main+0x524>
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	86 e9       	ldi	r24, 0x96	; 150
    11da:	92 e0       	ldi	r25, 0x02	; 2
    11dc:	f0 d9       	rcall	.-3104   	; 0x5be <sendString_setAdress>
    11de:	81 e0       	ldi	r24, 0x01	; 1
					sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    11e0:	9f d8       	rcall	.-3778   	; 0x320 <sendChar>
    11e2:	81 e4       	ldi	r24, 0x41	; 65
    11e4:	9d d8       	rcall	.-3782   	; 0x320 <sendChar>
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	62 e0       	ldi	r22, 0x02	; 2
    11ea:	85 ea       	ldi	r24, 0xA5	; 165
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	e7 d9       	rcall	.-3122   	; 0x5be <sendString_setAdress>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	96 d8       	rcall	.-3796   	; 0x320 <sendChar>
					tecla = getCharacter_AB();
    11f4:	82 e4       	ldi	r24, 0x42	; 66
    11f6:	94 d8       	rcall	.-3800   	; 0x320 <sendChar>
					if(tecla == 'B') { menu_operacional_index++;}
    11f8:	80 da       	rcall	.-2816   	; 0x6fa <getCharacter_AB>
    11fa:	82 34       	cpi	r24, 0x42	; 66
    11fc:	11 f4       	brne	.+4      	; 0x1202 <main+0x438>
    11fe:	e3 94       	inc	r14
					else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_operacional_index = 0;}
    1200:	9a c0       	rjmp	.+308    	; 0x1336 <main+0x56c>
    1202:	81 34       	cpi	r24, 0x41	; 65
					break;
				case 5:
					sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    1204:	09 f0       	breq	.+2      	; 0x1208 <main+0x43e>
    1206:	97 c0       	rjmp	.+302    	; 0x1336 <main+0x56c>
    1208:	78 c0       	rjmp	.+240    	; 0x12fa <main+0x530>
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	84 eb       	ldi	r24, 0xB4	; 180
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	d5 d9       	rcall	.-3158   	; 0x5be <sendString_setAdress>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	84 d8       	rcall	.-3832   	; 0x320 <sendChar>
					sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    1218:	81 e4       	ldi	r24, 0x41	; 65
    121a:	82 d8       	rcall	.-3836   	; 0x320 <sendChar>
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	62 e0       	ldi	r22, 0x02	; 2
    1220:	83 ec       	ldi	r24, 0xC3	; 195
    1222:	92 e0       	ldi	r25, 0x02	; 2
    1224:	cc d9       	rcall	.-3176   	; 0x5be <sendString_setAdress>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	7b d8       	rcall	.-3850   	; 0x320 <sendChar>
					tecla = getCharacter_AB();
    122a:	82 e4       	ldi	r24, 0x42	; 66
					if(tecla == 'B') { menu_operacional_index++;}
    122c:	79 d8       	rcall	.-3854   	; 0x320 <sendChar>
    122e:	65 da       	rcall	.-2870   	; 0x6fa <getCharacter_AB>
    1230:	82 34       	cpi	r24, 0x42	; 66
    1232:	11 f4       	brne	.+4      	; 0x1238 <main+0x46e>
					else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_operacional_index = 0;}
    1234:	e3 94       	inc	r14
    1236:	7f c0       	rjmp	.+254    	; 0x1336 <main+0x56c>
    1238:	81 34       	cpi	r24, 0x41	; 65
					break;
				case 6:
					sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    123a:	09 f0       	breq	.+2      	; 0x123e <main+0x474>
    123c:	7c c0       	rjmp	.+248    	; 0x1336 <main+0x56c>
    123e:	62 c0       	rjmp	.+196    	; 0x1304 <main+0x53a>
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	82 ed       	ldi	r24, 0xD2	; 210
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	ba d9       	rcall	.-3212   	; 0x5be <sendString_setAdress>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	69 d8       	rcall	.-3886   	; 0x320 <sendChar>
    124e:	81 e4       	ldi	r24, 0x41	; 65
					sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    1250:	67 d8       	rcall	.-3890   	; 0x320 <sendChar>
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	81 ee       	ldi	r24, 0xE1	; 225
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	b1 d9       	rcall	.-3230   	; 0x5be <sendString_setAdress>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	60 d8       	rcall	.-3904   	; 0x320 <sendChar>
    1260:	82 e4       	ldi	r24, 0x42	; 66
    1262:	5e d8       	rcall	.-3908   	; 0x320 <sendChar>
    1264:	4a da       	rcall	.-2924   	; 0x6fa <getCharacter_AB>
    1266:	82 34       	cpi	r24, 0x42	; 66
					tecla = getCharacter_AB();
    1268:	11 f4       	brne	.+4      	; 0x126e <main+0x4a4>
    126a:	e3 94       	inc	r14
					if(tecla == 'B') {menu_operacional_index++;}
    126c:	64 c0       	rjmp	.+200    	; 0x1336 <main+0x56c>
    126e:	81 34       	cpi	r24, 0x41	; 65
    1270:	09 f0       	breq	.+2      	; 0x1274 <main+0x4aa>
    1272:	61 c0       	rjmp	.+194    	; 0x1336 <main+0x56c>
					else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_operacional_index = 0;}
    1274:	4d c0       	rjmp	.+154    	; 0x1310 <main+0x546>
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	80 ef       	ldi	r24, 0xF0	; 240
					break;
				case 7:
					sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	9f d9       	rcall	.-3266   	; 0x5be <sendString_setAdress>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	4e d8       	rcall	.-3940   	; 0x320 <sendChar>
    1284:	81 e4       	ldi	r24, 0x41	; 65
    1286:	4c d8       	rcall	.-3944   	; 0x320 <sendChar>
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	62 e0       	ldi	r22, 0x02	; 2
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	96 d9       	rcall	.-3284   	; 0x5be <sendString_setAdress>
    1292:	80 e0       	ldi	r24, 0x00	; 0
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    1294:	45 d8       	rcall	.-3958   	; 0x320 <sendChar>
    1296:	82 e4       	ldi	r24, 0x42	; 66
    1298:	43 d8       	rcall	.-3962   	; 0x320 <sendChar>
    129a:	2f da       	rcall	.-2978   	; 0x6fa <getCharacter_AB>
    129c:	82 34       	cpi	r24, 0x42	; 66
    129e:	11 f4       	brne	.+4      	; 0x12a4 <main+0x4da>
    12a0:	e3 94       	inc	r14
    12a2:	49 c0       	rjmp	.+146    	; 0x1336 <main+0x56c>
    12a4:	81 34       	cpi	r24, 0x41	; 65
    12a6:	09 f0       	breq	.+2      	; 0x12aa <main+0x4e0>
    12a8:	46 c0       	rjmp	.+140    	; 0x1336 <main+0x56c>
    12aa:	38 c0       	rjmp	.+112    	; 0x131c <main+0x552>
					tecla = getCharacter_AB();
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	61 e0       	ldi	r22, 0x01	; 1
					if(tecla == 'B') {menu_operacional_index++;}
    12b0:	8e e0       	ldi	r24, 0x0E	; 14
    12b2:	93 e0       	ldi	r25, 0x03	; 3
    12b4:	84 d9       	rcall	.-3320   	; 0x5be <sendString_setAdress>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
					else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_operacional_index = 0;}
    12b8:	33 d8       	rcall	.-3994   	; 0x320 <sendChar>
    12ba:	81 e4       	ldi	r24, 0x41	; 65
					break;
				case 8:
					sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
    12bc:	31 d8       	rcall	.-3998   	; 0x320 <sendChar>
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	62 e0       	ldi	r22, 0x02	; 2
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	7b d9       	rcall	.-3338   	; 0x5be <sendString_setAdress>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	2a d8       	rcall	.-4012   	; 0x320 <sendChar>
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
    12cc:	82 e4       	ldi	r24, 0x42	; 66
    12ce:	28 d8       	rcall	.-4016   	; 0x320 <sendChar>
    12d0:	14 da       	rcall	.-3032   	; 0x6fa <getCharacter_AB>
    12d2:	82 34       	cpi	r24, 0x42	; 66
    12d4:	49 f1       	breq	.+82     	; 0x1328 <main+0x55e>
    12d6:	81 34       	cpi	r24, 0x41	; 65
    12d8:	71 f5       	brne	.+92     	; 0x1336 <main+0x56c>
    12da:	29 c0       	rjmp	.+82     	; 0x132e <main+0x564>
    12dc:	ff 24       	eor	r15, r15
    12de:	f3 94       	inc	r15
    12e0:	e1 2c       	mov	r14, r1
					tecla = getCharacter_AB();
    12e2:	29 c0       	rjmp	.+82     	; 0x1336 <main+0x56c>
    12e4:	68 94       	set
					if(tecla == 'B') {menu_operacional_index = 1;}
    12e6:	ff 24       	eor	r15, r15
    12e8:	f1 f8       	bld	r15, 1
					else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_operacional_index = 0;}
    12ea:	e1 2c       	mov	r14, r1
    12ec:	24 c0       	rjmp	.+72     	; 0x1336 <main+0x56c>
				case 1:
					sendString_setAdress("1. Estado do  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("    Sistema   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B'){ menu_operacional_index++;}
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ESTADO; menu_operacional_index = 0;}
    12ee:	0f 2e       	mov	r0, r31
    12f0:	f3 e0       	ldi	r31, 0x03	; 3
    12f2:	ff 2e       	mov	r15, r31
    12f4:	f0 2d       	mov	r31, r0
				case 2:
					sendString_setAdress("2.    Novo    ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Eleitor  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B'){ menu_operacional_index++;}
					else if(tecla == 'A'){ option_menu_operacional = OPTION_ELEITOR; menu_operacional_index = 0;}
    12f6:	e1 2c       	mov	r14, r1
    12f8:	1e c0       	rjmp	.+60     	; 0x1336 <main+0x56c>
    12fa:	68 94       	set
    12fc:	ff 24       	eor	r15, r15
    12fe:	f2 f8       	bld	r15, 2
				case 3:
					sendString_setAdress("3.  Consulta  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("   de Horario ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_operacional_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_CONSULTA_HORA; menu_operacional_index = 0;}
    1300:	e1 2c       	mov	r14, r1
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <main+0x56c>
    1304:	0f 2e       	mov	r0, r31
    1306:	f5 e0       	ldi	r31, 0x05	; 5
    1308:	ff 2e       	mov	r15, r31
				case 4:
					sendString_setAdress("4.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("    Horario   ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_operacional_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_TROCA_HORA; menu_operacional_index = 0;}
    130a:	f0 2d       	mov	r31, r0
    130c:	e1 2c       	mov	r14, r1
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <main+0x56c>
    1310:	0f 2e       	mov	r0, r31
    1312:	f6 e0       	ldi	r31, 0x06	; 6
				case 5:
					sendString_setAdress("5.  Verific.  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("de Correspond.", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') { menu_operacional_index++;}
					else if(tecla == 'A') { option_menu_operacional = OPTION_VERIFICA_CORRESPONDENCIA; menu_operacional_index = 0;}
    1314:	ff 2e       	mov	r15, r31
    1316:	f0 2d       	mov	r31, r0
    1318:	e1 2c       	mov	r14, r1
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <main+0x56c>
    131c:	0f 2e       	mov	r0, r31
				case 6:
					sendString_setAdress("6. Relatorio  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("  de Votacao  ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_operacional_index++;}
					else if(tecla == 'A') {option_menu_operacional = OPTION_RELATORIO_VOTACAO; menu_operacional_index = 0;}
    131e:	f7 e0       	ldi	r31, 0x07	; 7
    1320:	ff 2e       	mov	r15, r31
    1322:	f0 2d       	mov	r31, r0
    1324:	e1 2c       	mov	r14, r1
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <main+0x56c>
				case 7:
					sendString_setAdress("7.  Troca de  ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_operacional_index++;}
					else if(tecla == 'A') {option_menu_operacional = OPTION_TROCA_SENHA; menu_operacional_index = 0;}
    1328:	ee 24       	eor	r14, r14
    132a:	e3 94       	inc	r14
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <main+0x56c>
    132e:	68 94       	set
    1330:	ff 24       	eor	r15, r15
					break;
				case 8:
					sendString_setAdress("8.  Resetar   ", 1, 1); sendChar(RIGHT_OPTION_CHARACTER); sendChar('A');
					sendString_setAdress("     Senha    ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('B');
					tecla = getCharacter_AB();
					if(tecla == 'B') {menu_operacional_index = 1;}
    1332:	f3 f8       	bld	r15, 3
    1334:	e1 2c       	mov	r14, r1
					else if(tecla == 'A') {option_menu_operacional = OPTION_RESET_SENHA; menu_operacional_index = 0;}
    1336:	8f 2d       	mov	r24, r15
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fc 01       	movw	r30, r24
    133c:	31 97       	sbiw	r30, 0x01	; 1
				default:
					break;
			}
			
			// Opções do menu do sistema
			switch(option_menu_operacional){
    133e:	e8 30       	cpi	r30, 0x08	; 8
    1340:	f1 05       	cpc	r31, r1
    1342:	08 f0       	brcs	.+2      	; 0x1346 <main+0x57c>
    1344:	30 c2       	rjmp	.+1120   	; 0x17a6 <main+0x9dc>
    1346:	e4 5c       	subi	r30, 0xC4	; 196
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	e6 c4       	rjmp	.+2508   	; 0x1d18 <__tablejump2__>
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	8d e1       	ldi	r24, 0x1D	; 29
					break;
				
				// Novo eleitor
				case OPTION_ELEITOR:
					input_caracters_counter = 0;
					sendString_setAdress("Eleitor:        ", 1, 1);
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	34 d9       	rcall	.-3480   	; 0x5be <sendString_setAdress>
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	8a ef       	ldi	r24, 0xFA	; 250
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	2f d9       	rcall	.-3490   	; 0x5be <sendString_setAdress>
    1360:	82 e4       	ldi	r24, 0x42	; 66
    1362:	56 d8       	rcall	.-3924   	; 0x410 <setDdRamAddress>
    1364:	81 e0       	ldi	r24, 0x01	; 1
					setDdRamAddress(0x40 + 2);
    1366:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    136a:	88 e4       	ldi	r24, 0x48	; 72
					sendChar(RIGHT_OPTION_CHARACTER);
    136c:	51 d8       	rcall	.-3934   	; 0x410 <setDdRamAddress>
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
					setDdRamAddress(0x40 + 8);
    1374:	8e e4       	ldi	r24, 0x4E	; 78
					sendChar(RETURN_CHARACTER);
    1376:	4c d8       	rcall	.-3944   	; 0x410 <setDdRamAddress>
    1378:	8f e7       	ldi	r24, 0x7F	; 127
    137a:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
					setDdRamAddress(0x40 + 14);
    137e:	88 e0       	ldi	r24, 0x08	; 8
					sendChar(LEFT_ARROW_CHARACTER);
    1380:	47 d8       	rcall	.-3954   	; 0x410 <setDdRamAddress>
    1382:	00 e0       	ldi	r16, 0x00	; 0
    1384:	a9 d2       	rcall	.+1362   	; 0x18d8 <get_tecla>
					setDdRamAddress(8);
    1386:	18 2f       	mov	r17, r24
    1388:	81 34       	cpi	r24, 0x41	; 65
    138a:	09 f0       	breq	.+2      	; 0x138e <main+0x5c4>
					// TODO
					break;
				
				// Novo eleitor
				case OPTION_ELEITOR:
					input_caracters_counter = 0;
    138c:	80 c0       	rjmp	.+256    	; 0x148e <main+0x6c4>
					sendChar(RETURN_CHARACTER);
					setDdRamAddress(0x40 + 14);
					sendChar(LEFT_ARROW_CHARACTER);
					setDdRamAddress(8);
					do{
						tecla = get_tecla();
    138e:	05 30       	cpi	r16, 0x05	; 5
    1390:	09 f0       	breq	.+2      	; 0x1394 <main+0x5ca>
    1392:	7d c0       	rjmp	.+250    	; 0x148e <main+0x6c4>
						// Se a tecla for A, valida o eleitor
						if(tecla == 'A' && input_caracters_counter == 5){
    1394:	be 01       	movw	r22, r28
    1396:	6a 55       	subi	r22, 0x5A	; 90
    1398:	7d 4f       	sbci	r23, 0xFD	; 253
    139a:	ce 01       	movw	r24, r28
    139c:	8f 55       	subi	r24, 0x5F	; 95
							
							// Obtem validação do eleitor
							char validacao = valida_eleitor(numero_eleitor, nome_eleitor);
    139e:	9d 4f       	sbci	r25, 0xFD	; 253
    13a0:	be d9       	rcall	.-3204   	; 0x71e <valida_eleitor>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <main+0x5de>
    13a6:	49 c0       	rjmp	.+146    	; 0x143a <main+0x670>
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	61 e0       	ldi	r22, 0x01	; 1
							
							// Se o eleitor for valido, exibe no display o nome e aguarda confirmação
							if(validacao == ELEITOR_VALIDO){
    13ac:	ce 01       	movw	r24, r28
    13ae:	8a 55       	subi	r24, 0x5A	; 90
								sendString_setAdress(nome_eleitor, 1, 1);
    13b0:	9d 4f       	sbci	r25, 0xFD	; 253
    13b2:	05 d9       	rcall	.-3574   	; 0x5be <sendString_setAdress>
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	62 e0       	ldi	r22, 0x02	; 2
    13b8:	87 e8       	ldi	r24, 0x87	; 135
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	00 d9       	rcall	.-3584   	; 0x5be <sendString_setAdress>
								sendString_setAdress("Confirma?  ", 2, 1);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    13c4:	83 e9       	ldi	r24, 0x93	; 147
    13c6:	91 e0       	ldi	r25, 0x01	; 1
								sendChar(RIGHT_OPTION_CHARACTER); sendString("A ");
    13c8:	1d d9       	rcall	.-3526   	; 0x604 <sendString>
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    13d0:	82 e4       	ldi	r24, 0x42	; 66
    13d2:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
								sendChar(RETURN_CHARACTER); sendChar('B');
    13d6:	91 d9       	rcall	.-3294   	; 0x6fa <getCharacter_AB>
    13d8:	18 2f       	mov	r17, r24
    13da:	81 34       	cpi	r24, 0x41	; 65
    13dc:	51 f5       	brne	.+84     	; 0x1432 <main+0x668>
    13de:	ce 01       	movw	r24, r28
								tecla = getCharacter_AB();
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	41 da       	rcall	.-2942   	; 0x866 <votacao>
    13e4:	81 30       	cpi	r24, 0x01	; 1
								
								// Se a tecla for 'A', confirma o eleitor, guarda nome e numero e inicia processo de votacao
								if(tecla == 'A'){
    13e6:	59 f4       	brne	.+22     	; 0x13fe <main+0x634>
    13e8:	41 e0       	ldi	r20, 0x01	; 1
									char validacao_votacao = 0;						
									// Obtem validacao da votacao
									validacao_votacao = votacao(&relatorio_votacao);
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	8e e2       	ldi	r24, 0x2E	; 46
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	e6 d8       	rcall	.-3636   	; 0x5be <sendString_setAdress>
									
									// Se o tempo de 2 minutos foi esgotado
									if(validacao_votacao == TEMPO_ESGOTADO){
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	62 e0       	ldi	r22, 0x02	; 2
										sendString_setAdress("      TEMPO     ", 1, 1);
    13f6:	8f e3       	ldi	r24, 0x3F	; 63
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	e1 d8       	rcall	.-3646   	; 0x5be <sendString_setAdress>
    13fc:	ff cf       	rjmp	.-2      	; 0x13fc <main+0x632>
    13fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1400:	19 f4       	brne	.+6      	; 0x1408 <main+0x63e>
										sendString_setAdress("     ESGOTADO   ", 2, 1);
    1402:	0d da       	rcall	.-3046   	; 0x81e <print_erroComunicacao>
    1404:	87 d9       	rcall	.-3314   	; 0x714 <getCharacter_B>
    1406:	ff cf       	rjmp	.-2      	; 0x1406 <main+0x63c>
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	09 f0       	breq	.+2      	; 0x140e <main+0x644>
    140c:	73 c0       	rjmp	.+230    	; 0x14f4 <main+0x72a>
    140e:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <__data_end>
										while(1);
									}
									
									// Se houve erro na comunicação serial no processo de votação
									else if(validacao_votacao == ERRO_COMUNICACAO){
    1412:	8f 5f       	subi	r24, 0xFF	; 255
										print_erroComunicacao();
    1414:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <__data_end>
										tecla = getCharacter_B();
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	80 e5       	ldi	r24, 0x50	; 80
										menu_operacional_index = 2;
										while(1);
									}
									
									// Se a votacao foi concluida com sucesso--------------------------- CONCLUIR AQUI
									else if(validacao_votacao == VOTACAO_CONCLUIDA){
    141e:	93 e0       	ldi	r25, 0x03	; 3
    1420:	ce d8       	rcall	.-3684   	; 0x5be <sendString_setAdress>
    1422:	41 e0       	ldi	r20, 0x01	; 1
										num_eleitores++;
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	86 e7       	ldi	r24, 0x76	; 118
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	c9 d8       	rcall	.-3694   	; 0x5be <sendString_setAdress>
										sendString_setAdress("       FIM      ", 1, 1);
    142c:	0e 94 61 00 	call	0xc2	; 0xc2 <votingEndSong>
    1430:	61 c0       	rjmp	.+194    	; 0x14f4 <main+0x72a>
    1432:	82 34       	cpi	r24, 0x42	; 66
    1434:	09 f0       	breq	.+2      	; 0x1438 <main+0x66e>
										sendString_setAdress("                ", 2, 1);
    1436:	5e c0       	rjmp	.+188    	; 0x14f4 <main+0x72a>
    1438:	54 c0       	rjmp	.+168    	; 0x14e2 <main+0x718>
    143a:	81 11       	cpse	r24, r1
    143c:	17 c0       	rjmp	.+46     	; 0x146c <main+0x6a2>
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	61 e0       	ldi	r22, 0x01	; 1
										votingEndSong();
    1442:	81 e6       	ldi	r24, 0x61	; 97
    1444:	93 e0       	ldi	r25, 0x03	; 3
    1446:	bb d8       	rcall	.-3722   	; 0x5be <sendString_setAdress>
										while(1);
									}*/
								}
								
								// Se a tecla for 'B', volta ao menu anterior
								else if(tecla == 'B'){
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	88 e7       	ldi	r24, 0x78	; 120
    144e:	91 e0       	ldi	r25, 0x01	; 1
								}
							
							}
							
							// Se o eleitor for invalido, informa no display e aguarda retorno ao menu
							else if(validacao == ELEITOR_INVALIDO){
    1450:	b6 d8       	rcall	.-3732   	; 0x5be <sendString_setAdress>
    1452:	82 e0       	ldi	r24, 0x02	; 2
								sendString_setAdress("ELEITOR INVALIDO", 1, 1);
    1454:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    1458:	82 e4       	ldi	r24, 0x42	; 66
    145a:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    145e:	5a d9       	rcall	.-3404   	; 0x714 <getCharacter_B>
								sendString_setAdress("              ", 2, 1);
    1460:	18 2f       	mov	r17, r24
    1462:	f1 2c       	mov	r15, r1
    1464:	68 94       	set
    1466:	ee 24       	eor	r14, r14
								sendChar(RETURN_CHARACTER); sendChar('B');
    1468:	e1 f8       	bld	r14, 1
    146a:	44 c0       	rjmp	.+136    	; 0x14f4 <main+0x72a>
    146c:	8f 3f       	cpi	r24, 0xFF	; 255
    146e:	09 f0       	breq	.+2      	; 0x1472 <main+0x6a8>
    1470:	41 c0       	rjmp	.+130    	; 0x14f4 <main+0x72a>
								tecla = getCharacter_B();
    1472:	d5 d9       	rcall	.-3158   	; 0x81e <print_erroComunicacao>
    1474:	82 e0       	ldi	r24, 0x02	; 2
								option_menu_operacional = 0;
    1476:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
								menu_operacional_index = 2;
    147a:	82 e4       	ldi	r24, 0x42	; 66
    147c:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
							}
							
							// Informa se houve erro na comunicação serial na obtenção do eleitor
							else if(validacao == ERRO_COMUNICACAO){
    1480:	49 d9       	rcall	.-3438   	; 0x714 <getCharacter_B>
    1482:	18 2f       	mov	r17, r24
								print_erroComunicacao();
    1484:	f1 2c       	mov	r15, r1
    1486:	68 94       	set
								sendChar(RETURN_CHARACTER); sendChar('B');
    1488:	ee 24       	eor	r14, r14
    148a:	e1 f8       	bld	r14, 1
    148c:	33 c0       	rjmp	.+102    	; 0x14f4 <main+0x72a>
    148e:	12 34       	cpi	r17, 0x42	; 66
    1490:	69 f1       	breq	.+90     	; 0x14ec <main+0x722>
    1492:	13 34       	cpi	r17, 0x43	; 67
								tecla = getCharacter_B();
    1494:	61 f4       	brne	.+24     	; 0x14ae <main+0x6e4>
    1496:	dd 24       	eor	r13, r13
    1498:	da 94       	dec	r13
								option_menu_operacional = 0;
    149a:	d0 0e       	add	r13, r16
								menu_operacional_index = 2;
    149c:	87 e0       	ldi	r24, 0x07	; 7
    149e:	80 0f       	add	r24, r16
    14a0:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
							}
						}
						
						// Se a tecla for B, volta para o menu
						else if(tecla == 'B'){
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
							option_menu_operacional = 0;
							menu_operacional_index = 2;
						}
						// Se a tecla for C, corrige último caractere
						else if(tecla == 'C'){
    14aa:	0d 2d       	mov	r16, r13
							input_caracters_counter--;
    14ac:	23 c0       	rjmp	.+70     	; 0x14f4 <main+0x72a>
    14ae:	05 30       	cpi	r16, 0x05	; 5
    14b0:	08 f5       	brcc	.+66     	; 0x14f4 <main+0x72a>
							setDdRamAddress(8 + input_caracters_counter);
    14b2:	1a 32       	cpi	r17, 0x2A	; 42
    14b4:	f9 f0       	breq	.+62     	; 0x14f4 <main+0x72a>
    14b6:	14 34       	cpi	r17, 0x44	; 68
    14b8:	e9 f0       	breq	.+58     	; 0x14f4 <main+0x72a>
							sendChar(' ');
    14ba:	13 32       	cpi	r17, 0x23	; 35
    14bc:	d9 f0       	breq	.+54     	; 0x14f4 <main+0x72a>
    14be:	11 34       	cpi	r17, 0x41	; 65
							option_menu_operacional = 0;
							menu_operacional_index = 2;
						}
						// Se a tecla for C, corrige último caractere
						else if(tecla == 'C'){
							input_caracters_counter--;
    14c0:	c9 f0       	breq	.+50     	; 0x14f4 <main+0x72a>
    14c2:	88 e0       	ldi	r24, 0x08	; 8
							setDdRamAddress(8 + input_caracters_counter);
							sendChar(' ');
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    14c4:	80 0f       	add	r24, r16
    14c6:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    14ca:	81 2f       	mov	r24, r17
    14cc:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    14d0:	e1 ea       	ldi	r30, 0xA1	; 161
    14d2:	f2 e0       	ldi	r31, 0x02	; 2
    14d4:	ec 0f       	add	r30, r28
							setDdRamAddress(8 + input_caracters_counter);
    14d6:	fd 1f       	adc	r31, r29
    14d8:	e0 0f       	add	r30, r16
    14da:	f1 1d       	adc	r31, r1
    14dc:	10 83       	st	Z, r17
							sendChar(tecla);
    14de:	0f 5f       	subi	r16, 0xFF	; 255
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <main+0x72a>
    14e2:	f1 2c       	mov	r15, r1
							numero_eleitor[input_caracters_counter] = tecla;
    14e4:	68 94       	set
    14e6:	ee 24       	eor	r14, r14
    14e8:	e1 f8       	bld	r14, 1
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <main+0x72a>
    14ec:	f1 2c       	mov	r15, r1
    14ee:	68 94       	set
    14f0:	ee 24       	eor	r14, r14
							input_caracters_counter++;
    14f2:	e1 f8       	bld	r14, 1
    14f4:	12 34       	cpi	r17, 0x42	; 66
									}*/
								}
								
								// Se a tecla for 'B', volta ao menu anterior
								else if(tecla == 'B'){
									option_menu_operacional = 0;
    14f6:	09 f0       	breq	.+2      	; 0x14fa <main+0x730>
									menu_operacional_index = 2;
    14f8:	45 cf       	rjmp	.-374    	; 0x1384 <main+0x5ba>
    14fa:	55 c1       	rjmp	.+682    	; 0x17a6 <main+0x9dc>
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	61 e0       	ldi	r22, 0x01	; 1
							}
						}
						
						// Se a tecla for B, volta para o menu
						else if(tecla == 'B'){
							option_menu_operacional = 0;
    1500:	82 e7       	ldi	r24, 0x72	; 114
							menu_operacional_index = 2;
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	5c d8       	rcall	.-3912   	; 0x5be <sendString_setAdress>
    1506:	41 e0       	ldi	r20, 0x01	; 1
							setDdRamAddress(8 + input_caracters_counter);
							sendChar(tecla);
							numero_eleitor[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(tecla != 'B');
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	88 e7       	ldi	r24, 0x78	; 120
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	57 d8       	rcall	.-3922   	; 0x5be <sendString_setAdress>
					break;
				
				case OPTION_CONSULTA_HORA:
					sendString_setAdress("HORA ATUAL:     ", 1, 1);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    1516:	82 e4       	ldi	r24, 0x42	; 66
    1518:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
					sendString_setAdress("              ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    151c:	56 d3       	rcall	.+1708   	; 0x1bca <exibe_hora_display>
    151e:	dc d1       	rcall	.+952    	; 0x18d8 <get_tecla>
    1520:	82 34       	cpi	r24, 0x42	; 66
    1522:	09 f0       	breq	.+2      	; 0x1526 <main+0x75c>
    1524:	40 c1       	rjmp	.+640    	; 0x17a6 <main+0x9dc>
    1526:	55 d3       	rcall	.+1706   	; 0x1bd2 <apaga_hora_display>
    1528:	f1 2c       	mov	r15, r1
    152a:	0f 2e       	mov	r0, r31
    152c:	f3 e0       	ldi	r31, 0x03	; 3
    152e:	ef 2e       	mov	r14, r31
    1530:	f0 2d       	mov	r31, r0
    1532:	39 c1       	rjmp	.+626    	; 0x17a6 <main+0x9dc>
					exibe_hora_display();
    1534:	fe 01       	movw	r30, r28
    1536:	e0 53       	subi	r30, 0x30	; 48
					if(get_tecla() == 'B'){
    1538:	fd 4f       	sbci	r31, 0xFD	; 253
    153a:	85 e0       	ldi	r24, 0x05	; 5
    153c:	df 01       	movw	r26, r30
    153e:	98 2f       	mov	r25, r24
						apaga_hora_display();
    1540:	1d 92       	st	X+, r1
    1542:	9a 95       	dec	r25
						option_menu_operacional = 0;
    1544:	e9 f7       	brne	.-6      	; 0x1540 <main+0x776>
						menu_operacional_index = 3;
    1546:	35 97       	sbiw	r30, 0x05	; 5
    1548:	df 01       	movw	r26, r30
    154a:	1d 92       	st	X+, r1
    154c:	8a 95       	dec	r24
    154e:	e9 f7       	brne	.-6      	; 0x154a <main+0x780>
					// TO DO
					break;

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
					char guarda_novasenha1_mesario[5] = {0};
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	83 e8       	ldi	r24, 0x83	; 131
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	32 d8       	rcall	.-3996   	; 0x5be <sendString_setAdress>
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	8a ef       	ldi	r24, 0xFA	; 250
    1560:	91 e0       	ldi	r25, 0x01	; 1
					char guarda_novasenha2_mesario[5] = {0};
    1562:	2d d8       	rcall	.-4006   	; 0x5be <sendString_setAdress>
    1564:	82 e4       	ldi	r24, 0x42	; 66
    1566:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    156a:	81 e0       	ldi	r24, 0x01	; 1
					char b = 1;
					// primeiro pedido de nova senha
					sendString_setAdress("Nova Senha:     ", 1, 1);
    156c:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    1570:	88 e4       	ldi	r24, 0x48	; 72
    1572:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    1576:	82 e0       	ldi	r24, 0x02	; 2
					sendString_setAdress("A:    B:    C:  ", 2, 1);
    1578:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    157c:	8e e4       	ldi	r24, 0x4E	; 78
    157e:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    1582:	8f e7       	ldi	r24, 0x7F	; 127
					setDdRamAddress(0x40 + 2);
    1584:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    1588:	01 e0       	ldi	r16, 0x01	; 1
					sendChar(RIGHT_OPTION_CHARACTER);
    158a:	d1 2c       	mov	r13, r1
    158c:	a5 d1       	rcall	.+842    	; 0x18d8 <get_tecla>
    158e:	18 2f       	mov	r17, r24
					setDdRamAddress(0x40 + 8);
    1590:	81 34       	cpi	r24, 0x41	; 65
    1592:	19 f4       	brne	.+6      	; 0x159a <main+0x7d0>
    1594:	b5 e0       	ldi	r27, 0x05	; 5
					sendChar(RETURN_CHARACTER);
    1596:	db 16       	cp	r13, r27
    1598:	51 f1       	breq	.+84     	; 0x15ee <main+0x824>
    159a:	12 34       	cpi	r17, 0x42	; 66
					setDdRamAddress(0x40 + 14);
    159c:	51 f1       	breq	.+84     	; 0x15f2 <main+0x828>
    159e:	13 34       	cpi	r17, 0x43	; 67
    15a0:	59 f4       	brne	.+22     	; 0x15b8 <main+0x7ee>
					sendChar(LEFT_ARROW_CHARACTER);
    15a2:	1f ef       	ldi	r17, 0xFF	; 255
    15a4:	1d 0d       	add	r17, r13

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
					char guarda_novasenha1_mesario[5] = {0};
					char guarda_novasenha2_mesario[5] = {0};
					char b = 1;
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
				case OPTION_RELATORIO_VOTACAO:
					// TO DO
					break;

				case OPTION_TROCA_SENHA:
					input_caracters_counter = 0;
    15a8:	8d 0d       	add	r24, r13
					sendChar(RETURN_CHARACTER);
					setDdRamAddress(0x40 + 14);
					sendChar(LEFT_ARROW_CHARACTER);

					do{
						tecla = get_tecla();
    15aa:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    15ae:	80 e2       	ldi	r24, 0x20	; 32
						// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
						if(tecla == 'A' && input_caracters_counter == 5){
    15b0:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    15b4:	d1 2e       	mov	r13, r17
    15b6:	1f c0       	rjmp	.+62     	; 0x15f6 <main+0x82c>
    15b8:	84 e0       	ldi	r24, 0x04	; 4
							b = 2;
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
    15ba:	8d 15       	cp	r24, r13
    15bc:	e0 f0       	brcs	.+56     	; 0x15f6 <main+0x82c>
							option_menu_operacional = 0;
							b = 3;
						}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    15be:	1a 32       	cpi	r17, 0x2A	; 42
    15c0:	d1 f0       	breq	.+52     	; 0x15f6 <main+0x82c>
							input_caracters_counter--;
    15c2:	14 34       	cpi	r17, 0x44	; 68
    15c4:	c1 f0       	breq	.+48     	; 0x15f6 <main+0x82c>
							setDdRamAddress(11 + input_caracters_counter);
    15c6:	13 32       	cpi	r17, 0x23	; 35
    15c8:	b1 f0       	breq	.+44     	; 0x15f6 <main+0x82c>
    15ca:	11 34       	cpi	r17, 0x41	; 65
    15cc:	a1 f0       	breq	.+40     	; 0x15f6 <main+0x82c>
							sendChar(' ');
    15ce:	8b e0       	ldi	r24, 0x0B	; 11
    15d0:	8d 0d       	add	r24, r13
    15d2:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
							option_menu_operacional = 0;
							b = 3;
						}
						// se a tecla for C, apaga o último caractere (não funcionando)
						else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
							input_caracters_counter--;
    15d6:	8a e2       	ldi	r24, 0x2A	; 42
							setDdRamAddress(11 + input_caracters_counter);
							sendChar(' ');
						}
						// Se for um caractere válido e ainda não tiver execedido o limite, o contabiliza
						else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    15d8:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    15dc:	e0 ed       	ldi	r30, 0xD0	; 208
    15de:	f2 e0       	ldi	r31, 0x02	; 2
    15e0:	ec 0f       	add	r30, r28
    15e2:	fd 1f       	adc	r31, r29
    15e4:	ed 0d       	add	r30, r13
    15e6:	f1 1d       	adc	r31, r1
    15e8:	10 83       	st	Z, r17
    15ea:	d3 94       	inc	r13
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <main+0x82c>
							setDdRamAddress(11 + input_caracters_counter);
    15ee:	02 e0       	ldi	r16, 0x02	; 2
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <main+0x82c>
    15f2:	03 e0       	ldi	r16, 0x03	; 3
    15f4:	f1 2c       	mov	r15, r1
							sendChar('*');
    15f6:	01 30       	cpi	r16, 0x01	; 1
    15f8:	49 f2       	breq	.-110    	; 0x158c <main+0x7c2>
    15fa:	03 30       	cpi	r16, 0x03	; 3
							guarda_novasenha1_mesario[input_caracters_counter] = tecla;
    15fc:	09 f4       	brne	.+2      	; 0x1600 <main+0x836>
    15fe:	ce c0       	rjmp	.+412    	; 0x179c <main+0x9d2>
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	84 e9       	ldi	r24, 0x94	; 148
    1606:	93 e0       	ldi	r25, 0x03	; 3
    1608:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
							input_caracters_counter++;
    160c:	41 e0       	ldi	r20, 0x01	; 1

					do{
						tecla = get_tecla();
						// se tecla A e senha com 5 dígitos, prossegue para repetição de senha
						if(tecla == 'A' && input_caracters_counter == 5){
							b = 2;
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	85 ea       	ldi	r24, 0xA5	; 165
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
							option_menu_operacional = 0;
							b = 3;
    1612:	93 e0       	ldi	r25, 0x03	; 3
						if(tecla == 'A' && input_caracters_counter == 5){
							b = 2;
						}
						// se a tecla for B, volta para "urna bloqueada"
						else if(tecla == 'B'){
							option_menu_operacional = 0;
    1614:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
							setDdRamAddress(11 + input_caracters_counter);
							sendChar('*');
							guarda_novasenha1_mesario[input_caracters_counter] = tecla;
							input_caracters_counter++;
						}
					} while(b == 1);
    1618:	80 e0       	ldi	r24, 0x00	; 0
					
					if(b != 3){
    161a:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    161e:	81 e4       	ldi	r24, 0x41	; 65
						sendString_setAdress(" Repita a Nova  ", 1, 1);
    1620:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    1624:	6a d8       	rcall	.-3884   	; 0x6fa <getCharacter_AB>
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	83 e8       	ldi	r24, 0x83	; 131
						sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
    162c:	93 e0       	ldi	r25, 0x03	; 3
    162e:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	62 e0       	ldi	r22, 0x02	; 2
    1636:	8a ef       	ldi	r24, 0xFA	; 250
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
    163e:	82 e4       	ldi	r24, 0x42	; 66
    1640:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
						tecla = getCharacter_AB();
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>

						// segundo pedido de nova senha
						input_caracters_counter = 0;
						sendString_setAdress("Nova Senha:     ", 1, 1);
    164a:	88 e4       	ldi	r24, 0x48	; 72
    164c:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
						sendString_setAdress("A:    B:    C:  ", 2, 1);
    1656:	8e e4       	ldi	r24, 0x4E	; 78
    1658:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    165c:	8f e7       	ldi	r24, 0x7F	; 127
    165e:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
						setDdRamAddress(0x40 + 2);
    1662:	d1 2c       	mov	r13, r1
    1664:	39 d1       	rcall	.+626    	; 0x18d8 <get_tecla>
						sendChar(RIGHT_OPTION_CHARACTER);
    1666:	18 2f       	mov	r17, r24
    1668:	81 34       	cpi	r24, 0x41	; 65
    166a:	09 f0       	breq	.+2      	; 0x166e <main+0x8a4>
						setDdRamAddress(0x40 + 8);
    166c:	63 c0       	rjmp	.+198    	; 0x1734 <main+0x96a>
    166e:	95 e0       	ldi	r25, 0x05	; 5
    1670:	d9 12       	cpse	r13, r25
						sendChar(RETURN_CHARACTER);
    1672:	60 c0       	rjmp	.+192    	; 0x1734 <main+0x96a>
    1674:	15 c0       	rjmp	.+42     	; 0x16a0 <main+0x8d6>
    1676:	82 2f       	mov	r24, r18
						setDdRamAddress(0x40 + 14);
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	e0 ed       	ldi	r30, 0xD0	; 208
    167c:	f2 e0       	ldi	r31, 0x02	; 2
						sendChar(LEFT_ARROW_CHARACTER);
    167e:	ec 0f       	add	r30, r28
    1680:	fd 1f       	adc	r31, r29
    1682:	e8 0f       	add	r30, r24
						sendString_setAdress(" Repita a Nova  ", 1, 1);
						sendString_setAdress("    Senha     ", 2, 1); sendChar(DOWN_ARROW_CHARACTER); sendChar('A');
						tecla = getCharacter_AB();

						// segundo pedido de nova senha
						input_caracters_counter = 0;
    1684:	f9 1f       	adc	r31, r25
						setDdRamAddress(0x40 + 14);
						sendChar(LEFT_ARROW_CHARACTER);

						char a, i;
						do{
							tecla = get_tecla();
    1686:	30 81       	ld	r19, Z
    1688:	eb ec       	ldi	r30, 0xCB	; 203
    168a:	f2 e0       	ldi	r31, 0x02	; 2
							// se tecla A e senha com 5 dígitos, confere senhas
							if(tecla == 'A' && input_caracters_counter == 5){
    168c:	ec 0f       	add	r30, r28
    168e:	fd 1f       	adc	r31, r29
    1690:	e8 0f       	add	r30, r24
    1692:	f9 1f       	adc	r31, r25
    1694:	80 81       	ld	r24, Z
    1696:	38 13       	cpse	r19, r24
    1698:	01 c0       	rjmp	.+2      	; 0x169c <main+0x8d2>
								a = 0;
								for(i = 0; i < 5; i++){
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
    169a:	4f 5f       	subi	r20, 0xFF	; 255
    169c:	2f 5f       	subi	r18, 0xFF	; 255
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <main+0x8da>
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	25 30       	cpi	r18, 0x05	; 5
    16a6:	38 f3       	brcs	.-50     	; 0x1676 <main+0x8ac>
    16a8:	45 30       	cpi	r20, 0x05	; 5
    16aa:	49 f5       	brne	.+82     	; 0x16fe <main+0x934>
    16ac:	12 c0       	rjmp	.+36     	; 0x16d2 <main+0x908>
    16ae:	82 2f       	mov	r24, r18
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	e0 ed       	ldi	r30, 0xD0	; 208
    16b4:	f2 e0       	ldi	r31, 0x02	; 2
    16b6:	ec 0f       	add	r30, r28
    16b8:	fd 1f       	adc	r31, r29
    16ba:	e8 0f       	add	r30, r24
    16bc:	f9 1f       	adc	r31, r25
    16be:	30 81       	ld	r19, Z
						do{
							tecla = get_tecla();
							// se tecla A e senha com 5 dígitos, confere senhas
							if(tecla == 'A' && input_caracters_counter == 5){
								a = 0;
								for(i = 0; i < 5; i++){
    16c0:	e7 eb       	ldi	r30, 0xB7	; 183
    16c2:	f2 e0       	ldi	r31, 0x02	; 2
    16c4:	ec 0f       	add	r30, r28
    16c6:	fd 1f       	adc	r31, r29
    16c8:	e8 0f       	add	r30, r24
    16ca:	f9 1f       	adc	r31, r25
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
								}
								menu_operacional_index = OPTION_TROCA_SENHA;
								if(a == 5){
    16cc:	30 83       	st	Z, r19
    16ce:	2f 5f       	subi	r18, 0xFF	; 255
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <main+0x90a>
									for(i = 0; i < 5; i++) {guarda_senha_mesario[i] = guarda_novasenha1_mesario[i];}
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	25 30       	cpi	r18, 0x05	; 5
    16d6:	58 f3       	brcs	.-42     	; 0x16ae <main+0x8e4>
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	84 eb       	ldi	r24, 0xB4	; 180
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	85 ec       	ldi	r24, 0xC5	; 197
    16ea:	93 e0       	ldi	r25, 0x03	; 3
    16ec:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    16f6:	82 e4       	ldi	r24, 0x42	; 66
    16f8:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
									sendString_setAdress(" Troca de Senha ", 1, 1);
    16fc:	12 c0       	rjmp	.+36     	; 0x1722 <main+0x958>
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	84 ed       	ldi	r24, 0xD4	; 212
    1704:	93 e0       	ldi	r25, 0x03	; 3
    1706:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
									sendString_setAdress("    Efetuada  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    170a:	41 e0       	ldi	r20, 0x01	; 1
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	85 ee       	ldi	r24, 0xE5	; 229
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
    171c:	82 e4       	ldi	r24, 0x42	; 66
    171e:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
								}
								else{
									sendString_setAdress("   Senhas Nao   ", 1, 1);
    1722:	0e 94 8a 03 	call	0x714	; 0x714 <getCharacter_B>
    1726:	03 e0       	ldi	r16, 0x03	; 3
    1728:	f1 2c       	mov	r15, r1
    172a:	0f 2e       	mov	r0, r31
    172c:	f7 e0       	ldi	r31, 0x07	; 7
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
    172e:	ef 2e       	mov	r14, r31
    1730:	f0 2d       	mov	r31, r0
    1732:	30 c0       	rjmp	.+96     	; 0x1794 <main+0x9ca>
    1734:	12 34       	cpi	r17, 0x42	; 66
    1736:	41 f1       	breq	.+80     	; 0x1788 <main+0x9be>
    1738:	13 34       	cpi	r17, 0x43	; 67
    173a:	59 f4       	brne	.+22     	; 0x1752 <main+0x988>
    173c:	1f ef       	ldi	r17, 0xFF	; 255
    173e:	1d 0d       	add	r17, r13
    1740:	8a e0       	ldi	r24, 0x0A	; 10
    1742:	8d 0d       	add	r24, r13
    1744:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
								}
								tecla = getCharacter_B();
    1748:	80 e2       	ldi	r24, 0x20	; 32
								option_menu_operacional = 0;
								b = 3;
    174a:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
							if(tecla == 'A' && input_caracters_counter == 5){
								a = 0;
								for(i = 0; i < 5; i++){
									if(guarda_novasenha1_mesario[i] == guarda_novasenha2_mesario[i]) {a++;}
								}
								menu_operacional_index = OPTION_TROCA_SENHA;
    174e:	d1 2e       	mov	r13, r17
    1750:	21 c0       	rjmp	.+66     	; 0x1794 <main+0x9ca>
    1752:	a4 e0       	ldi	r26, 0x04	; 4
    1754:	ad 15       	cp	r26, r13
									sendString_setAdress("   Senhas Nao   ", 1, 1);
									sendString_setAdress("    Conferem  ", 2, 1); sendChar(RETURN_CHARACTER); sendChar('B');
								}
								tecla = getCharacter_B();
								option_menu_operacional = 0;
								b = 3;
    1756:	f0 f0       	brcs	.+60     	; 0x1794 <main+0x9ca>
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
    1758:	1a 32       	cpi	r17, 0x2A	; 42
    175a:	e1 f0       	breq	.+56     	; 0x1794 <main+0x9ca>
								option_menu_operacional = 0;
								menu_operacional_index = OPTION_TROCA_SENHA;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
    175c:	14 34       	cpi	r17, 0x44	; 68
    175e:	d1 f0       	breq	.+52     	; 0x1794 <main+0x9ca>
								input_caracters_counter--;
    1760:	13 32       	cpi	r17, 0x23	; 35
    1762:	c1 f0       	breq	.+48     	; 0x1794 <main+0x9ca>
								setDdRamAddress(11 + input_caracters_counter);
    1764:	11 34       	cpi	r17, 0x41	; 65
    1766:	b1 f0       	breq	.+44     	; 0x1794 <main+0x9ca>
    1768:	8b e0       	ldi	r24, 0x0B	; 11
    176a:	8d 0d       	add	r24, r13
								sendChar(' ');
    176c:	0e 94 08 02 	call	0x410	; 0x410 <setDdRamAddress>
    1770:	8a e2       	ldi	r24, 0x2A	; 42
								menu_operacional_index = OPTION_TROCA_SENHA;
								b = 3;
							}
							// se a tecla for C, apaga o último caractere (não funcionando)
							else if(tecla == 'C' /*&& input_caracters_counter > 0*/){
								input_caracters_counter--;
    1772:	0e 94 90 01 	call	0x320	; 0x320 <sendChar>
								setDdRamAddress(11 + input_caracters_counter);
								sendChar(' ');
							}
							// se for um caractere válido e ainda não tiver execedido o limite, é contabilizado
							else if(input_caracters_counter < 5 && tecla != '*' && tecla != 'D' && tecla != '#' && tecla != 'A'){
    1776:	eb ec       	ldi	r30, 0xCB	; 203
    1778:	f2 e0       	ldi	r31, 0x02	; 2
    177a:	ec 0f       	add	r30, r28
    177c:	fd 1f       	adc	r31, r29
    177e:	ed 0d       	add	r30, r13
    1780:	f1 1d       	adc	r31, r1
    1782:	10 83       	st	Z, r17
    1784:	d3 94       	inc	r13
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <main+0x9ca>
    1788:	03 e0       	ldi	r16, 0x03	; 3
    178a:	f1 2c       	mov	r15, r1
								setDdRamAddress(11 + input_caracters_counter);
    178c:	0f 2e       	mov	r0, r31
    178e:	f7 e0       	ldi	r31, 0x07	; 7
    1790:	ef 2e       	mov	r14, r31
    1792:	f0 2d       	mov	r31, r0
								sendChar('*');
    1794:	02 30       	cpi	r16, 0x02	; 2
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0x9d0>
    1798:	65 cf       	rjmp	.-310    	; 0x1664 <main+0x89a>
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
    179a:	05 c0       	rjmp	.+10     	; 0x17a6 <main+0x9dc>
    179c:	f1 2c       	mov	r15, r1
    179e:	0f 2e       	mov	r0, r31
    17a0:	f7 e0       	ldi	r31, 0x07	; 7
    17a2:	ef 2e       	mov	r14, r31
    17a4:	f0 2d       	mov	r31, r0
    17a6:	cb 52       	subi	r28, 0x2B	; 43
								input_caracters_counter++;
    17a8:	dd 4f       	sbci	r29, 0xFD	; 253
    17aa:	b8 81       	ld	r27, Y
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
								menu_operacional_index = OPTION_TROCA_SENHA;
								b = 3;
    17ac:	c5 5d       	subi	r28, 0xD5	; 213
								option_menu_operacional = 0;
								b = 3;
							}
							// se a tecla for B, volta para "urna bloqueada"
							else if(tecla == 'B'){
								option_menu_operacional = 0;
    17ae:	d2 40       	sbci	r29, 0x02	; 2
								menu_operacional_index = OPTION_TROCA_SENHA;
    17b0:	b2 30       	cpi	r27, 0x02	; 2
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <main+0x9ec>
    17b4:	b3 cc       	rjmp	.-1690   	; 0x111c <main+0x352>
    17b6:	cb 52       	subi	r28, 0x2B	; 43
								setDdRamAddress(11 + input_caracters_counter);
								sendChar('*');
								guarda_novasenha2_mesario[input_caracters_counter] = tecla;
								input_caracters_counter++;
							}
						} while(b == 2);
    17b8:	dd 4f       	sbci	r29, 0xFD	; 253
    17ba:	88 81       	ld	r24, Y
    17bc:	c5 5d       	subi	r28, 0xD5	; 213
    17be:	d2 40       	sbci	r29, 0x02	; 2
					}
					else {option_menu_operacional = 0; menu_operacional_index = OPTION_TROCA_SENHA;}
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	c9 f3       	breq	.-14     	; 0x17b6 <main+0x9ec>
    17c4:	a2 cc       	rjmp	.-1724   	; 0x110a <main+0x340>

000017c6 <debounce>:
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	c6 2f       	mov	r28, r22
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	b1 f0       	breq	.+44     	; 0x17fe <debounce+0x38>
    17d2:	18 f4       	brcc	.+6      	; 0x17da <debounce+0x14>
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <debounce+0x1e>
    17d8:	38 c0       	rjmp	.+112    	; 0x184a <debounce+0x84>
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	e9 f0       	breq	.+58     	; 0x1818 <debounce+0x52>
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	41 f1       	breq	.+80     	; 0x1832 <debounce+0x6c>
    17e2:	33 c0       	rjmp	.+102    	; 0x184a <debounce+0x84>
    17e4:	8b b1       	in	r24, 0x0b	; 11
    17e6:	8f 7d       	andi	r24, 0xDF	; 223
    17e8:	8b b9       	out	0x0b, r24	; 11
    17ea:	8b b1       	in	r24, 0x0b	; 11
    17ec:	80 61       	ori	r24, 0x10	; 16
    17ee:	8b b9       	out	0x0b, r24	; 11
    17f0:	8b b1       	in	r24, 0x0b	; 11
    17f2:	88 60       	ori	r24, 0x08	; 8
    17f4:	8b b9       	out	0x0b, r24	; 11
    17f6:	8b b1       	in	r24, 0x0b	; 11
    17f8:	84 60       	ori	r24, 0x04	; 4
    17fa:	8b b9       	out	0x0b, r24	; 11
    17fc:	26 c0       	rjmp	.+76     	; 0x184a <debounce+0x84>
    17fe:	8b b1       	in	r24, 0x0b	; 11
    1800:	80 62       	ori	r24, 0x20	; 32
    1802:	8b b9       	out	0x0b, r24	; 11
    1804:	8b b1       	in	r24, 0x0b	; 11
    1806:	8f 7e       	andi	r24, 0xEF	; 239
    1808:	8b b9       	out	0x0b, r24	; 11
    180a:	8b b1       	in	r24, 0x0b	; 11
    180c:	88 60       	ori	r24, 0x08	; 8
    180e:	8b b9       	out	0x0b, r24	; 11
    1810:	8b b1       	in	r24, 0x0b	; 11
    1812:	84 60       	ori	r24, 0x04	; 4
    1814:	8b b9       	out	0x0b, r24	; 11
    1816:	19 c0       	rjmp	.+50     	; 0x184a <debounce+0x84>
    1818:	8b b1       	in	r24, 0x0b	; 11
    181a:	80 62       	ori	r24, 0x20	; 32
    181c:	8b b9       	out	0x0b, r24	; 11
    181e:	8b b1       	in	r24, 0x0b	; 11
    1820:	80 61       	ori	r24, 0x10	; 16
    1822:	8b b9       	out	0x0b, r24	; 11
    1824:	8b b1       	in	r24, 0x0b	; 11
    1826:	87 7f       	andi	r24, 0xF7	; 247
    1828:	8b b9       	out	0x0b, r24	; 11
    182a:	8b b1       	in	r24, 0x0b	; 11
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	8b b9       	out	0x0b, r24	; 11
    1830:	0c c0       	rjmp	.+24     	; 0x184a <debounce+0x84>
    1832:	8b b1       	in	r24, 0x0b	; 11
    1834:	80 62       	ori	r24, 0x20	; 32
    1836:	8b b9       	out	0x0b, r24	; 11
    1838:	8b b1       	in	r24, 0x0b	; 11
    183a:	80 61       	ori	r24, 0x10	; 16
    183c:	8b b9       	out	0x0b, r24	; 11
    183e:	8b b1       	in	r24, 0x0b	; 11
    1840:	88 60       	ori	r24, 0x08	; 8
    1842:	8b b9       	out	0x0b, r24	; 11
    1844:	8b b1       	in	r24, 0x0b	; 11
    1846:	8b 7f       	andi	r24, 0xFB	; 251
    1848:	8b b9       	out	0x0b, r24	; 11
    184a:	d0 e0       	ldi	r29, 0x00	; 0
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <debounce+0x8c>
    1850:	18 2f       	mov	r17, r24
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	62 d1       	rcall	.+708    	; 0x1b20 <delay_ms>
    185c:	c2 30       	cpi	r28, 0x02	; 2
    185e:	61 f0       	breq	.+24     	; 0x1878 <debounce+0xb2>
    1860:	18 f4       	brcc	.+6      	; 0x1868 <debounce+0xa2>
    1862:	c1 30       	cpi	r28, 0x01	; 1
    1864:	31 f0       	breq	.+12     	; 0x1872 <debounce+0xac>
    1866:	16 c0       	rjmp	.+44     	; 0x1894 <debounce+0xce>
    1868:	c3 30       	cpi	r28, 0x03	; 3
    186a:	51 f0       	breq	.+20     	; 0x1880 <debounce+0xba>
    186c:	c4 30       	cpi	r28, 0x04	; 4
    186e:	69 f0       	breq	.+26     	; 0x188a <debounce+0xc4>
    1870:	11 c0       	rjmp	.+34     	; 0x1894 <debounce+0xce>
    1872:	86 b1       	in	r24, 0x06	; 6
    1874:	81 70       	andi	r24, 0x01	; 1
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <debounce+0xd0>
    1878:	86 b1       	in	r24, 0x06	; 6
    187a:	86 95       	lsr	r24
    187c:	81 70       	andi	r24, 0x01	; 1
    187e:	0b c0       	rjmp	.+22     	; 0x1896 <debounce+0xd0>
    1880:	86 b1       	in	r24, 0x06	; 6
    1882:	82 fb       	bst	r24, 2
    1884:	88 27       	eor	r24, r24
    1886:	80 f9       	bld	r24, 0
    1888:	06 c0       	rjmp	.+12     	; 0x1896 <debounce+0xd0>
    188a:	86 b1       	in	r24, 0x06	; 6
    188c:	83 fb       	bst	r24, 3
    188e:	88 27       	eor	r24, r24
    1890:	80 f9       	bld	r24, 0
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <debounce+0xd0>
    1894:	81 2f       	mov	r24, r17
    1896:	18 13       	cpse	r17, r24
    1898:	02 c0       	rjmp	.+4      	; 0x189e <debounce+0xd8>
    189a:	df 5f       	subi	r29, 0xFF	; 255
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <debounce+0xda>
    189e:	d0 e0       	ldi	r29, 0x00	; 0
    18a0:	d7 30       	cpi	r29, 0x07	; 7
    18a2:	b0 f2       	brcs	.-84     	; 0x1850 <debounce+0x8a>
    18a4:	c2 30       	cpi	r28, 0x02	; 2
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <debounce+0xfa>
    18a8:	18 f4       	brcc	.+6      	; 0x18b0 <debounce+0xea>
    18aa:	c1 30       	cpi	r28, 0x01	; 1
    18ac:	31 f0       	breq	.+12     	; 0x18ba <debounce+0xf4>
    18ae:	10 c0       	rjmp	.+32     	; 0x18d0 <debounce+0x10a>
    18b0:	c3 30       	cpi	r28, 0x03	; 3
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <debounce+0x100>
    18b4:	c4 30       	cpi	r28, 0x04	; 4
    18b6:	51 f0       	breq	.+20     	; 0x18cc <debounce+0x106>
    18b8:	0b c0       	rjmp	.+22     	; 0x18d0 <debounce+0x10a>
    18ba:	30 9b       	sbis	0x06, 0	; 6
    18bc:	fe cf       	rjmp	.-4      	; 0x18ba <debounce+0xf4>
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <debounce+0x10a>
    18c0:	31 9b       	sbis	0x06, 1	; 6
    18c2:	fe cf       	rjmp	.-4      	; 0x18c0 <debounce+0xfa>
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <debounce+0x10a>
    18c6:	32 9b       	sbis	0x06, 2	; 6
    18c8:	fe cf       	rjmp	.-4      	; 0x18c6 <debounce+0x100>
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <debounce+0x10a>
    18cc:	33 9b       	sbis	0x06, 3	; 6
    18ce:	fe cf       	rjmp	.-4      	; 0x18cc <debounce+0x106>
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	08 95       	ret

000018d8 <get_tecla>:
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	74 df       	rcall	.-280    	; 0x17c6 <debounce>
    18de:	88 23       	and	r24, r24
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <get_tecla+0xc>
    18e2:	54 c0       	rjmp	.+168    	; 0x198c <get_tecla+0xb4>
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	6e df       	rcall	.-292    	; 0x17c6 <debounce>
    18ea:	88 23       	and	r24, r24
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <get_tecla+0x18>
    18ee:	50 c0       	rjmp	.+160    	; 0x1990 <get_tecla+0xb8>
    18f0:	63 e0       	ldi	r22, 0x03	; 3
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	68 df       	rcall	.-304    	; 0x17c6 <debounce>
    18f6:	88 23       	and	r24, r24
    18f8:	09 f4       	brne	.+2      	; 0x18fc <get_tecla+0x24>
    18fa:	4c c0       	rjmp	.+152    	; 0x1994 <get_tecla+0xbc>
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	62 df       	rcall	.-316    	; 0x17c6 <debounce>
    1902:	88 23       	and	r24, r24
    1904:	09 f4       	brne	.+2      	; 0x1908 <get_tecla+0x30>
    1906:	48 c0       	rjmp	.+144    	; 0x1998 <get_tecla+0xc0>
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	5c df       	rcall	.-328    	; 0x17c6 <debounce>
    190e:	88 23       	and	r24, r24
    1910:	09 f4       	brne	.+2      	; 0x1914 <get_tecla+0x3c>
    1912:	44 c0       	rjmp	.+136    	; 0x199c <get_tecla+0xc4>
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	56 df       	rcall	.-340    	; 0x17c6 <debounce>
    191a:	88 23       	and	r24, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <get_tecla+0x48>
    191e:	40 c0       	rjmp	.+128    	; 0x19a0 <get_tecla+0xc8>
    1920:	63 e0       	ldi	r22, 0x03	; 3
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	50 df       	rcall	.-352    	; 0x17c6 <debounce>
    1926:	88 23       	and	r24, r24
    1928:	09 f4       	brne	.+2      	; 0x192c <get_tecla+0x54>
    192a:	3c c0       	rjmp	.+120    	; 0x19a4 <get_tecla+0xcc>
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	4a df       	rcall	.-364    	; 0x17c6 <debounce>
    1932:	88 23       	and	r24, r24
    1934:	09 f4       	brne	.+2      	; 0x1938 <get_tecla+0x60>
    1936:	38 c0       	rjmp	.+112    	; 0x19a8 <get_tecla+0xd0>
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	44 df       	rcall	.-376    	; 0x17c6 <debounce>
    193e:	88 23       	and	r24, r24
    1940:	a9 f1       	breq	.+106    	; 0x19ac <get_tecla+0xd4>
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	3f df       	rcall	.-386    	; 0x17c6 <debounce>
    1948:	88 23       	and	r24, r24
    194a:	91 f1       	breq	.+100    	; 0x19b0 <get_tecla+0xd8>
    194c:	63 e0       	ldi	r22, 0x03	; 3
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	3a df       	rcall	.-396    	; 0x17c6 <debounce>
    1952:	88 23       	and	r24, r24
    1954:	79 f1       	breq	.+94     	; 0x19b4 <get_tecla+0xdc>
    1956:	64 e0       	ldi	r22, 0x04	; 4
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	35 df       	rcall	.-406    	; 0x17c6 <debounce>
    195c:	88 23       	and	r24, r24
    195e:	61 f1       	breq	.+88     	; 0x19b8 <get_tecla+0xe0>
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	30 df       	rcall	.-416    	; 0x17c6 <debounce>
    1966:	88 23       	and	r24, r24
    1968:	49 f1       	breq	.+82     	; 0x19bc <get_tecla+0xe4>
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	2b df       	rcall	.-426    	; 0x17c6 <debounce>
    1970:	88 23       	and	r24, r24
    1972:	31 f1       	breq	.+76     	; 0x19c0 <get_tecla+0xe8>
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	84 e0       	ldi	r24, 0x04	; 4
    1978:	26 df       	rcall	.-436    	; 0x17c6 <debounce>
    197a:	88 23       	and	r24, r24
    197c:	19 f1       	breq	.+70     	; 0x19c4 <get_tecla+0xec>
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	21 df       	rcall	.-446    	; 0x17c6 <debounce>
    1984:	81 11       	cpse	r24, r1
    1986:	a8 cf       	rjmp	.-176    	; 0x18d8 <get_tecla>
    1988:	84 e4       	ldi	r24, 0x44	; 68
    198a:	08 95       	ret
    198c:	81 e3       	ldi	r24, 0x31	; 49
    198e:	08 95       	ret
    1990:	82 e3       	ldi	r24, 0x32	; 50
    1992:	08 95       	ret
    1994:	83 e3       	ldi	r24, 0x33	; 51
    1996:	08 95       	ret
    1998:	81 e4       	ldi	r24, 0x41	; 65
    199a:	08 95       	ret
    199c:	84 e3       	ldi	r24, 0x34	; 52
    199e:	08 95       	ret
    19a0:	85 e3       	ldi	r24, 0x35	; 53
    19a2:	08 95       	ret
    19a4:	86 e3       	ldi	r24, 0x36	; 54
    19a6:	08 95       	ret
    19a8:	82 e4       	ldi	r24, 0x42	; 66
    19aa:	08 95       	ret
    19ac:	87 e3       	ldi	r24, 0x37	; 55
    19ae:	08 95       	ret
    19b0:	88 e3       	ldi	r24, 0x38	; 56
    19b2:	08 95       	ret
    19b4:	89 e3       	ldi	r24, 0x39	; 57
    19b6:	08 95       	ret
    19b8:	83 e4       	ldi	r24, 0x43	; 67
    19ba:	08 95       	ret
    19bc:	8a e2       	ldi	r24, 0x2A	; 42
    19be:	08 95       	ret
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	08 95       	ret
    19c4:	83 e2       	ldi	r24, 0x23	; 35
    19c6:	08 95       	ret

000019c8 <initSerialConfig>:
    19c8:	88 e1       	ldi	r24, 0x18	; 24
    19ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    19ce:	83 e3       	ldi	r24, 0x33	; 51
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    19d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    19da:	08 95       	ret

000019dc <getSerialChar>:
    19dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    19e0:	88 23       	and	r24, r24
    19e2:	e4 f7       	brge	.-8      	; 0x19dc <getSerialChar>
    19e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    19e8:	08 95       	ret

000019ea <sendSerialChar>:
    19ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    19ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    19f2:	85 ff       	sbrs	r24, 5
    19f4:	fc cf       	rjmp	.-8      	; 0x19ee <sendSerialChar+0x4>
    19f6:	08 95       	ret

000019f8 <getSerialMessage>:
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	ec 01       	movw	r28, r24
    1a04:	eb df       	rcall	.-42     	; 0x19dc <getSerialChar>
    1a06:	88 83       	st	Y, r24
    1a08:	8d 34       	cpi	r24, 0x4D	; 77
    1a0a:	e1 f7       	brne	.-8      	; 0x1a04 <getSerialMessage+0xc>
    1a0c:	8d 34       	cpi	r24, 0x4D	; 77
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <getSerialMessage+0x1a>
    1a10:	41 c0       	rjmp	.+130    	; 0x1a94 <getSerialMessage+0x9c>
    1a12:	e4 df       	rcall	.-56     	; 0x19dc <getSerialChar>
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	89 34       	cpi	r24, 0x49	; 73
    1a18:	31 f0       	breq	.+12     	; 0x1a26 <getSerialMessage+0x2e>
    1a1a:	83 34       	cpi	r24, 0x43	; 67
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <getSerialMessage+0x2e>
    1a1e:	84 35       	cpi	r24, 0x54	; 84
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <getSerialMessage+0x2e>
    1a22:	82 35       	cpi	r24, 0x52	; 82
    1a24:	11 f4       	brne	.+4      	; 0x1a2a <getSerialMessage+0x32>
    1a26:	1a 82       	std	Y+2, r1	; 0x02
    1a28:	36 c0       	rjmp	.+108    	; 0x1a96 <getSerialMessage+0x9e>
    1a2a:	86 35       	cpi	r24, 0x56	; 86
    1a2c:	51 f4       	brne	.+20     	; 0x1a42 <getSerialMessage+0x4a>
    1a2e:	d6 df       	rcall	.-84     	; 0x19dc <getSerialChar>
    1a30:	8a 83       	std	Y+2, r24	; 0x02
    1a32:	8f 34       	cpi	r24, 0x4F	; 79
    1a34:	21 f0       	breq	.+8      	; 0x1a3e <getSerialMessage+0x46>
    1a36:	89 34       	cpi	r24, 0x49	; 73
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <getSerialMessage+0x46>
    1a3a:	88 35       	cpi	r24, 0x58	; 88
    1a3c:	11 f4       	brne	.+4      	; 0x1a42 <getSerialMessage+0x4a>
    1a3e:	1b 82       	std	Y+3, r1	; 0x03
    1a40:	2a c0       	rjmp	.+84     	; 0x1a96 <getSerialMessage+0x9e>
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 34       	cpi	r24, 0x48	; 72
    1a46:	59 f4       	brne	.+22     	; 0x1a5e <getSerialMessage+0x66>
    1a48:	c9 df       	rcall	.-110    	; 0x19dc <getSerialChar>
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	c7 df       	rcall	.-114    	; 0x19dc <getSerialChar>
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	98 31       	cpi	r25, 0x18	; 24
    1a54:	20 f4       	brcc	.+8      	; 0x1a5e <getSerialMessage+0x66>
    1a56:	8c 33       	cpi	r24, 0x3C	; 60
    1a58:	10 f4       	brcc	.+4      	; 0x1a5e <getSerialMessage+0x66>
    1a5a:	1c 82       	std	Y+4, r1	; 0x04
    1a5c:	1c c0       	rjmp	.+56     	; 0x1a96 <getSerialMessage+0x9e>
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	8e 34       	cpi	r24, 0x4E	; 78
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <getSerialMessage+0x78>
    1a64:	80 35       	cpi	r24, 0x50	; 80
    1a66:	21 f0       	breq	.+8      	; 0x1a70 <getSerialMessage+0x78>
    1a68:	83 35       	cpi	r24, 0x53	; 83
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <getSerialMessage+0x78>
    1a6c:	86 34       	cpi	r24, 0x46	; 70
    1a6e:	91 f4       	brne	.+36     	; 0x1a94 <getSerialMessage+0x9c>
    1a70:	b5 df       	rcall	.-150    	; 0x19dc <getSerialChar>
    1a72:	8a 83       	std	Y+2, r24	; 0x02
    1a74:	f1 2c       	mov	r15, r1
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <getSerialMessage+0x94>
    1a78:	0f 2d       	mov	r16, r15
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
    1a7c:	0d 5f       	subi	r16, 0xFD	; 253
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	0c 0f       	add	r16, r28
    1a82:	1d 1f       	adc	r17, r29
    1a84:	ab df       	rcall	.-170    	; 0x19dc <getSerialChar>
    1a86:	f8 01       	movw	r30, r16
    1a88:	80 83       	st	Z, r24
    1a8a:	f3 94       	inc	r15
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	f8 16       	cp	r15, r24
    1a90:	98 f3       	brcs	.-26     	; 0x1a78 <getSerialMessage+0x80>
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <getSerialMessage+0x9e>
    1a94:	18 82       	st	Y, r1
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	ff 90       	pop	r15
    1aa0:	08 95       	ret

00001aa2 <sendSerialMessage>:
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	7c 01       	movw	r14, r24
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	00 20       	and	r0, r0
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2 <sendSerialMessage+0x10>
    1ab8:	31 97       	sbiw	r30, 0x01	; 1
    1aba:	8f 01       	movw	r16, r30
    1abc:	08 1b       	sub	r16, r24
    1abe:	19 0b       	sbc	r17, r25
    1ac0:	c0 e0       	ldi	r28, 0x00	; 0
    1ac2:	d0 e0       	ldi	r29, 0x00	; 0
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <sendSerialMessage+0x30>
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	ec 0f       	add	r30, r28
    1aca:	fd 1f       	adc	r31, r29
    1acc:	80 81       	ld	r24, Z
    1ace:	8d df       	rcall	.-230    	; 0x19ea <sendSerialChar>
    1ad0:	21 96       	adiw	r28, 0x01	; 1
    1ad2:	0c 17       	cp	r16, r28
    1ad4:	1d 07       	cpc	r17, r29
    1ad6:	bc f7       	brge	.-18     	; 0x1ac6 <sendSerialMessage+0x24>
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	08 95       	ret

00001ae6 <delay_us>:
    1ae6:	22 e0       	ldi	r18, 0x02	; 2
    1ae8:	24 bd       	out	0x24, r18	; 36
    1aea:	31 e0       	ldi	r19, 0x01	; 1
    1aec:	35 bd       	out	0x25, r19	; 37
    1aee:	3f e9       	ldi	r19, 0x9F	; 159
    1af0:	37 bd       	out	0x27, r19	; 39
    1af2:	16 bc       	out	0x26, r1	; 38
    1af4:	25 bb       	out	0x15, r18	; 21
    1af6:	2a e0       	ldi	r18, 0x0A	; 10
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	f0 d0       	rcall	.+480    	; 0x1ce0 <__divmodsi4>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	dc 01       	movw	r26, r24
    1b06:	a9 9b       	sbis	0x15, 1	; 21
    1b08:	fe cf       	rjmp	.-4      	; 0x1b06 <delay_us+0x20>
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	65 bb       	out	0x15, r22	; 21
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	a1 1d       	adc	r26, r1
    1b12:	b1 1d       	adc	r27, r1
    1b14:	82 17       	cp	r24, r18
    1b16:	93 07       	cpc	r25, r19
    1b18:	a4 07       	cpc	r26, r20
    1b1a:	b5 07       	cpc	r27, r21
    1b1c:	a4 f3       	brlt	.-24     	; 0x1b06 <delay_us+0x20>
    1b1e:	08 95       	ret

00001b20 <delay_ms>:
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	8b 01       	movw	r16, r22
    1b26:	9c 01       	movw	r18, r24
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	84 bd       	out	0x24, r24	; 36
    1b2c:	83 e0       	ldi	r24, 0x03	; 3
    1b2e:	85 bd       	out	0x25, r24	; 37
    1b30:	89 ef       	ldi	r24, 0xF9	; 249
    1b32:	87 bd       	out	0x27, r24	; 39
    1b34:	16 bc       	out	0x26, r1	; 38
    1b36:	85 b3       	in	r24, 0x15	; 21
    1b38:	82 60       	ori	r24, 0x02	; 2
    1b3a:	85 bb       	out	0x15, r24	; 21
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	ba 01       	movw	r22, r20
    1b42:	a9 9b       	sbis	0x15, 1	; 21
    1b44:	fe cf       	rjmp	.-4      	; 0x1b42 <delay_ms+0x22>
    1b46:	85 b3       	in	r24, 0x15	; 21
    1b48:	82 60       	ori	r24, 0x02	; 2
    1b4a:	85 bb       	out	0x15, r24	; 21
    1b4c:	4f 5f       	subi	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	6f 4f       	sbci	r22, 0xFF	; 255
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	40 17       	cp	r20, r16
    1b56:	51 07       	cpc	r21, r17
    1b58:	62 07       	cpc	r22, r18
    1b5a:	73 07       	cpc	r23, r19
    1b5c:	94 f3       	brlt	.-28     	; 0x1b42 <delay_ms+0x22>
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <timeControlConfig>:
    1b64:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1b68:	8c e0       	ldi	r24, 0x0C	; 12
    1b6a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1b6e:	83 e2       	ldi	r24, 0x23	; 35
    1b70:	94 ef       	ldi	r25, 0xF4	; 244
    1b72:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1b76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1b7a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1b7e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1b82:	ef e6       	ldi	r30, 0x6F	; 111
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	82 60       	ori	r24, 0x02	; 2
    1b8a:	80 83       	st	Z, r24
    1b8c:	78 94       	sei
    1b8e:	08 95       	ret

00001b90 <incTime>:
    1b90:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <currentTime+0x2>
    1b94:	8b 33       	cpi	r24, 0x3B	; 59
    1b96:	a9 f4       	brne	.+42     	; 0x1bc2 <incTime+0x32>
    1b98:	e6 ef       	ldi	r30, 0xF6	; 246
    1b9a:	f3 e0       	ldi	r31, 0x03	; 3
    1b9c:	12 82       	std	Z+2, r1	; 0x02
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	8b 33       	cpi	r24, 0x3B	; 59
    1ba2:	59 f4       	brne	.+22     	; 0x1bba <incTime+0x2a>
    1ba4:	11 82       	std	Z+1, r1	; 0x01
    1ba6:	80 81       	ld	r24, Z
    1ba8:	87 31       	cpi	r24, 0x17	; 23
    1baa:	19 f4       	brne	.+6      	; 0x1bb2 <incTime+0x22>
    1bac:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <currentTime>
    1bb0:	08 95       	ret
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <currentTime>
    1bb8:	08 95       	ret
    1bba:	8f 5f       	subi	r24, 0xFF	; 255
    1bbc:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <currentTime+0x1>
    1bc0:	08 95       	ret
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <currentTime+0x2>
    1bc8:	08 95       	ret

00001bca <exibe_hora_display>:
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <exibindo_hora_display>
    1bd0:	08 95       	ret

00001bd2 <apaga_hora_display>:
    1bd2:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <exibindo_hora_display>
    1bd6:	08 95       	ret

00001bd8 <__vector_11>:
    1bd8:	1f 92       	push	r1
    1bda:	0f 92       	push	r0
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	0f 92       	push	r0
    1be0:	11 24       	eor	r1, r1
    1be2:	2f 93       	push	r18
    1be4:	3f 93       	push	r19
    1be6:	4f 93       	push	r20
    1be8:	5f 93       	push	r21
    1bea:	6f 93       	push	r22
    1bec:	7f 93       	push	r23
    1bee:	8f 93       	push	r24
    1bf0:	9f 93       	push	r25
    1bf2:	af 93       	push	r26
    1bf4:	bf 93       	push	r27
    1bf6:	ef 93       	push	r30
    1bf8:	ff 93       	push	r31
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	29 97       	sbiw	r28, 0x09	; 9
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	c3 df       	rcall	.-122    	; 0x1b90 <incTime>
    1c0a:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <exibindo_hora_display>
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <__vector_11+0x3c>
    1c12:	4b c0       	rjmp	.+150    	; 0x1caa <__vector_11+0xd2>
    1c14:	fe 01       	movw	r30, r28
    1c16:	31 96       	adiw	r30, 0x01	; 1
    1c18:	89 e0       	ldi	r24, 0x09	; 9
    1c1a:	df 01       	movw	r26, r30
    1c1c:	1d 92       	st	X+, r1
    1c1e:	8a 95       	dec	r24
    1c20:	e9 f7       	brne	.-6      	; 0x1c1c <__vector_11+0x44>
    1c22:	a6 ef       	ldi	r26, 0xF6	; 246
    1c24:	b3 e0       	ldi	r27, 0x03	; 3
    1c26:	8c 91       	ld	r24, X
    1c28:	9d ec       	ldi	r25, 0xCD	; 205
    1c2a:	89 9f       	mul	r24, r25
    1c2c:	21 2d       	mov	r18, r1
    1c2e:	11 24       	eor	r1, r1
    1c30:	26 95       	lsr	r18
    1c32:	26 95       	lsr	r18
    1c34:	26 95       	lsr	r18
    1c36:	30 e3       	ldi	r19, 0x30	; 48
    1c38:	32 0f       	add	r19, r18
    1c3a:	39 83       	std	Y+1, r19	; 0x01
    1c3c:	22 0f       	add	r18, r18
    1c3e:	32 2f       	mov	r19, r18
    1c40:	33 0f       	add	r19, r19
    1c42:	33 0f       	add	r19, r19
    1c44:	23 0f       	add	r18, r19
    1c46:	82 1b       	sub	r24, r18
    1c48:	80 5d       	subi	r24, 0xD0	; 208
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
    1c4c:	4a e3       	ldi	r20, 0x3A	; 58
    1c4e:	4b 83       	std	Y+3, r20	; 0x03
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	8c 91       	ld	r24, X
    1c54:	11 97       	sbiw	r26, 0x01	; 1
    1c56:	89 9f       	mul	r24, r25
    1c58:	21 2d       	mov	r18, r1
    1c5a:	11 24       	eor	r1, r1
    1c5c:	26 95       	lsr	r18
    1c5e:	26 95       	lsr	r18
    1c60:	26 95       	lsr	r18
    1c62:	30 e3       	ldi	r19, 0x30	; 48
    1c64:	32 0f       	add	r19, r18
    1c66:	3c 83       	std	Y+4, r19	; 0x04
    1c68:	22 0f       	add	r18, r18
    1c6a:	32 2f       	mov	r19, r18
    1c6c:	33 0f       	add	r19, r19
    1c6e:	33 0f       	add	r19, r19
    1c70:	23 0f       	add	r18, r19
    1c72:	82 1b       	sub	r24, r18
    1c74:	80 5d       	subi	r24, 0xD0	; 208
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	4e 83       	std	Y+6, r20	; 0x06
    1c7a:	12 96       	adiw	r26, 0x02	; 2
    1c7c:	2c 91       	ld	r18, X
    1c7e:	29 9f       	mul	r18, r25
    1c80:	91 2d       	mov	r25, r1
    1c82:	11 24       	eor	r1, r1
    1c84:	96 95       	lsr	r25
    1c86:	96 95       	lsr	r25
    1c88:	96 95       	lsr	r25
    1c8a:	80 e3       	ldi	r24, 0x30	; 48
    1c8c:	89 0f       	add	r24, r25
    1c8e:	8f 83       	std	Y+7, r24	; 0x07
    1c90:	99 0f       	add	r25, r25
    1c92:	89 2f       	mov	r24, r25
    1c94:	88 0f       	add	r24, r24
    1c96:	88 0f       	add	r24, r24
    1c98:	98 0f       	add	r25, r24
    1c9a:	29 1b       	sub	r18, r25
    1c9c:	20 5d       	subi	r18, 0xD0	; 208
    1c9e:	28 87       	std	Y+8, r18	; 0x08
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	cf 01       	movw	r24, r30
    1ca6:	0e 94 df 02 	call	0x5be	; 0x5be <sendString_setAdress>
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	86 bb       	out	0x16, r24	; 22
    1cae:	29 96       	adiw	r28, 0x09	; 9
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	ff 91       	pop	r31
    1cc0:	ef 91       	pop	r30
    1cc2:	bf 91       	pop	r27
    1cc4:	af 91       	pop	r26
    1cc6:	9f 91       	pop	r25
    1cc8:	8f 91       	pop	r24
    1cca:	7f 91       	pop	r23
    1ccc:	6f 91       	pop	r22
    1cce:	5f 91       	pop	r21
    1cd0:	4f 91       	pop	r20
    1cd2:	3f 91       	pop	r19
    1cd4:	2f 91       	pop	r18
    1cd6:	0f 90       	pop	r0
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	0f 90       	pop	r0
    1cdc:	1f 90       	pop	r1
    1cde:	18 95       	reti

00001ce0 <__divmodsi4>:
    1ce0:	05 2e       	mov	r0, r21
    1ce2:	97 fb       	bst	r25, 7
    1ce4:	16 f4       	brtc	.+4      	; 0x1cea <__divmodsi4+0xa>
    1ce6:	00 94       	com	r0
    1ce8:	0f d0       	rcall	.+30     	; 0x1d08 <__negsi2>
    1cea:	57 fd       	sbrc	r21, 7
    1cec:	05 d0       	rcall	.+10     	; 0x1cf8 <__divmodsi4_neg2>
    1cee:	1a d0       	rcall	.+52     	; 0x1d24 <__udivmodsi4>
    1cf0:	07 fc       	sbrc	r0, 7
    1cf2:	02 d0       	rcall	.+4      	; 0x1cf8 <__divmodsi4_neg2>
    1cf4:	46 f4       	brtc	.+16     	; 0x1d06 <__divmodsi4_exit>
    1cf6:	08 c0       	rjmp	.+16     	; 0x1d08 <__negsi2>

00001cf8 <__divmodsi4_neg2>:
    1cf8:	50 95       	com	r21
    1cfa:	40 95       	com	r20
    1cfc:	30 95       	com	r19
    1cfe:	21 95       	neg	r18
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	4f 4f       	sbci	r20, 0xFF	; 255
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255

00001d06 <__divmodsi4_exit>:
    1d06:	08 95       	ret

00001d08 <__negsi2>:
    1d08:	90 95       	com	r25
    1d0a:	80 95       	com	r24
    1d0c:	70 95       	com	r23
    1d0e:	61 95       	neg	r22
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255
    1d12:	8f 4f       	sbci	r24, 0xFF	; 255
    1d14:	9f 4f       	sbci	r25, 0xFF	; 255
    1d16:	08 95       	ret

00001d18 <__tablejump2__>:
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	05 90       	lpm	r0, Z+
    1d1e:	f4 91       	lpm	r31, Z
    1d20:	e0 2d       	mov	r30, r0
    1d22:	09 94       	ijmp

00001d24 <__udivmodsi4>:
    1d24:	a1 e2       	ldi	r26, 0x21	; 33
    1d26:	1a 2e       	mov	r1, r26
    1d28:	aa 1b       	sub	r26, r26
    1d2a:	bb 1b       	sub	r27, r27
    1d2c:	fd 01       	movw	r30, r26
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <__udivmodsi4_ep>

00001d30 <__udivmodsi4_loop>:
    1d30:	aa 1f       	adc	r26, r26
    1d32:	bb 1f       	adc	r27, r27
    1d34:	ee 1f       	adc	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	a2 17       	cp	r26, r18
    1d3a:	b3 07       	cpc	r27, r19
    1d3c:	e4 07       	cpc	r30, r20
    1d3e:	f5 07       	cpc	r31, r21
    1d40:	20 f0       	brcs	.+8      	; 0x1d4a <__udivmodsi4_ep>
    1d42:	a2 1b       	sub	r26, r18
    1d44:	b3 0b       	sbc	r27, r19
    1d46:	e4 0b       	sbc	r30, r20
    1d48:	f5 0b       	sbc	r31, r21

00001d4a <__udivmodsi4_ep>:
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	1a 94       	dec	r1
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <__udivmodsi4_loop>
    1d56:	60 95       	com	r22
    1d58:	70 95       	com	r23
    1d5a:	80 95       	com	r24
    1d5c:	90 95       	com	r25
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	bd 01       	movw	r22, r26
    1d64:	cf 01       	movw	r24, r30
    1d66:	08 95       	ret

00001d68 <_exit>:
    1d68:	f8 94       	cli

00001d6a <__stop_program>:
    1d6a:	ff cf       	rjmp	.-2      	; 0x1d6a <__stop_program>
