
urna_eletronica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000066a  000006fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  0000070a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117d  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa8  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbd  00000000  00000000  000024c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ff  00000000  00000000  00003ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c2       	rjmp	.+1324   	; 0x562 <__vector_13>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	9b d0       	rcall	.+310    	; 0x1d2 <main>
  9c:	e4 c2       	rjmp	.+1480   	; 0x666 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <functionSet>:
#include "timeControl.h"

// Conjunto de funções utilizadas para o Display LCD 16x2

void functionSet(void) {
	LOW(D7);
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	87 7f       	andi	r24, 0xF7	; 247
  a4:	85 b9       	out	0x05, r24	; 5
	LOW(D6);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	85 b9       	out	0x05, r24	; 5
	HIGH(D5);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	85 b9       	out	0x05, r24	; 5
	LOW(D4);
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	85 b9       	out	0x05, r24	; 5
	LOW(RS);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 7b       	andi	r24, 0xBF	; 191
  bc:	8b b9       	out	0x0b, r24	; 11
	HIGH(E);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8b b9       	out	0x0b, r24	; 11
	LOW(E);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8b b9       	out	0x0b, r24	; 11
	delay_microsegundos(40);
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	be d1       	rcall	.+892    	; 0x44c <delay_microsegundos>
	HIGH(E);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8b b9       	out	0x0b, r24	; 11
	LOW(E);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	8b b9       	out	0x0b, r24	; 11
	HIGH(D7);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8b b9       	out	0x0b, r24	; 11
	LOW(E);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8f 77       	andi	r24, 0x7F	; 127
  ec:	8b b9       	out	0x0b, r24	; 11
	delay_microsegundos(40);
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ac c1       	rjmp	.+856    	; 0x44c <delay_microsegundos>
  f4:	08 95       	ret

000000f6 <entryModeSet>:
}
void entryModeSet(char id, char s) {
	LOW(RS);
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	9f 7b       	andi	r25, 0xBF	; 191
  fa:	9b b9       	out	0x0b, r25	; 11
	LOW(D7);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	97 7f       	andi	r25, 0xF7	; 247
 100:	95 b9       	out	0x05, r25	; 5
	LOW(D6);
 102:	95 b1       	in	r25, 0x05	; 5
 104:	9b 7f       	andi	r25, 0xFB	; 251
 106:	95 b9       	out	0x05, r25	; 5
	LOW(D5);
 108:	95 b1       	in	r25, 0x05	; 5
 10a:	9d 7f       	andi	r25, 0xFD	; 253
 10c:	95 b9       	out	0x05, r25	; 5
	LOW(D4);
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	9e 7f       	andi	r25, 0xFE	; 254
 112:	95 b9       	out	0x05, r25	; 5
	HIGH(E);
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	90 68       	ori	r25, 0x80	; 128
 118:	9b b9       	out	0x0b, r25	; 11
	LOW(E);
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	9f 77       	andi	r25, 0x7F	; 127
 11e:	9b b9       	out	0x0b, r25	; 11
	HIGH(D6);
 120:	95 b1       	in	r25, 0x05	; 5
 122:	94 60       	ori	r25, 0x04	; 4
 124:	95 b9       	out	0x05, r25	; 5
	if(id == 1){HIGH(D5);} else{LOW(D5);}
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	21 f4       	brne	.+8      	; 0x132 <entryModeSet+0x3c>
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 b9       	out	0x05, r24	; 5
 130:	03 c0       	rjmp	.+6      	; 0x138 <entryModeSet+0x42>
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	85 b9       	out	0x05, r24	; 5
	if(s == 1){HIGH(D4);} else{LOW(D4);}
 138:	61 30       	cpi	r22, 0x01	; 1
 13a:	21 f4       	brne	.+8      	; 0x144 <entryModeSet+0x4e>
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	85 b9       	out	0x05, r24	; 5
 142:	03 c0       	rjmp	.+6      	; 0x14a <entryModeSet+0x54>
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
	LOW(E);
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8f 77       	andi	r24, 0x7F	; 127
 154:	8b b9       	out	0x0b, r24	; 11
	delay_microsegundos(40);
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	78 c1       	rjmp	.+752    	; 0x44c <delay_microsegundos>
 15c:	08 95       	ret

0000015e <displayOnOffControl>:
}
void displayOnOffControl(char display, char cursor, char blinking) {
	LOW(D7);
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	97 7f       	andi	r25, 0xF7	; 247
 162:	95 b9       	out	0x05, r25	; 5
	LOW(D6);
 164:	95 b1       	in	r25, 0x05	; 5
 166:	9b 7f       	andi	r25, 0xFB	; 251
 168:	95 b9       	out	0x05, r25	; 5
	LOW(D5);
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	9d 7f       	andi	r25, 0xFD	; 253
 16e:	95 b9       	out	0x05, r25	; 5
	LOW(D4);
 170:	95 b1       	in	r25, 0x05	; 5
 172:	9e 7f       	andi	r25, 0xFE	; 254
 174:	95 b9       	out	0x05, r25	; 5
	HIGH(E);
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	90 68       	ori	r25, 0x80	; 128
 17a:	9b b9       	out	0x0b, r25	; 11
	LOW(E);
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	9f 77       	andi	r25, 0x7F	; 127
 180:	9b b9       	out	0x0b, r25	; 11
	HIGH(D7);
 182:	95 b1       	in	r25, 0x05	; 5
 184:	98 60       	ori	r25, 0x08	; 8
 186:	95 b9       	out	0x05, r25	; 5
	if(display == 1){HIGH(D6);} else{LOW(D6);}
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	21 f4       	brne	.+8      	; 0x194 <displayOnOffControl+0x36>
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	85 b9       	out	0x05, r24	; 5
 192:	03 c0       	rjmp	.+6      	; 0x19a <displayOnOffControl+0x3c>
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	85 b9       	out	0x05, r24	; 5
	if(cursor == 1){HIGH(D5);} else{LOW(D5);}
 19a:	61 30       	cpi	r22, 0x01	; 1
 19c:	21 f4       	brne	.+8      	; 0x1a6 <displayOnOffControl+0x48>
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <displayOnOffControl+0x4e>
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	85 b9       	out	0x05, r24	; 5
	if(blinking == 1){HIGH(D4);} else{LOW(D4);}
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <displayOnOffControl+0x5a>
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <displayOnOffControl+0x60>
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	85 b9       	out	0x05, r24	; 5
	HIGH(E);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	8b b9       	out	0x0b, r24	; 11
	LOW(E);
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8f 77       	andi	r24, 0x7F	; 127
 1c8:	8b b9       	out	0x0b, r24	; 11
	delay_microsegundos(40);
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	3e c1       	rjmp	.+636    	; 0x44c <delay_microsegundos>
 1d0:	08 95       	ret

000001d2 <main>:
#include "timeControl.h"
#include "lcd.h"
#include "matrix_keypad.h"
#include "serialFunctions.h"

int main(void){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	2c 97       	sbiw	r28, 0x0c	; 12
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
	
	// Display como output
	// Linhas como outputs e colunas como inputs
	OUTPUT(D4);
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D5);
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D6);
 1f2:	84 b1       	in	r24, 0x04	; 4
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	84 b9       	out	0x04, r24	; 4
	OUTPUT(D7);
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	84 b9       	out	0x04, r24	; 4
	OUTPUT(E);
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(RS);
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	80 64       	ori	r24, 0x40	; 64
 208:	8a b9       	out	0x0a, r24	; 10
	
	OUTPUT(LINHA1);
 20a:	8a b1       	in	r24, 0x0a	; 10
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA2);
 210:	8a b1       	in	r24, 0x0a	; 10
 212:	80 61       	ori	r24, 0x10	; 16
 214:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA3);
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	88 60       	ori	r24, 0x08	; 8
 21a:	8a b9       	out	0x0a, r24	; 10
	OUTPUT(LINHA4);
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	8a b9       	out	0x0a, r24	; 10
	INPUT(COLUNA1);
 222:	87 b1       	in	r24, 0x07	; 7
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA2);
 228:	87 b1       	in	r24, 0x07	; 7
 22a:	8d 7f       	andi	r24, 0xFD	; 253
 22c:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA3);
 22e:	87 b1       	in	r24, 0x07	; 7
 230:	8b 7f       	andi	r24, 0xFB	; 251
 232:	87 b9       	out	0x07, r24	; 7
	INPUT(COLUNA4);
 234:	87 b1       	in	r24, 0x07	; 7
 236:	87 7f       	andi	r24, 0xF7	; 247
 238:	87 b9       	out	0x07, r24	; 7
	
	
	// Garante que todas as linhas comecem em nível lógico alto
	HIGH(LINHA1);
 23a:	8b b1       	in	r24, 0x0b	; 11
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA2);
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 61       	ori	r24, 0x10	; 16
 244:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA3);
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	8b b9       	out	0x0b, r24	; 11
	HIGH(LINHA4);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	8b b9       	out	0x0b, r24	; 11
	HIGH(COLUNA1);
 252:	88 b1       	in	r24, 0x08	; 8
 254:	81 60       	ori	r24, 0x01	; 1
 256:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA2);
 258:	88 b1       	in	r24, 0x08	; 8
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA3);
 25e:	88 b1       	in	r24, 0x08	; 8
 260:	84 60       	ori	r24, 0x04	; 4
 262:	88 b9       	out	0x08, r24	; 8
	HIGH(COLUNA4);
 264:	88 b1       	in	r24, 0x08	; 8
 266:	88 60       	ori	r24, 0x08	; 8
 268:	88 b9       	out	0x08, r24	; 8
	
	// Inicialização do display
	functionSet();
 26a:	1a df       	rcall	.-460    	; 0xa0 <functionSet>
	entryModeSet(1, 0);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	42 df       	rcall	.-380    	; 0xf6 <entryModeSet>
	displayOnOffControl(1, 1, 1);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	81 e0       	ldi	r24, 0x01	; 1
	
	timeControlConfig();
 278:	72 df       	rcall	.-284    	; 0x15e <displayOnOffControl>
 27a:	40 d1       	rcall	.+640    	; 0x4fc <timeControlConfig>
	initSerialConfig();
 27c:	b4 d0       	rcall	.+360    	; 0x3e6 <initSerialConfig>
 27e:	8c e0       	ldi	r24, 0x0C	; 12

	char tecla_atual = 0;
	char mensagem[] = "A tecla e x";
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	de 01       	movw	r26, r28
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	01 90       	ld	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	8a 95       	dec	r24
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0xb6>
	
	while (1)
	{
		
		tecla_atual = get_tecla();
 290:	72 d0       	rcall	.+228    	; 0x376 <get_tecla>
		mensagem[10] = tecla_atual;
 292:	8b 87       	std	Y+11, r24	; 0x0b
		
		if(tecla_atual != 0){
 294:	88 23       	and	r24, r24
 296:	e1 f3       	breq	.-8      	; 0x290 <main+0xbe>
			//UDR0 = tecla_atual;
			sendSerialMessage(mensagem);
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	b5 d0       	rcall	.+362    	; 0x408 <sendSerialMessage>
 29e:	f8 cf       	rjmp	.-16     	; 0x290 <main+0xbe>

000002a0 <debounce>:
 2a0:	1f 93       	push	r17
	}
	return '\0';
}

// Realiza o debounce das teclas
unsigned char debounce(char linha, char coluna){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	16 2f       	mov	r17, r22
	unsigned char current_key = 0, last_key = 0, counter = 0;
	char const BOUNCE = 7;
	
	// ativa a leitura da linha indicada
	switch (linha){
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	b1 f0       	breq	.+44     	; 0x2d8 <debounce+0x38>
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <debounce+0x14>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	31 f0       	breq	.+12     	; 0x2be <debounce+0x1e>
 2b2:	38 c0       	rjmp	.+112    	; 0x324 <debounce+0x84>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	e9 f0       	breq	.+58     	; 0x2f2 <debounce+0x52>
 2b8:	84 30       	cpi	r24, 0x04	; 4
 2ba:	41 f1       	breq	.+80     	; 0x30c <debounce+0x6c>
 2bc:	33 c0       	rjmp	.+102    	; 0x324 <debounce+0x84>
		case 1:
		LOW(LINHA1); HIGH(LINHA2); HIGH(LINHA3); HIGH(LINHA4);
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	8f 7d       	andi	r24, 0xDF	; 223
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 61       	ori	r24, 0x10	; 16
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	8b b9       	out	0x0b, r24	; 11
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	8b b9       	out	0x0b, r24	; 11
		break;
 2d6:	26 c0       	rjmp	.+76     	; 0x324 <debounce+0x84>
		case 2:
		HIGH(LINHA1); LOW(LINHA2); HIGH(LINHA3); HIGH(LINHA4);
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	80 62       	ori	r24, 0x20	; 32
 2dc:	8b b9       	out	0x0b, r24	; 11
 2de:	8b b1       	in	r24, 0x0b	; 11
 2e0:	8f 7e       	andi	r24, 0xEF	; 239
 2e2:	8b b9       	out	0x0b, r24	; 11
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	8b b9       	out	0x0b, r24	; 11
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	84 60       	ori	r24, 0x04	; 4
 2ee:	8b b9       	out	0x0b, r24	; 11
		break;
 2f0:	19 c0       	rjmp	.+50     	; 0x324 <debounce+0x84>
		case 3:
		HIGH(LINHA1); HIGH(LINHA2); LOW(LINHA3); HIGH(LINHA4);
 2f2:	8b b1       	in	r24, 0x0b	; 11
 2f4:	80 62       	ori	r24, 0x20	; 32
 2f6:	8b b9       	out	0x0b, r24	; 11
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	8b b9       	out	0x0b, r24	; 11
 2fe:	8b b1       	in	r24, 0x0b	; 11
 300:	87 7f       	andi	r24, 0xF7	; 247
 302:	8b b9       	out	0x0b, r24	; 11
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	84 60       	ori	r24, 0x04	; 4
 308:	8b b9       	out	0x0b, r24	; 11
		break;
 30a:	0c c0       	rjmp	.+24     	; 0x324 <debounce+0x84>
		case 4:
		HIGH(LINHA1); HIGH(LINHA2); HIGH(LINHA3); LOW(LINHA4);
 30c:	8b b1       	in	r24, 0x0b	; 11
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	8b b9       	out	0x0b, r24	; 11
 312:	8b b1       	in	r24, 0x0b	; 11
 314:	80 61       	ori	r24, 0x10	; 16
 316:	8b b9       	out	0x0b, r24	; 11
 318:	8b b1       	in	r24, 0x0b	; 11
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	8b b9       	out	0x0b, r24	; 11
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	8b 7f       	andi	r24, 0xFB	; 251
 322:	8b b9       	out	0x0b, r24	; 11
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	01 c0       	rjmp	.+2      	; 0x32c <debounce+0x8c>
 32a:	d8 2f       	mov	r29, r24
	}
	
	// Enquanto contador for diferente de BOUNCE, itera atÃ© estabilzar
	do{
		delay_microsegundos(1000);
 32c:	88 ee       	ldi	r24, 0xE8	; 232
 32e:	93 e0       	ldi	r25, 0x03	; 3
 330:	8d d0       	rcall	.+282    	; 0x44c <delay_microsegundos>
		
		switch(coluna){
 332:	11 30       	cpi	r17, 0x01	; 1
 334:	19 f0       	breq	.+6      	; 0x33c <debounce+0x9c>
 336:	12 30       	cpi	r17, 0x02	; 2
 338:	21 f0       	breq	.+8      	; 0x342 <debounce+0xa2>
 33a:	07 c0       	rjmp	.+14     	; 0x34a <debounce+0xaa>
			case 1:
			current_key = READ(COLUNA1);
 33c:	86 b1       	in	r24, 0x06	; 6
 33e:	81 70       	andi	r24, 0x01	; 1
			break;
 340:	05 c0       	rjmp	.+10     	; 0x34c <debounce+0xac>
			case 2:
			current_key = READ(COLUNA2);
 342:	86 b1       	in	r24, 0x06	; 6
 344:	86 95       	lsr	r24
 346:	81 70       	andi	r24, 0x01	; 1
			break;
 348:	01 c0       	rjmp	.+2      	; 0x34c <debounce+0xac>
	
	// Enquanto contador for diferente de BOUNCE, itera atÃ© estabilzar
	do{
		delay_microsegundos(1000);
		
		switch(coluna){
 34a:	8d 2f       	mov	r24, r29
			break;
			case 4:
			current_key = READ(COLUNA4);*/
		}
		
		if(last_key == current_key){
 34c:	d8 13       	cpse	r29, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <debounce+0xb4>
			counter++;
 350:	cf 5f       	subi	r28, 0xFF	; 255
 352:	01 c0       	rjmp	.+2      	; 0x356 <debounce+0xb6>
		}else{
			counter = 0;
 354:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		last_key = current_key;
	}while(counter < BOUNCE);
 356:	c7 30       	cpi	r28, 0x07	; 7
 358:	40 f3       	brcs	.-48     	; 0x32a <debounce+0x8a>

	switch(coluna){
 35a:	11 30       	cpi	r17, 0x01	; 1
 35c:	19 f0       	breq	.+6      	; 0x364 <debounce+0xc4>
 35e:	12 30       	cpi	r17, 0x02	; 2
 360:	21 f0       	breq	.+8      	; 0x36a <debounce+0xca>
 362:	05 c0       	rjmp	.+10     	; 0x36e <debounce+0xce>
		case 1:
		while(READ(COLUNA1) == 0);
 364:	30 9b       	sbis	0x06, 0	; 6
 366:	fe cf       	rjmp	.-4      	; 0x364 <debounce+0xc4>
 368:	02 c0       	rjmp	.+4      	; 0x36e <debounce+0xce>
		break;
		case 2:
		while(READ(COLUNA2) == 0);
 36a:	31 9b       	sbis	0x06, 1	; 6
 36c:	fe cf       	rjmp	.-4      	; 0x36a <debounce+0xca>
		break;
		case 4:
		while(READ(COLUNA4) == 0);*/
	}
	return current_key;
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	08 95       	ret

00000376 <get_tecla>:
#include "matrix_keypad.h"
#include "timeControl.h"

char get_tecla(){
	while(1){
		if(!debounce(1, 1)){ return '1';}
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	92 df       	rcall	.-220    	; 0x2a0 <debounce>
 37c:	88 23       	and	r24, r24
 37e:	29 f1       	breq	.+74     	; 0x3ca <get_tecla+0x54>
		if(!debounce(1, 2)){ return '2';}
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	8d df       	rcall	.-230    	; 0x2a0 <debounce>
 386:	88 23       	and	r24, r24
 388:	11 f1       	breq	.+68     	; 0x3ce <get_tecla+0x58>
		//if(!debounce(1, 3)){ return '3';}
		//if(!debounce(1, 4)){ return 'A';}
		if(!debounce(2, 1)){ return '4';}
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	88 df       	rcall	.-240    	; 0x2a0 <debounce>
 390:	88 23       	and	r24, r24
 392:	f9 f0       	breq	.+62     	; 0x3d2 <get_tecla+0x5c>
		if(!debounce(2, 2)){ return '5';}
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	83 df       	rcall	.-250    	; 0x2a0 <debounce>
 39a:	88 23       	and	r24, r24
 39c:	e1 f0       	breq	.+56     	; 0x3d6 <get_tecla+0x60>
		//if(!debounce(2, 3)){ return '6';}
		//if(!debounce(2, 4)){ return 'B';}
		if(!debounce(3, 1)){ return '7';}
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	7e df       	rcall	.-260    	; 0x2a0 <debounce>
 3a4:	88 23       	and	r24, r24
 3a6:	c9 f0       	breq	.+50     	; 0x3da <get_tecla+0x64>
		if(!debounce(3, 2)){ return '8';}
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	79 df       	rcall	.-270    	; 0x2a0 <debounce>
 3ae:	88 23       	and	r24, r24
 3b0:	b1 f0       	breq	.+44     	; 0x3de <get_tecla+0x68>
		//if(!debounce(3, 3)){ return '9';}
		//if(!debounce(3, 4)){ return 'C';}
		if(!debounce(4, 1)){ return '*';}
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	84 e0       	ldi	r24, 0x04	; 4
 3b6:	74 df       	rcall	.-280    	; 0x2a0 <debounce>
 3b8:	88 23       	and	r24, r24
 3ba:	99 f0       	breq	.+38     	; 0x3e2 <get_tecla+0x6c>
		if(!debounce(4, 2)){ return '0';}
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	6f df       	rcall	.-290    	; 0x2a0 <debounce>
 3c2:	81 11       	cpse	r24, r1
 3c4:	d8 cf       	rjmp	.-80     	; 0x376 <get_tecla>
 3c6:	80 e3       	ldi	r24, 0x30	; 48
 3c8:	08 95       	ret
 3ca:	81 e3       	ldi	r24, 0x31	; 49
#include "matrix_keypad.h"
#include "timeControl.h"

char get_tecla(){
	while(1){
		if(!debounce(1, 1)){ return '1';}
 3cc:	08 95       	ret
 3ce:	82 e3       	ldi	r24, 0x32	; 50
		if(!debounce(1, 2)){ return '2';}
 3d0:	08 95       	ret
 3d2:	84 e3       	ldi	r24, 0x34	; 52
		//if(!debounce(1, 3)){ return '3';}
		//if(!debounce(1, 4)){ return 'A';}
		if(!debounce(2, 1)){ return '4';}
 3d4:	08 95       	ret
 3d6:	85 e3       	ldi	r24, 0x35	; 53
		if(!debounce(2, 2)){ return '5';}
 3d8:	08 95       	ret
 3da:	87 e3       	ldi	r24, 0x37	; 55
		//if(!debounce(2, 3)){ return '6';}
		//if(!debounce(2, 4)){ return 'B';}
		if(!debounce(3, 1)){ return '7';}
 3dc:	08 95       	ret
 3de:	88 e3       	ldi	r24, 0x38	; 56
		if(!debounce(3, 2)){ return '8';}
 3e0:	08 95       	ret
 3e2:	8a e2       	ldi	r24, 0x2A	; 42
		//if(!debounce(3, 3)){ return '9';}
		//if(!debounce(3, 4)){ return 'C';}
		if(!debounce(4, 1)){ return '*';}
 3e4:	08 95       	ret

000003e6 <initSerialConfig>:
		if(!debounce(4, 2)){ return '0';}
		//if(!debounce(4, 3)){ return '#';}
		//if(!debounce(4, 4)){ return 'D';}
	}
	return '\0';
}
 3e6:	88 e1       	ldi	r24, 0x18	; 24
			return;
		}
	}
	message[0] = '\0';
	return;
}
 3e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3ec:	83 e3       	ldi	r24, 0x33	; 51
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3f8:	08 95       	ret

000003fa <sendSerialChar>:
 3fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 402:	85 ff       	sbrs	r24, 5
 404:	fc cf       	rjmp	.-8      	; 0x3fe <sendSerialChar+0x4>
 406:	08 95       	ret

00000408 <sendSerialMessage>:

// envia uma mensagem via comunicação serial
void sendSerialMessage(char* message){
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	7c 01       	movw	r14, r24
	int tamanhoStr = strlen(message);
 416:	fc 01       	movw	r30, r24
 418:	01 90       	ld	r0, Z+
 41a:	00 20       	and	r0, r0
 41c:	e9 f7       	brne	.-6      	; 0x418 <sendSerialMessage+0x10>
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	8f 01       	movw	r16, r30
 422:	08 1b       	sub	r16, r24
 424:	19 0b       	sbc	r17, r25
	for(int i=0; i<=tamanhoStr; i++){
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	06 c0       	rjmp	.+12     	; 0x438 <sendSerialMessage+0x30>
		sendSerialChar(message[i]);
 42c:	f7 01       	movw	r30, r14
 42e:	ec 0f       	add	r30, r28
 430:	fd 1f       	adc	r31, r29
 432:	80 81       	ld	r24, Z
 434:	e2 df       	rcall	.-60     	; 0x3fa <sendSerialChar>
}

// envia uma mensagem via comunicação serial
void sendSerialMessage(char* message){
	int tamanhoStr = strlen(message);
	for(int i=0; i<=tamanhoStr; i++){
 436:	21 96       	adiw	r28, 0x01	; 1
 438:	0c 17       	cp	r16, r28
 43a:	1d 07       	cpc	r17, r29
 43c:	bc f7       	brge	.-18     	; 0x42c <sendSerialMessage+0x24>
		sendSerialChar(message[i]);
	}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	08 95       	ret

0000044c <delay_microsegundos>:
		currentTime[MINUTES] = minutes;
		return 0;
		}else{
		return 1;
	}
}
 44c:	14 bc       	out	0x24, r1	; 36
 44e:	80 38       	cpi	r24, 0x80	; 128
 450:	91 05       	cpc	r25, r1
 452:	84 f4       	brge	.+32     	; 0x474 <delay_microsegundos+0x28>
 454:	22 e0       	ldi	r18, 0x02	; 2
 456:	25 bd       	out	0x25, r18	; 37
 458:	dc 01       	movw	r26, r24
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	34 e2       	ldi	r19, 0x24	; 36
 45e:	44 ef       	ldi	r20, 0xF4	; 244
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	c0 d0       	rcall	.+384    	; 0x5e4 <__mulshisi3>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	32 e1       	ldi	r19, 0x12	; 18
 468:	4a e7       	ldi	r20, 0x7A	; 122
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	9f d0       	rcall	.+318    	; 0x5ac <__divmodsi4>
 46e:	21 95       	neg	r18
 470:	26 bd       	out	0x26, r18	; 38
 472:	41 c0       	rjmp	.+130    	; 0x4f6 <delay_microsegundos+0xaa>
 474:	9c 01       	movw	r18, r24
 476:	20 58       	subi	r18, 0x80	; 128
 478:	31 09       	sbc	r19, r1
 47a:	29 36       	cpi	r18, 0x69	; 105
 47c:	33 40       	sbci	r19, 0x03	; 3
 47e:	80 f4       	brcc	.+32     	; 0x4a0 <delay_microsegundos+0x54>
 480:	23 e0       	ldi	r18, 0x03	; 3
 482:	25 bd       	out	0x25, r18	; 37
 484:	dc 01       	movw	r26, r24
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	34 e2       	ldi	r19, 0x24	; 36
 48a:	44 ef       	ldi	r20, 0xF4	; 244
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	aa d0       	rcall	.+340    	; 0x5e4 <__mulshisi3>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e9       	ldi	r19, 0x90	; 144
 494:	40 ed       	ldi	r20, 0xD0	; 208
 496:	53 e0       	ldi	r21, 0x03	; 3
 498:	89 d0       	rcall	.+274    	; 0x5ac <__divmodsi4>
 49a:	21 95       	neg	r18
 49c:	26 bd       	out	0x26, r18	; 38
 49e:	2b c0       	rjmp	.+86     	; 0x4f6 <delay_microsegundos+0xaa>
 4a0:	9c 01       	movw	r18, r24
 4a2:	29 5e       	subi	r18, 0xE9	; 233
 4a4:	33 40       	sbci	r19, 0x03	; 3
 4a6:	28 3b       	cpi	r18, 0xB8	; 184
 4a8:	3b 40       	sbci	r19, 0x0B	; 11
 4aa:	80 f4       	brcc	.+32     	; 0x4cc <delay_microsegundos+0x80>
 4ac:	24 e0       	ldi	r18, 0x04	; 4
 4ae:	25 bd       	out	0x25, r18	; 37
 4b0:	dc 01       	movw	r26, r24
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	34 e2       	ldi	r19, 0x24	; 36
 4b6:	44 ef       	ldi	r20, 0xF4	; 244
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	94 d0       	rcall	.+296    	; 0x5e4 <__mulshisi3>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e4       	ldi	r19, 0x40	; 64
 4c0:	42 e4       	ldi	r20, 0x42	; 66
 4c2:	5f e0       	ldi	r21, 0x0F	; 15
 4c4:	73 d0       	rcall	.+230    	; 0x5ac <__divmodsi4>
 4c6:	21 95       	neg	r18
 4c8:	26 bd       	out	0x26, r18	; 38
 4ca:	15 c0       	rjmp	.+42     	; 0x4f6 <delay_microsegundos+0xaa>
 4cc:	9c 01       	movw	r18, r24
 4ce:	21 5a       	subi	r18, 0xA1	; 161
 4d0:	3f 40       	sbci	r19, 0x0F	; 15
 4d2:	2c 30       	cpi	r18, 0x0C	; 12
 4d4:	30 43       	sbci	r19, 0x30	; 48
 4d6:	78 f4       	brcc	.+30     	; 0x4f6 <delay_microsegundos+0xaa>
 4d8:	25 e0       	ldi	r18, 0x05	; 5
 4da:	25 bd       	out	0x25, r18	; 37
 4dc:	dc 01       	movw	r26, r24
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	34 e2       	ldi	r19, 0x24	; 36
 4e2:	44 ef       	ldi	r20, 0xF4	; 244
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	7e d0       	rcall	.+252    	; 0x5e4 <__mulshisi3>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	49 e0       	ldi	r20, 0x09	; 9
 4ee:	5d e3       	ldi	r21, 0x3D	; 61
 4f0:	5d d0       	rcall	.+186    	; 0x5ac <__divmodsi4>
 4f2:	21 95       	neg	r18
 4f4:	26 bd       	out	0x26, r18	; 38
 4f6:	a8 9b       	sbis	0x15, 0	; 21
 4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <delay_microsegundos+0xaa>
 4fa:	08 95       	ret

000004fc <timeControlConfig>:
 4fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 500:	8c e0       	ldi	r24, 0x0C	; 12
 502:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 506:	83 e2       	ldi	r24, 0x23	; 35
 508:	94 ef       	ldi	r25, 0xF4	; 244
 50a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 50e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 512:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 516:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 51a:	ef e6       	ldi	r30, 0x6F	; 111
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	82 60       	ori	r24, 0x02	; 2
 522:	80 83       	st	Z, r24
 524:	78 94       	sei
 526:	08 95       	ret

00000528 <incTime>:

// incrementa horário em um segundo
void incTime(){
	if(currentTime[SECONDS] == 59){
 528:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x2>
 52c:	8b 33       	cpi	r24, 0x3B	; 59
 52e:	a9 f4       	brne	.+42     	; 0x55a <incTime+0x32>
		currentTime[SECONDS] = 0;
 530:	ec e0       	ldi	r30, 0x0C	; 12
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	12 82       	std	Z+2, r1	; 0x02
		if(currentTime[MINUTES] == 59){
 536:	81 81       	ldd	r24, Z+1	; 0x01
 538:	8b 33       	cpi	r24, 0x3B	; 59
 53a:	59 f4       	brne	.+22     	; 0x552 <incTime+0x2a>
			currentTime[MINUTES] = 0;
 53c:	11 82       	std	Z+1, r1	; 0x01
			if(currentTime[HOURS] == 23){
 53e:	80 81       	ld	r24, Z
 540:	87 31       	cpi	r24, 0x17	; 23
 542:	19 f4       	brne	.+6      	; 0x54a <incTime+0x22>
				currentTime[HOURS] = 0;
 544:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 548:	08 95       	ret
				}else{
				currentTime[HOURS]++;
 54a:	8f 5f       	subi	r24, 0xFF	; 255
 54c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 550:	08 95       	ret
			}
			}else{
			currentTime[MINUTES]++;
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <__data_end+0x1>
 558:	08 95       	ret
		}
		}else{
		currentTime[SECONDS]++;
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end+0x2>
 560:	08 95       	ret

00000562 <__vector_13>:
	}
}

ISR(TIMER1_OVF_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	incTime();
 584:	d1 df       	rcall	.-94     	; 0x528 <incTime>
	TIFR1 = ( 1 << 1 ); // limpa flag de estouro
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	86 bb       	out	0x16, r24	; 22
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <__divmodsi4>:
 5ac:	05 2e       	mov	r0, r21
 5ae:	97 fb       	bst	r25, 7
 5b0:	16 f4       	brtc	.+4      	; 0x5b6 <__divmodsi4+0xa>
 5b2:	00 94       	com	r0
 5b4:	0f d0       	rcall	.+30     	; 0x5d4 <__negsi2>
 5b6:	57 fd       	sbrc	r21, 7
 5b8:	05 d0       	rcall	.+10     	; 0x5c4 <__divmodsi4_neg2>
 5ba:	1a d0       	rcall	.+52     	; 0x5f0 <__udivmodsi4>
 5bc:	07 fc       	sbrc	r0, 7
 5be:	02 d0       	rcall	.+4      	; 0x5c4 <__divmodsi4_neg2>
 5c0:	46 f4       	brtc	.+16     	; 0x5d2 <__divmodsi4_exit>
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <__negsi2>

000005c4 <__divmodsi4_neg2>:
 5c4:	50 95       	com	r21
 5c6:	40 95       	com	r20
 5c8:	30 95       	com	r19
 5ca:	21 95       	neg	r18
 5cc:	3f 4f       	sbci	r19, 0xFF	; 255
 5ce:	4f 4f       	sbci	r20, 0xFF	; 255
 5d0:	5f 4f       	sbci	r21, 0xFF	; 255

000005d2 <__divmodsi4_exit>:
 5d2:	08 95       	ret

000005d4 <__negsi2>:
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__mulshisi3>:
 5e4:	b7 ff       	sbrs	r27, 7
 5e6:	26 c0       	rjmp	.+76     	; 0x634 <__muluhisi3>

000005e8 <__mulohisi3>:
 5e8:	25 d0       	rcall	.+74     	; 0x634 <__muluhisi3>
 5ea:	82 1b       	sub	r24, r18
 5ec:	93 0b       	sbc	r25, r19
 5ee:	08 95       	ret

000005f0 <__udivmodsi4>:
 5f0:	a1 e2       	ldi	r26, 0x21	; 33
 5f2:	1a 2e       	mov	r1, r26
 5f4:	aa 1b       	sub	r26, r26
 5f6:	bb 1b       	sub	r27, r27
 5f8:	fd 01       	movw	r30, r26
 5fa:	0d c0       	rjmp	.+26     	; 0x616 <__udivmodsi4_ep>

000005fc <__udivmodsi4_loop>:
 5fc:	aa 1f       	adc	r26, r26
 5fe:	bb 1f       	adc	r27, r27
 600:	ee 1f       	adc	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	a2 17       	cp	r26, r18
 606:	b3 07       	cpc	r27, r19
 608:	e4 07       	cpc	r30, r20
 60a:	f5 07       	cpc	r31, r21
 60c:	20 f0       	brcs	.+8      	; 0x616 <__udivmodsi4_ep>
 60e:	a2 1b       	sub	r26, r18
 610:	b3 0b       	sbc	r27, r19
 612:	e4 0b       	sbc	r30, r20
 614:	f5 0b       	sbc	r31, r21

00000616 <__udivmodsi4_ep>:
 616:	66 1f       	adc	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a 94       	dec	r1
 620:	69 f7       	brne	.-38     	; 0x5fc <__udivmodsi4_loop>
 622:	60 95       	com	r22
 624:	70 95       	com	r23
 626:	80 95       	com	r24
 628:	90 95       	com	r25
 62a:	9b 01       	movw	r18, r22
 62c:	ac 01       	movw	r20, r24
 62e:	bd 01       	movw	r22, r26
 630:	cf 01       	movw	r24, r30
 632:	08 95       	ret

00000634 <__muluhisi3>:
 634:	09 d0       	rcall	.+18     	; 0x648 <__umulhisi3>
 636:	a5 9f       	mul	r26, r21
 638:	90 0d       	add	r25, r0
 63a:	b4 9f       	mul	r27, r20
 63c:	90 0d       	add	r25, r0
 63e:	a4 9f       	mul	r26, r20
 640:	80 0d       	add	r24, r0
 642:	91 1d       	adc	r25, r1
 644:	11 24       	eor	r1, r1
 646:	08 95       	ret

00000648 <__umulhisi3>:
 648:	a2 9f       	mul	r26, r18
 64a:	b0 01       	movw	r22, r0
 64c:	b3 9f       	mul	r27, r19
 64e:	c0 01       	movw	r24, r0
 650:	a3 9f       	mul	r26, r19
 652:	70 0d       	add	r23, r0
 654:	81 1d       	adc	r24, r1
 656:	11 24       	eor	r1, r1
 658:	91 1d       	adc	r25, r1
 65a:	b2 9f       	mul	r27, r18
 65c:	70 0d       	add	r23, r0
 65e:	81 1d       	adc	r24, r1
 660:	11 24       	eor	r1, r1
 662:	91 1d       	adc	r25, r1
 664:	08 95       	ret

00000666 <_exit>:
 666:	f8 94       	cli

00000668 <__stop_program>:
 668:	ff cf       	rjmp	.-2      	; 0x668 <__stop_program>
